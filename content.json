{"meta":{"title":"Mr Harsh的广阔天地","subtitle":"广阔天地，大有作为。","description":"广阔天地，大有作为。","author":"MrHarsh","url":"http://www.mrharsh.top","root":"/"},"pages":[{"title":"404 Not Found：该页无法显示","date":"2022-08-10T08:07:27.912Z","updated":"2022-08-10T08:07:27.912Z","comments":false,"path":"/404.html","permalink":"http://www.mrharsh.top/404.html","excerpt":"","text":""},{"title":"分类","date":"2022-08-08T14:44:28.267Z","updated":"2022-08-08T14:44:28.266Z","comments":false,"path":"categories/index.html","permalink":"http://www.mrharsh.top/categories/index.html","excerpt":"","text":""},{"title":"关于","date":"2022-08-09T14:02:25.497Z","updated":"2022-08-09T14:02:25.495Z","comments":false,"path":"about/index.html","permalink":"http://www.mrharsh.top/about/index.html","excerpt":"","text":"所有的生活都是合理的,我们没必要相互理解。"},{"title":"Github仓库","date":"2022-08-08T11:11:17.332Z","updated":"2022-08-08T11:11:17.332Z","comments":false,"path":"repository/index.html","permalink":"http://www.mrharsh.top/repository/index.html","excerpt":"","text":""},{"title":"标签","date":"2022-08-08T14:45:01.893Z","updated":"2022-08-08T14:45:01.893Z","comments":false,"path":"tags/index.html","permalink":"http://www.mrharsh.top/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"C++的STL","slug":"C-的STL","date":"2022-08-10T08:51:16.000Z","updated":"2022-08-10T12:22:50.406Z","comments":true,"path":"2022/08/10/C-的STL/","link":"","permalink":"http://www.mrharsh.top/2022/08/10/C-%E7%9A%84STL/","excerpt":"","text":"开始 STL的代码从广义上讲分为三类：algorithm（算法）、container（容器）和iterator（迭代器），几乎所有的代码都采用了模板类和模板函数的方式，这相比于传统的由函数和类组成的库来说。 Vector动态数组 头文件 1#include &lt;vector&gt; 初始化 123456789101112vector&lt;int&gt; ans;//int的型的数组vector&lt;structure&gt; ans;//一个structure结构体的数组//指定长度的初始化vector&lt;short&gt; ans(n);vector&lt;double&gt; ans(n,2);//长度为n,全为2的数组vector&lt;double&gt; shaow(ans);//拷贝初始化，类型长度需相同vector&lt;int&gt; a&#123;1, 2, 3, 4, 5&#125;;//二维vector&lt;int&gt;ans[5];//行为固定的5，列为动态可变vector&lt;vectot&lt;int&gt; &gt;num;//行列均可以变vector&lt;vector&lt;int&gt; &gt; a(n + 1, vector&lt;int&gt;(m + 1, 0));//固定n+1行m+1列初始值为0的二维数组 访问遍历 123456789101112131415#include &lt;iostream&gt;#include &quot;vector&quot;using namespace std;int main() &#123; int n = 5; vector&lt;int&gt; num(5, 1); cout&lt;&lt;num[2];//访问下标为2的元素//智能指针遍历 for (auto i: num) cout &lt;&lt; i &lt;&lt; &quot; &quot;;//遍历 for(int i=0;i&lt;num.size();i++) cout&lt;&lt;num[i]&lt;&lt;&#x27; &#x27;; return 0;&#125; 方法函数 函数 含义 a.empty() 判断是否为空，空为真 a.begin() 返回首元素的迭代器 a.end() 返回末位元素的迭代器 a.size() 返回数据个数 a.insert(it,x) 先任意迭代器插入一个元素 a.pop_back() 删除最后一个元素 a.front() 返回第一个数据 a.clear() 清除元素 a.resize(n,v) 改变数组大小为n,赋值为v a.erase(f,l) 删除[f,i)的所有元素 a.sort(a.begin(),a.end()) 排序 代码 12345678910#include &lt;iostream&gt;#include &quot;vector&quot;using namespace std;int main() &#123; int n = 5; vector&lt;int&gt; num(5, 1); for(vector&lt;int&gt;::iterator it=num.begin();it!=num.end();it++) cout&lt;&lt;*it&lt;&lt;&#x27; &#x27;; return 0;&#125; stack栈 头文件 #include &lt;stack&gt;","categories":[{"name":"C++","slug":"C","permalink":"http://www.mrharsh.top/categories/C/"}],"tags":[{"name":"C++","slug":"C","permalink":"http://www.mrharsh.top/tags/C/"},{"name":"STL","slug":"STL","permalink":"http://www.mrharsh.top/tags/STL/"}]},{"title":"C++编程","slug":"C-编程","date":"2022-08-10T03:28:35.000Z","updated":"2022-08-10T03:34:26.204Z","comments":true,"path":"2022/08/10/C-编程/","link":"","permalink":"http://www.mrharsh.top/2022/08/10/C-%E7%BC%96%E7%A8%8B/","excerpt":"","text":"从C到C++ C是面向过程的语言，对于小规模程序还是得心应手的，为了程序设计的更见简易，C++最为C语言的自增版，保留原来语法，增加面向对象机制。","categories":[{"name":"C++","slug":"C","permalink":"http://www.mrharsh.top/categories/C/"}],"tags":[{"name":"C++","slug":"C","permalink":"http://www.mrharsh.top/tags/C/"},{"name":"OP编程","slug":"OP编程","permalink":"http://www.mrharsh.top/tags/OP%E7%BC%96%E7%A8%8B/"}]},{"title":"urllib库的使用","slug":"urllib库的使用","date":"2022-08-09T06:51:35.000Z","updated":"2022-08-10T03:25:24.669Z","comments":true,"path":"2022/08/09/urllib库的使用/","link":"","permalink":"http://www.mrharsh.top/2022/08/09/urllib%E5%BA%93%E7%9A%84%E4%BD%BF%E7%94%A8/","excerpt":"","text":"开始 urllib是Python内置的HTTP请求模块，其包含以下四个模块 request:HTTP请求模块 error:异常处理模块 parse:工具模块，拆分、解析、合并 robotparser:识别网站robots.txt文件，判断哪些网站可以爬。 请求发送 urlopen() 123456import urllib.requestresponse=urllib.request.urlopen(&#x27;https://www.baidu.com&#x27;)print(response.read().decode(&#x27;utf-8&#x27;))#read可以返回网页内容， 网页编码为UTF-8需要用decode,不然会有转义字符print(type(response)) #类型print(response.status) #获取响应状态码print(response.getheaders()) #获取响应头rs()) data参数 data参数为可选，使用需要，使用bytes()转换为字节流编码格式 12345import urllib.requestimport urllib.parsedata=bytes(urllib.parse.urlencode(&#123;&#x27;B&#x27;:&#x27;1&#x27;&#125;),encoding=&#x27;utf-8&#x27;)response=urllib.request.urlopen(&#x27;http://httpbin.org/post&#x27;,data=data)print(response.read().decode(&#x27;utf8&#x27;)) 我们的数据出现在了form字段里，这是我们用POST方法传递的数据 timeout参数 12345678import urllib.requestimport sockettry: response=urllib.request.urlopen(&#x27;http://www.google.com&#x27;,timeout=1) print(response.read().decode(&#x27;utf-8&#x27;))except urllib.error.URLError as e: if isinstance(e.reason,socket.timeout): print(&#x27;TIME OUT&#x27;) Request() Request能实现更多参数的请求 123def __init__(self, url, data=None, headers=&#123;&#125;, origin_req_host=None, unverifiable=False, method=None): URL:请求URL data:必须为bytes(),如果是字典可以用urllib.parse.urlencode() headers:为一个字典 origin_req_host：表示这个请求是否是无法验证的 method:请求方法 123456789101112131415161718from urllib import request,parseurl=&#x27;http://httpbin.org/post&#x27;headers=&#123; &#x27;Host&#x27;:&#x27;httpbin.org&#x27;, &#x27;User-Agent&#x27;:&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/104.0.5112.81 Safari/537.36 Edg/104.0.1293.47&#x27;&#125;dict=&#123;&#x27;b&#x27;:1&#125;data=bytes(parse.urlencode(dict),encoding=&#x27;utf8&#x27;)data=bytes(parse.urlencode(&#123;&#x27;B&#x27;:&#x27;1&#x27;&#125;),encoding=&#x27;utf-8&#x27;)req=request.Request(url,data=data,headers=headers,method=&#x27;POST&#x27;)&quot;&quot;&quot;另一种请求头的添加方式req=request.Request(url=url,data=data,method=&#x27;POST&#x27;)req.add_header(&#x27;Host&#x27;,&#x27;httpbin.org&#x27;,)&quot;&quot;&quot;response=request.urlopen(req)print(response.read().deco 进阶用法 Handler 现在我们介绍Handler 比如： HTTPDefaultErrorHandler:用于处理","categories":[{"name":"爬虫","slug":"爬虫","permalink":"http://www.mrharsh.top/categories/%E7%88%AC%E8%99%AB/"}],"tags":[{"name":"Python","slug":"Python","permalink":"http://www.mrharsh.top/tags/Python/"},{"name":"爬虫","slug":"爬虫","permalink":"http://www.mrharsh.top/tags/%E7%88%AC%E8%99%AB/"}]},{"title":"爬虫基础","slug":"爬虫基础","date":"2022-08-09T02:48:02.000Z","updated":"2022-08-09T05:36:50.356Z","comments":true,"path":"2022/08/09/爬虫基础/","link":"","permalink":"http://www.mrharsh.top/2022/08/09/%E7%88%AC%E8%99%AB%E5%9F%BA%E7%A1%80/","excerpt":"","text":"HTTP基本原理 参考资料： HTTP 教程 | 菜鸟教程 (runoob.com) URI和URL URI:统一资源标识符 URL:统一资源定位符 URN:统一资源名称 现在互联网，URN用得很少，一般网页链接🔗称为URL 超文本 网页源代码HTML称为超文本 HTTP和HTTPS HTTP:超文本传输协议 HTTPS:HTTP下加入SSL层 HTTP 请求过程 我们利用浏览器”检查“工具的网络来观察这个过程 General部分 Request URL:请求的URL Request Method:请求方法 Status Code: 响应状态码 Remote Address:远程服务器的地址和端口 Referrer Policy:Referrer判别策略 Response Header:响应头 Request Header:请求头 请求 请求由客户端发出，分为4部分 请求方法:Request Method 请求网址:Request URL 请求头:Request Headers 请求体:Request Body 请求方法 常见的为：GET和POST GET 与POST区别 GET的参数在URL里面，而POST请求的数据以表单传输，包含在请求体 GET的数据只有1024字节，而POST没有限制 其他请求方法 请求的网址 请求的网址即URL 请求头 Accept:请求报头域，指定客户端接收哪些类型的信息 Accept-Language:指定客户端可接受语言类型 Host:指定请求资源的主机IP和端口 Cookie:储存在用户本地终端上的数据,特定的 web文档关联在一起, 保存了该客户机访问这个Web 文档时的信息, 当客户机再次访问这个 Web 文档时这些信息可供该文档使用。 Referer:标识请求是从那个页面发过来的 User-Agent:一个特殊字符串头，使得服务器能够识别客户使用的操作系统及版本、CPU 类型、浏览器及版本、浏览器渲染引擎、浏览器语言、浏览器插件等。 Content-Type:内容类型，一般是指网页中存在的Content-Type，用于定义网络文件的类型和网页的编码，决定文件接收方将以什么形式、什么编码读取这个文件 请求体 请求体承载的是POST的表单数据，对于GET，请求为空 响应 响应状态码 常见的 HTTP 状态码： 200 - 请求成功 301 - 资源（网页等）被永久转移到其它URL 404 - 请求的资源（网页等）不存在 500 - 内部服务器错误 其它可以参考HTTP 状态码 | 菜鸟教程 响应头 响应头包含服务器对请求的应答信息，如Content-Type、Sever、Set-Cookie 响应体 响应体包含响应的正文数据 网页基础 网页组成 网页是由HTML、CSS、JavaScript组成 如果想学爬虫，必须要点Web基础","categories":[{"name":"爬虫","slug":"爬虫","permalink":"http://www.mrharsh.top/categories/%E7%88%AC%E8%99%AB/"}],"tags":[{"name":"Python","slug":"Python","permalink":"http://www.mrharsh.top/tags/Python/"},{"name":"爬虫","slug":"爬虫","permalink":"http://www.mrharsh.top/tags/%E7%88%AC%E8%99%AB/"}]},{"title":"Hello World","slug":"hello-world","date":"2022-08-07T17:38:10.230Z","updated":"2022-08-08T14:03:31.441Z","comments":true,"path":"2022/08/08/hello-world/","link":"","permalink":"http://www.mrharsh.top/2022/08/08/hello-world/","excerpt":"","text":"在Hexo上写文章 以前我是有写博客的用的是wordpress，wp可以说非常优秀，各种插件与主题，个性化也是非常的高，就是写博客就要有专门的时间写博客，而现在我发现hexo可以用markdown边写笔记，加个header就可以博客文章了，很方便！ Hello World 就让一句&quot;Hello world&quot;来开始新的旅程！","categories":[{"name":"随想","slug":"随想","permalink":"http://www.mrharsh.top/categories/%E9%9A%8F%E6%83%B3/"}],"tags":[{"name":"随想","slug":"随想","permalink":"http://www.mrharsh.top/tags/%E9%9A%8F%E6%83%B3/"}]}],"categories":[{"name":"C++","slug":"C","permalink":"http://www.mrharsh.top/categories/C/"},{"name":"爬虫","slug":"爬虫","permalink":"http://www.mrharsh.top/categories/%E7%88%AC%E8%99%AB/"},{"name":"随想","slug":"随想","permalink":"http://www.mrharsh.top/categories/%E9%9A%8F%E6%83%B3/"}],"tags":[{"name":"C++","slug":"C","permalink":"http://www.mrharsh.top/tags/C/"},{"name":"STL","slug":"STL","permalink":"http://www.mrharsh.top/tags/STL/"},{"name":"OP编程","slug":"OP编程","permalink":"http://www.mrharsh.top/tags/OP%E7%BC%96%E7%A8%8B/"},{"name":"Python","slug":"Python","permalink":"http://www.mrharsh.top/tags/Python/"},{"name":"爬虫","slug":"爬虫","permalink":"http://www.mrharsh.top/tags/%E7%88%AC%E8%99%AB/"},{"name":"随想","slug":"随想","permalink":"http://www.mrharsh.top/tags/%E9%9A%8F%E6%83%B3/"}]}