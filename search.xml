<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>C++的STL</title>
    <url>/2022/08/10/C-%E7%9A%84STL/</url>
    <content><![CDATA[<h2 id="开始"><a class="markdownIt-Anchor" href="#开始"></a> 开始</h2>
<blockquote>
<p>STL的代码从广义上讲分为三类：algorithm（算法）、container（容器）和iterator（迭代器），几乎所有的代码都采用了模板类和模板函数的方式，这相比于传统的由函数和类组成的库来说。</p>
</blockquote>
<p>用STL我们就不用反复实现一些代码，提高开发效率。当然这个需要<mark>数据结构基础</mark></p>
<hr />
<h2 id="vector动态数组"><a class="markdownIt-Anchor" href="#vector动态数组"></a> vector动态数组</h2>
<h3 id="头文件"><a class="markdownIt-Anchor" href="#头文件"></a> 头文件</h3>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br></pre></td></tr></table></figure>
<h3 id="初始化"><a class="markdownIt-Anchor" href="#初始化"></a> 初始化</h3>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">vector&lt;<span class="type">int</span>&gt; ans;<span class="comment">//int的型的数组</span></span><br><span class="line">vector&lt;structure&gt; ans;<span class="comment">//一个structure结构体的数组</span></span><br><span class="line"><span class="comment">//指定长度的初始化</span></span><br><span class="line"><span class="function">vector&lt;<span class="type">short</span>&gt; <span class="title">ans</span><span class="params">(n)</span></span>;</span><br><span class="line"><span class="function">vector&lt;<span class="type">double</span>&gt; <span class="title">ans</span><span class="params">(n,<span class="number">2</span>)</span></span>;<span class="comment">//长度为n,全为2的数组</span></span><br><span class="line"><span class="function">vector&lt;<span class="type">double</span>&gt; <span class="title">shaow</span><span class="params">(ans)</span></span>;<span class="comment">//拷贝初始化，类型长度需相同</span></span><br><span class="line">vector&lt;<span class="type">int</span>&gt; a&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//二维</span></span><br><span class="line">vector&lt;<span class="type">int</span>&gt;ans[<span class="number">5</span>];<span class="comment">//行为固定的5，列为动态可变</span></span><br><span class="line">vector&lt;vectot&lt;<span class="type">int</span>&gt; &gt;num;<span class="comment">//行列均可以变</span></span><br><span class="line">vector&lt;vector&lt;<span class="type">int</span>&gt; &gt; <span class="built_in">a</span>(n + <span class="number">1</span>, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(m + <span class="number">1</span>, <span class="number">0</span>));<span class="comment">//固定n+1行m+1列初始值为0的二维数组</span></span><br></pre></td></tr></table></figure>
<h3 id="访问遍历"><a class="markdownIt-Anchor" href="#访问遍历"></a> 访问遍历</h3>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;vector&quot;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n = <span class="number">5</span>;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">num</span><span class="params">(<span class="number">5</span>, <span class="number">1</span>)</span></span>;</span><br><span class="line">    cout&lt;&lt;num[<span class="number">2</span>];<span class="comment">//访问下标为2的元素</span></span><br><span class="line"><span class="comment">//智能指针遍历</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> i: num)</span><br><span class="line">        cout &lt;&lt; i &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line"><span class="comment">//遍历</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;num.<span class="built_in">size</span>();i++)</span><br><span class="line">        cout&lt;&lt;num[i]&lt;&lt;<span class="string">&#x27; &#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="方法函数"><a class="markdownIt-Anchor" href="#方法函数"></a> 方法函数</h3>
<table>
<thead>
<tr>
<th style="text-align:center"><strong>函数</strong></th>
<th style="text-align:center">含义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">a.empty()</td>
<td style="text-align:center">判断是否为空，空为真</td>
</tr>
<tr>
<td style="text-align:center">a.begin()</td>
<td style="text-align:center">返回首元素的迭代器</td>
</tr>
<tr>
<td style="text-align:center">a.end()</td>
<td style="text-align:center">返回末位元素的迭代器</td>
</tr>
<tr>
<td style="text-align:center">a.size()</td>
<td style="text-align:center">返回数据个数</td>
</tr>
<tr>
<td style="text-align:center">a.insert(it,x)</td>
<td style="text-align:center">先任意迭代器插入一个元素</td>
</tr>
<tr>
<td style="text-align:center">a.pop_back()</td>
<td style="text-align:center">删除最后一个元素</td>
</tr>
<tr>
<td style="text-align:center">a.front()</td>
<td style="text-align:center">返回第一个数据</td>
</tr>
<tr>
<td style="text-align:center">a.clear()</td>
<td style="text-align:center">清除元素</td>
</tr>
<tr>
<td style="text-align:center">a.resize(n,v)</td>
<td style="text-align:center">改变数组大小为n,赋值为v</td>
</tr>
<tr>
<td style="text-align:center">a.erase(f,l)</td>
<td style="text-align:center">删除[f,i)的所有元素</td>
</tr>
<tr>
<td style="text-align:center">sort(a.begin(),a.end())</td>
<td style="text-align:center">排序</td>
</tr>
</tbody>
</table>
<h3 id="代码"><a class="markdownIt-Anchor" href="#代码"></a> 代码</h3>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;vector&quot;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n = <span class="number">5</span>;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">num</span><span class="params">(<span class="number">5</span>, <span class="number">1</span>)</span></span>;</span><br><span class="line">    <span class="keyword">for</span>(vector&lt;<span class="type">int</span>&gt;::iterator it=num.<span class="built_in">begin</span>();it!=num.<span class="built_in">end</span>();it++)</span><br><span class="line">        cout&lt;&lt;*it&lt;&lt;<span class="string">&#x27; &#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />
<h2 id="stack栈"><a class="markdownIt-Anchor" href="#stack栈"></a> stack栈</h2>
<h3 id="头文件-2"><a class="markdownIt-Anchor" href="#头文件-2"></a> 头文件</h3>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br></pre></td></tr></table></figure>
<h3 id="初始化-2"><a class="markdownIt-Anchor" href="#初始化-2"></a> 初始化</h3>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">stack&lt;<span class="type">int</span>&gt;ans;</span><br></pre></td></tr></table></figure>
<h3 id="方法函数-2"><a class="markdownIt-Anchor" href="#方法函数-2"></a> 方法函数</h3>
<table>
<thead>
<tr>
<th style="text-align:center">函数</th>
<th style="text-align:center">含义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">push()</td>
<td style="text-align:center">压栈</td>
</tr>
<tr>
<td style="text-align:center">pop()</td>
<td style="text-align:center">出栈</td>
</tr>
<tr>
<td style="text-align:center">empty()</td>
<td style="text-align:center">空为真</td>
</tr>
<tr>
<td style="text-align:center">top()</td>
<td style="text-align:center">取得栈顶元素</td>
</tr>
<tr>
<td style="text-align:center">size()</td>
<td style="text-align:center">元素个数</td>
</tr>
</tbody>
</table>
<h3 id="代码-2"><a class="markdownIt-Anchor" href="#代码-2"></a> 代码</h3>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    stack&lt;<span class="type">int</span>&gt;a;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="keyword">while</span>(!a.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        i=a.<span class="built_in">top</span>();</span><br><span class="line">        cout&lt;&lt;i&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">        a.<span class="built_in">pop</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />
<h2 id="queue队列"><a class="markdownIt-Anchor" href="#queue队列"></a> queue队列</h2>
<h3 id="头文件-3"><a class="markdownIt-Anchor" href="#头文件-3"></a> 头文件</h3>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br></pre></td></tr></table></figure>
<h2 id="初始化-3"><a class="markdownIt-Anchor" href="#初始化-3"></a> 初始化</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">queue&lt;<span class="type">int</span>&gt;ans;</span><br></pre></td></tr></table></figure>
<h3 id="方法函数-3"><a class="markdownIt-Anchor" href="#方法函数-3"></a> 方法函数</h3>
<table>
<thead>
<tr>
<th style="text-align:center">函数</th>
<th style="text-align:center">含义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">front()</td>
<td style="text-align:center">返回队首</td>
</tr>
<tr>
<td style="text-align:center">back()</td>
<td style="text-align:center">返回队尾元素</td>
</tr>
<tr>
<td style="text-align:center">pop()</td>
<td style="text-align:center">出队</td>
</tr>
<tr>
<td style="text-align:center">push()</td>
<td style="text-align:center">进队</td>
</tr>
<tr>
<td style="text-align:center">size()</td>
<td style="text-align:center">元素个数</td>
</tr>
<tr>
<td style="text-align:center">empty()</td>
<td style="text-align:center">空队为空</td>
</tr>
</tbody>
</table>
<h3 id="代码-3"><a class="markdownIt-Anchor" href="#代码-3"></a> 代码</h3>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    queue&lt;<span class="type">int</span>&gt;a;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line">        a.<span class="built_in">push</span>(i);</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="keyword">while</span>(!a.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        i=a.<span class="built_in">front</span>();</span><br><span class="line">        cout&lt;&lt;i&lt;&lt;<span class="string">&#x27; &#x27;</span>;</span><br><span class="line">        a.<span class="built_in">pop</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />
<h2 id="deque双队列"><a class="markdownIt-Anchor" href="#deque双队列"></a> deque双队列</h2>
<h3 id="头文件-4"><a class="markdownIt-Anchor" href="#头文件-4"></a> 头文件</h3>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;deque&gt;</span></span></span><br></pre></td></tr></table></figure>
<h3 id="初始化-4"><a class="markdownIt-Anchor" href="#初始化-4"></a> 初始化</h3>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">deque&lt;<span class="type">int</span>&gt;ans;</span><br></pre></td></tr></table></figure>
<h3 id="方法函数-4"><a class="markdownIt-Anchor" href="#方法函数-4"></a> 方法函数</h3>
<table>
<thead>
<tr>
<th style="text-align:center">函数</th>
<th style="text-align:center">含义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">push_back()<br/>push_front()</td>
<td style="text-align:center">入队</td>
</tr>
<tr>
<td style="text-align:center">back()<br/>front()</td>
<td style="text-align:center">访问</td>
</tr>
<tr>
<td style="text-align:center">pop_back()<br/>pop_back()</td>
<td style="text-align:center">出队</td>
</tr>
<tr>
<td style="text-align:center">erase(iterator f,iterator l)</td>
<td style="text-align:center">删除</td>
</tr>
<tr>
<td style="text-align:center">empty()</td>
<td style="text-align:center">空为真</td>
</tr>
<tr>
<td style="text-align:center">size()</td>
<td style="text-align:center">元素数量</td>
</tr>
<tr>
<td style="text-align:center">clear()</td>
<td style="text-align:center">清空</td>
</tr>
<tr>
<td style="text-align:center">sort(iterator f,iterator l)</td>
<td style="text-align:center">排序</td>
</tr>
</tbody>
</table>
<h3 id="代码-4"><a class="markdownIt-Anchor" href="#代码-4"></a> 代码</h3>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;algorithm&quot;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">deque&lt;<span class="type">int</span>&gt;a;</span><br><span class="line"><span class="type">int</span> b[<span class="number">5</span>]=&#123;<span class="number">3</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">6</span>,<span class="number">2</span>&#125;;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++)</span><br><span class="line">    a.<span class="built_in">push_front</span>(b[i]);</span><br><span class="line"><span class="built_in">sort</span>(a.<span class="built_in">begin</span>(),a.<span class="built_in">end</span>());</span><br><span class="line"><span class="type">int</span> i;</span><br><span class="line"><span class="keyword">while</span>(!a.<span class="built_in">empty</span>())</span><br><span class="line">&#123;</span><br><span class="line">    i=a.<span class="built_in">back</span>();</span><br><span class="line">    cout&lt;&lt;i&lt;&lt;<span class="string">&#x27; &#x27;</span>;</span><br><span class="line">    a.<span class="built_in">pop_back</span>();</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />
<h2 id="priority_queue优先队列"><a class="markdownIt-Anchor" href="#priority_queue优先队列"></a> priority_queue优先队列</h2>
<h3 id="头文件-5"><a class="markdownIt-Anchor" href="#头文件-5"></a> 头文件</h3>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br></pre></td></tr></table></figure>
<h3 id="头文件-6"><a class="markdownIt-Anchor" href="#头文件-6"></a> 头文件</h3>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line">priority_queue&lt;Type, Container, Functional&gt;</span><br></pre></td></tr></table></figure>
<h3 id="方法函数-5"><a class="markdownIt-Anchor" href="#方法函数-5"></a> 方法函数</h3>
<table>
<thead>
<tr>
<th style="text-align:center">函数</th>
<th style="text-align:center">含义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">top()</td>
<td style="text-align:center">队首元素</td>
</tr>
<tr>
<td style="text-align:center">push()</td>
<td style="text-align:center">入队</td>
</tr>
<tr>
<td style="text-align:center">pop()</td>
<td style="text-align:center">出队</td>
</tr>
<tr>
<td style="text-align:center">empty()</td>
<td style="text-align:center">空为真</td>
</tr>
<tr>
<td style="text-align:center">size()</td>
<td style="text-align:center">元素个数</td>
</tr>
</tbody>
</table>
<h3 id="代码-5"><a class="markdownIt-Anchor" href="#代码-5"></a> 代码</h3>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    priority_queue&lt;<span class="type">int</span>&gt; a;</span><br><span class="line">    priority_queue&lt;<span class="type">int</span>, vector&lt;<span class="type">int</span>&gt;, greater&lt;<span class="type">int</span>&gt; &gt; c;  <span class="comment">//这样就是小顶堆</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        a.<span class="built_in">push</span>(i);</span><br><span class="line">        c.<span class="built_in">push</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (!a.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; a.<span class="built_in">top</span>() &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">        a.<span class="built_in">pop</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">while</span> (!c.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; c.<span class="built_in">top</span>() &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">        c.<span class="built_in">pop</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />
<h2 id="map映射"><a class="markdownIt-Anchor" href="#map映射"></a> map映射</h2>
<h3 id="头文件-7"><a class="markdownIt-Anchor" href="#头文件-7"></a> 头文件</h3>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br></pre></td></tr></table></figure>
<h3 id="初始化-5"><a class="markdownIt-Anchor" href="#初始化-5"></a> 初始化</h3>
<pre><code>map&lt;string,int&gt;a;
</code></pre>
<h3 id="函数方法"><a class="markdownIt-Anchor" href="#函数方法"></a> 函数方法</h3>
<table>
<thead>
<tr>
<th style="text-align:center">函数</th>
<th style="text-align:center">含义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">find(key)</td>
<td style="text-align:center">返回键为key的映射的迭代器<br/><em>当数据存在时，返回数据所在位置的迭代器，数据不存在时，返回mp.end()</em></td>
</tr>
<tr>
<td style="text-align:center">erase(it)</td>
<td style="text-align:center">删除迭代器对应的键和值</td>
</tr>
<tr>
<td style="text-align:center">erase(key)</td>
<td style="text-align:center">根据映射的键删除键和值</td>
</tr>
<tr>
<td style="text-align:center">erase(first,last)</td>
<td style="text-align:center">删除左闭右开区间迭代器对应的键和值</td>
</tr>
<tr>
<td style="text-align:center">size()</td>
<td style="text-align:center">返回对数</td>
</tr>
<tr>
<td style="text-align:center">clear()</td>
<td style="text-align:center">清空所有元素</td>
</tr>
<tr>
<td style="text-align:center">insert()</td>
<td style="text-align:center">插入元素</td>
</tr>
<tr>
<td style="text-align:center">empty()</td>
<td style="text-align:center">是否为空</td>
</tr>
<tr>
<td style="text-align:center">begin()</td>
<td style="text-align:center">第一个元素的迭代器</td>
</tr>
<tr>
<td style="text-align:center">end()</td>
<td style="text-align:center">返回尾部的迭代器（最后一个元素的下一个地址）</td>
</tr>
<tr>
<td style="text-align:center">rbegin()</td>
<td style="text-align:center">返回最后一个元素的迭代器（地址）</td>
</tr>
<tr>
<td style="text-align:center">rend()</td>
<td style="text-align:center">返回第一个元素的迭代器</td>
</tr>
<tr>
<td style="text-align:center">rend()</td>
<td style="text-align:center">返回第一个元素的迭代器</td>
</tr>
<tr>
<td style="text-align:center">count(key)</td>
<td style="text-align:center">查看元素是否存在</td>
</tr>
<tr>
<td style="text-align:center">lower_bound()</td>
<td style="text-align:center">返回指向键值&gt;= key的第一个元素</td>
</tr>
<tr>
<td style="text-align:center">upper_bound()</td>
<td style="text-align:center">返回指向键值&gt; key的第一个元素的迭代器，</td>
</tr>
</tbody>
</table>
<h3 id="代码-6"><a class="markdownIt-Anchor" href="#代码-6"></a> 代码</h3>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">map&lt;<span class="type">int</span>,string&gt;a;</span><br><span class="line">a[<span class="number">1</span>]=<span class="string">&quot;hello&quot;</span>;</span><br><span class="line">a[<span class="number">2</span>]=<span class="string">&quot;hi&quot;</span>;</span><br><span class="line">cout&lt;&lt;a[<span class="number">1</span>];</span><br><span class="line">cout&lt;&lt;endl;</span><br><span class="line">    map&lt;<span class="type">int</span>,string&gt;::iterator it;</span><br><span class="line">    <span class="keyword">for</span>(it=a.<span class="built_in">begin</span>();it!=a.<span class="built_in">end</span>();it++)</span><br><span class="line">        cout&lt;&lt;it-&gt;first&lt;&lt;<span class="string">&#x27;:&#x27;</span>&lt;&lt;it-&gt;second&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> i:a)</span><br><span class="line">        cout&lt;&lt;i.first&lt;&lt;<span class="string">&quot;:&quot;</span>&lt;&lt;i.second&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />
<h2 id="set集合"><a class="markdownIt-Anchor" href="#set集合"></a> set集合</h2>
<p>集合不重合且有序</p>
<h3 id="头文件-8"><a class="markdownIt-Anchor" href="#头文件-8"></a> 头文件</h3>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br></pre></td></tr></table></figure>
<h3 id="方法函数-6"><a class="markdownIt-Anchor" href="#方法函数-6"></a> 方法函数</h3>
<table>
<thead>
<tr>
<th style="text-align:center">函数</th>
<th style="text-align:center">含义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">begin()</td>
<td style="text-align:center">返回第一个元素的迭代器</td>
</tr>
<tr>
<td style="text-align:center">end()</td>
<td style="text-align:center">返回最后一个元素的迭代器</td>
</tr>
<tr>
<td style="text-align:center">rbegin()</td>
<td style="text-align:center">返回逆序迭代器</td>
</tr>
<tr>
<td style="text-align:center">rend()</td>
<td style="text-align:center">返回逆序迭代器</td>
</tr>
<tr>
<td style="text-align:center">clear()</td>
<td style="text-align:center">删除set容器中的所有的元素</td>
</tr>
<tr>
<td style="text-align:center">empty()</td>
<td style="text-align:center">判断是否为空</td>
</tr>
<tr>
<td style="text-align:center">insert()</td>
<td style="text-align:center">插入一个元素</td>
</tr>
<tr>
<td style="text-align:center">size()</td>
<td style="text-align:center">容器中的元素个数</td>
</tr>
<tr>
<td style="text-align:center">erase(iterator)<br/>erase(first,second）</td>
<td style="text-align:center">删除指向的值</td>
</tr>
<tr>
<td style="text-align:center">erase(key_value)</td>
<td style="text-align:center">删除键值key_value的值</td>
</tr>
<tr>
<td style="text-align:center">find(元素)</td>
<td style="text-align:center">查找set中的某一元素，返回迭代器</td>
</tr>
<tr>
<td style="text-align:center">lower_bound(k)</td>
<td style="text-align:center">返回大于等于k的第一个元素的迭代器</td>
</tr>
<tr>
<td style="text-align:center">upper_bound(k)</td>
<td style="text-align:center">返回大于k的第一个元素的迭代器</td>
</tr>
</tbody>
</table>
<h3 id="代码-7"><a class="markdownIt-Anchor" href="#代码-7"></a> 代码</h3>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    set&lt;<span class="type">int</span>&gt;a;</span><br><span class="line">    a.<span class="built_in">insert</span>(<span class="number">8</span>);</span><br><span class="line">    a.<span class="built_in">insert</span>(<span class="number">3</span>);</span><br><span class="line">    a.<span class="built_in">insert</span>(<span class="number">9</span>);</span><br><span class="line">    a.<span class="built_in">insert</span>(<span class="number">7</span>);</span><br><span class="line">    a.<span class="built_in">insert</span>(<span class="number">6</span>);</span><br><span class="line">    a.<span class="built_in">insert</span>(<span class="number">5</span>);</span><br><span class="line">    <span class="keyword">for</span>(set&lt;<span class="type">int</span>&gt;::iterator it=a.<span class="built_in">begin</span>();it!=a.<span class="built_in">end</span>();it++)</span><br><span class="line">        cout&lt;&lt;*it&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line"> </span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//结果为3 5 6 7 8 9</span></span><br></pre></td></tr></table></figure>
<hr />
<h2 id="pair"><a class="markdownIt-Anchor" href="#pair"></a> pair</h2>
<p>pair只含有两个元素，可以看作是只有两个元素的结构体.</p>
]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>STL</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2022/08/08/hello-world/</url>
    <content><![CDATA[<h2 id="在hexo上写文章"><a class="markdownIt-Anchor" href="#在hexo上写文章"></a> 在Hexo上写文章</h2>
<p>以前我是有写博客的用的是wordpress，wp可以说非常优秀，各种插件与主题，个性化也是非常的高，就是写博客就要有专门的时间写博客，而现在我发现hexo可以用markdown边写笔记，加个header就可以博客文章了，很方便！</p>
<h2 id="hello-world"><a class="markdownIt-Anchor" href="#hello-world"></a> Hello World</h2>
<p>就让一句&quot;Hello world&quot;来开始新的旅程！</p>
]]></content>
      <categories>
        <category>随想</category>
      </categories>
      <tags>
        <tag>随想</tag>
      </tags>
  </entry>
  <entry>
    <title>C++编程</title>
    <url>/2022/08/10/C-%E7%BC%96%E7%A8%8B/</url>
    <content><![CDATA[<h2 id="从c到c"><a class="markdownIt-Anchor" href="#从c到c"></a> 从C到C++</h2>
<p>C是面向过程的语言，对于小规模程序还是得心应手的，为了程序设计的更见简易，C++最为C语言的自增版，保留原来语法，增加面向对象机制。</p>
<h2 id=""><a class="markdownIt-Anchor" href="#"></a> </h2>
]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>OP编程</tag>
      </tags>
  </entry>
  <entry>
    <title>urllib库的使用</title>
    <url>/2022/08/09/urllib%E5%BA%93%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h2 id="开始"><a class="markdownIt-Anchor" href="#开始"></a> 开始</h2>
<p>urllib是Python内置的HTTP请求模块，其包含以下四个模块</p>
<ul>
<li>
<p>request:HTTP请求模块</p>
</li>
<li>
<p>error:异常处理模块</p>
</li>
<li>
<p>parse:工具模块，拆分、解析、合并</p>
</li>
<li>
<p>robotparser:识别网站robots.txt文件，判断哪些网站可以爬。</p>
</li>
</ul>
<h2 id="请求发送"><a class="markdownIt-Anchor" href="#请求发送"></a> 请求发送</h2>
<ol>
<li>
<h3 id="urlopen"><a class="markdownIt-Anchor" href="#urlopen"></a> urlopen()</h3>
</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line">response=urllib.request.urlopen(<span class="string">&#x27;https://www.baidu.com&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(response.read().decode(<span class="string">&#x27;utf-8&#x27;</span>))<span class="comment">#read可以返回网页内容， 网页编码为UTF-8需要用decode,不然会有转义字符</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(response)) <span class="comment">#类型</span></span><br><span class="line"><span class="built_in">print</span>(response.status) <span class="comment">#获取响应状态码</span></span><br><span class="line"><span class="built_in">print</span>(response.getheaders()) <span class="comment">#获取响应头rs())</span></span><br></pre></td></tr></table></figure>
<p><img src="https://s2.loli.net/2022/08/09/rbAdLaeVoSgvB8m.png" alt="运行结果" /></p>
<ul>
<li>
<p>data参数</p>
<p>data参数为可选，使用需要，使用bytes()转换为字节流编码格式</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="keyword">import</span>  urllib.parse</span><br><span class="line">data=<span class="built_in">bytes</span>(urllib.parse.urlencode(&#123;<span class="string">&#x27;B&#x27;</span>:<span class="string">&#x27;1&#x27;</span>&#125;),encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">response=urllib.request.urlopen(<span class="string">&#x27;http://httpbin.org/post&#x27;</span>,data=data)</span><br><span class="line"><span class="built_in">print</span>(response.read().decode(<span class="string">&#x27;utf8&#x27;</span>))</span><br></pre></td></tr></table></figure>
</li>
</ul>
<img src="https://s2.loli.net/2022/08/09/29Nm7Q6FEt3B4Kh.png" title="" alt="运行结果" data-align="right">
<p>我们的数据出现在了form字段里，这是我们用POST方法传递的数据</p>
<ul>
<li>
<p>timeout参数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    response=urllib.request.urlopen(<span class="string">&#x27;http://www.google.com&#x27;</span>,timeout=<span class="number">1</span>)</span><br><span class="line">    <span class="built_in">print</span>(response.read().decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line"><span class="keyword">except</span> urllib.error.URLError <span class="keyword">as</span> e:</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">isinstance</span>(e.reason,socket.timeout):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;TIME OUT&#x27;</span>)</span><br></pre></td></tr></table></figure>
</li>
</ul>
<ol start="2">
<li>
<h3 id="request"><a class="markdownIt-Anchor" href="#request"></a> Request()</h3>
<p>Request能实现更多参数的请求</p>
<blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, url, data=<span class="literal">None</span>, headers=&#123;&#125;,</span></span><br><span class="line"><span class="params">                 origin_req_host=<span class="literal">None</span>, unverifiable=<span class="literal">False</span>,</span></span><br><span class="line"><span class="params">                 method=<span class="literal">None</span></span>):</span><br></pre></td></tr></table></figure>
<ul>
<li>
<p>URL:请求URL</p>
</li>
<li>
<p>data:必须为bytes(),如果是字典可以用urllib.parse.urlencode()</p>
</li>
<li>
<p>headers:为一个字典</p>
</li>
<li>
<p>origin_req_host：表示这个请求是否是无法验证的</p>
</li>
<li>
<p>method:请求方法</p>
</li>
</ul>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request,parse</span><br><span class="line">url=<span class="string">&#x27;http://httpbin.org/post&#x27;</span></span><br><span class="line">headers=&#123;</span><br><span class="line">    <span class="string">&#x27;Host&#x27;</span>:<span class="string">&#x27;httpbin.org&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>:<span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/104.0.5112.81 Safari/537.36 Edg/104.0.1293.47&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">dict</span>=&#123;<span class="string">&#x27;b&#x27;</span>:<span class="number">1</span>&#125;</span><br><span class="line">data=<span class="built_in">bytes</span>(parse.urlencode(<span class="built_in">dict</span>),encoding=<span class="string">&#x27;utf8&#x27;</span>)</span><br><span class="line">data=<span class="built_in">bytes</span>(parse.urlencode(&#123;<span class="string">&#x27;B&#x27;</span>:<span class="string">&#x27;1&#x27;</span>&#125;),encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">req=request.Request(url,data=data,headers=headers,method=<span class="string">&#x27;POST&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">另一种请求头的添加方式</span></span><br><span class="line"><span class="string">req=request.Request(url=url,data=data,method=&#x27;POST&#x27;)</span></span><br><span class="line"><span class="string">req.add_header(&#x27;Host&#x27;,&#x27;httpbin.org&#x27;,)</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">response=request.urlopen(req)</span><br><span class="line"><span class="built_in">print</span>(response.read().deco</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="进阶用法"><a class="markdownIt-Anchor" href="#进阶用法"></a> 进阶用法</h2>
<h3 id="handler"><a class="markdownIt-Anchor" href="#handler"></a> Handler</h3>
<p>现在我们介绍Handler</p>
<p>比如：</p>
<blockquote>
<p>HTTPDefaultErrorHandler:用于处理</p>
</blockquote>
]]></content>
      <categories>
        <category>爬虫</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>爬虫基础</title>
    <url>/2022/08/09/%E7%88%AC%E8%99%AB%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h1 id="http基本原理"><a class="markdownIt-Anchor" href="#http基本原理"></a> HTTP基本原理</h1>
<blockquote>
<p>参考资料：</p>
<ul>
<li><a href="https://www.runoob.com/http/http-tutorial.html">HTTP 教程 | 菜鸟教程 (runoob.com)</a></li>
</ul>
</blockquote>
<hr />
<h2 id="uri和url"><a class="markdownIt-Anchor" href="#uri和url"></a> URI和URL</h2>
<p>URI:统一资源标识符</p>
<p>URL:统一资源定位符</p>
<p>URN:统一资源名称</p>
<blockquote>
<p>现在互联网，URN用得很少，一般网页链接🔗称为URL</p>
</blockquote>
<hr />
<h2 id="超文本"><a class="markdownIt-Anchor" href="#超文本"></a> 超文本</h2>
<p>网页源代码HTML称为超文本</p>
<hr />
<h2 id="http和https"><a class="markdownIt-Anchor" href="#http和https"></a> HTTP和HTTPS</h2>
<p>HTTP:超文本传输协议</p>
<p>HTTPS:HTTP下加入SSL层</p>
<hr />
<h2 id="http-请求过程"><a class="markdownIt-Anchor" href="#http-请求过程"></a> HTTP 请求过程</h2>
<img title="" src="https://s2.loli.net/2022/08/09/h6f4vkV2ICe3uQF.webp" alt="" data-align="inline">
<p><strong>我们利用浏览器”检查“工具的网络来观察这个过程</strong></p>
<img title="" src="https://s2.loli.net/2022/08/09/Xhdi1tqQlake73R.png" alt="" data-align="inline">
<ul>
<li>
<p>General部分</p>
<ul>
<li>
<p>Request URL:请求的URL</p>
</li>
<li>
<p>Request Method:请求方法</p>
</li>
<li>
<p>Status Code: 响应状态码</p>
</li>
<li>
<p>Remote Address:远程服务器的地址和端口</p>
</li>
<li>
<p>Referrer Policy:Referrer判别策略</p>
</li>
</ul>
</li>
<li>
<p>Response Header:响应头</p>
</li>
<li>
<p>Request Header:请求头</p>
</li>
</ul>
<hr />
<h2 id="请求"><a class="markdownIt-Anchor" href="#请求"></a> 请求</h2>
<blockquote>
<p>请求由客户端发出，分为4部分</p>
<blockquote>
<ul>
<li>
<p>请求方法:Request Method</p>
</li>
<li>
<p>请求网址:Request URL</p>
</li>
<li>
<p>请求头:Request Headers</p>
</li>
<li>
<p>请求体:Request Body</p>
</li>
</ul>
</blockquote>
</blockquote>
<h3 id="请求方法"><a class="markdownIt-Anchor" href="#请求方法"></a> 请求方法</h3>
<p>常见的为：GET和POST</p>
<blockquote>
<p>GET 与POST区别</p>
<ul>
<li>
<p>GET的参数在URL里面，而POST请求的数据以表单传输，包含在请求体</p>
</li>
<li>
<p>GET的数据只有1024字节，而POST没有限制</p>
</li>
</ul>
</blockquote>
<p>其他请求方法</p>
<img title="" src="https://s2.loli.net/2022/08/09/UV5MSGA7DJrgdxs.png" alt="" data-align="inline">
<h3 id="请求的网址"><a class="markdownIt-Anchor" href="#请求的网址"></a> 请求的网址</h3>
<p>请求的网址即URL</p>
<h3 id="请求头"><a class="markdownIt-Anchor" href="#请求头"></a> 请求头</h3>
<ul>
<li>
<p>Accept:请求报头域，指定客户端接收哪些类型的信息</p>
</li>
<li>
<p>Accept-Language:指定客户端可接受语言类型</p>
</li>
<li>
<p>Host:指定请求资源的主机IP和端口</p>
</li>
<li>
<p>Cookie:储存在用户本地终端上的数据,特定的 web文档关联在一起, 保存了该客户机访问这个Web 文档时的信息, 当客户机再次访问这个 Web 文档时这些信息可供该文档使用。</p>
</li>
<li>
<p>Referer:标识请求是从那个页面发过来的</p>
</li>
<li>
<p>User-Agent:一个特殊字符串头，使得服务器能够识别客户使用的操作系统及版本、CPU 类型、浏览器及版本、浏览器渲染引擎、浏览器语言、浏览器插件等。</p>
</li>
<li>
<p>Content-Type:内容类型，一般是指网页中存在的Content-Type，用于定义网络文件的类型和网页的编码，决定文件接收方将以什么形式、什么编码读取这个文件</p>
</li>
</ul>
<h3 id="请求体"><a class="markdownIt-Anchor" href="#请求体"></a> 请求体</h3>
<p>请求体承载的是POST的表单数据，对于GET，请求为空</p>
<hr />
<h2 id="响应"><a class="markdownIt-Anchor" href="#响应"></a> 响应</h2>
<h3 id="响应状态码"><a class="markdownIt-Anchor" href="#响应状态码"></a> 响应状态码</h3>
<p>常见的 HTTP 状态码：</p>
<ul>
<li>200 - 请求成功</li>
<li>301 - 资源（网页等）被永久转移到其它URL</li>
<li>404 - 请求的资源（网页等）不存在</li>
<li>500 - 内部服务器错误</li>
</ul>
<p>其它可以参考<a href="https://www.runoob.com/http/http-status-codes.html">HTTP 状态码 | 菜鸟教程</a></p>
<h3 id="响应头"><a class="markdownIt-Anchor" href="#响应头"></a> 响应头</h3>
<p>响应头包含服务器对请求的应答信息，如Content-Type、Sever、Set-Cookie</p>
<h3 id="响应体"><a class="markdownIt-Anchor" href="#响应体"></a> 响应体</h3>
<p>响应体包含响应的正文数据</p>
<hr />
<h1 id="网页基础"><a class="markdownIt-Anchor" href="#网页基础"></a> 网页基础</h1>
<h2 id="网页组成"><a class="markdownIt-Anchor" href="#网页组成"></a> 网页组成</h2>
<p>网页是由HTML、CSS、JavaScript组成</p>
<p><em><strong>如果想学爬虫，必须要点Web基础</strong></em></p>
]]></content>
      <categories>
        <category>爬虫</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>爬虫</tag>
      </tags>
  </entry>
</search>
