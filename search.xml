<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>C++编程</title>
    <url>/2022/08/10/C-%E7%BC%96%E7%A8%8B/</url>
    <content><![CDATA[<h2 id="从c到c"><a class="markdownIt-Anchor" href="#从c到c"></a> 从C到C++</h2>
<p>C是面向过程的语言，对于小规模程序还是得心应手的，为了程序设计的更见简易，C++最为C语言的自增版，保留原来语法，增加面向对象机制。</p>
<h2 id=""><a class="markdownIt-Anchor" href="#"></a> </h2>
]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>OP编程</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2022/08/08/hello-world/</url>
    <content><![CDATA[<h2 id="在hexo上写文章"><a class="markdownIt-Anchor" href="#在hexo上写文章"></a> 在Hexo上写文章</h2>
<p>以前我是有写博客的用的是wordpress，wp可以说非常优秀，各种插件与主题，个性化也是非常的高，就是写博客就要有专门的时间写博客，而现在我发现hexo可以用markdown边写笔记，加个header就可以博客文章了，很方便！</p>
<h2 id="hello-world"><a class="markdownIt-Anchor" href="#hello-world"></a> Hello World</h2>
<p>就让一句&quot;Hello world&quot;来开始新的旅程！</p>
]]></content>
      <categories>
        <category>随想</category>
      </categories>
      <tags>
        <tag>随想</tag>
      </tags>
  </entry>
  <entry>
    <title>urllib库的使用</title>
    <url>/2022/08/09/urllib%E5%BA%93%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h2 id="开始"><a class="markdownIt-Anchor" href="#开始"></a> 开始</h2>
<p>urllib是Python内置的HTTP请求模块，其包含以下四个模块</p>
<ul>
<li>
<p>request:HTTP请求模块</p>
</li>
<li>
<p>error:异常处理模块</p>
</li>
<li>
<p>parse:工具模块，拆分、解析、合并</p>
</li>
<li>
<p>robotparser:识别网站robots.txt文件，判断哪些网站可以爬。</p>
</li>
</ul>
<h2 id="请求发送"><a class="markdownIt-Anchor" href="#请求发送"></a> 请求发送</h2>
<ol>
<li>
<h3 id="urlopen"><a class="markdownIt-Anchor" href="#urlopen"></a> urlopen()</h3>
</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line">response=urllib.request.urlopen(<span class="string">&#x27;https://www.baidu.com&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(response.read().decode(<span class="string">&#x27;utf-8&#x27;</span>))<span class="comment">#read可以返回网页内容， 网页编码为UTF-8需要用decode,不然会有转义字符</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(response)) <span class="comment">#类型</span></span><br><span class="line"><span class="built_in">print</span>(response.status) <span class="comment">#获取响应状态码</span></span><br><span class="line"><span class="built_in">print</span>(response.getheaders()) <span class="comment">#获取响应头rs())</span></span><br></pre></td></tr></table></figure>
<p><img src="https://s2.loli.net/2022/08/09/rbAdLaeVoSgvB8m.png" alt="运行结果" /></p>
<ul>
<li>
<p>data参数</p>
<p>data参数为可选，使用需要，使用bytes()转换为字节流编码格式</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="keyword">import</span>  urllib.parse</span><br><span class="line">data=<span class="built_in">bytes</span>(urllib.parse.urlencode(&#123;<span class="string">&#x27;B&#x27;</span>:<span class="string">&#x27;1&#x27;</span>&#125;),encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">response=urllib.request.urlopen(<span class="string">&#x27;http://httpbin.org/post&#x27;</span>,data=data)</span><br><span class="line"><span class="built_in">print</span>(response.read().decode(<span class="string">&#x27;utf8&#x27;</span>))</span><br></pre></td></tr></table></figure>
</li>
</ul>
<img src="https://s2.loli.net/2022/08/09/29Nm7Q6FEt3B4Kh.png" title="" alt="运行结果" data-align="right">
<p>我们的数据出现在了form字段里，这是我们用POST方法传递的数据</p>
<ul>
<li>
<p>timeout参数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    response=urllib.request.urlopen(<span class="string">&#x27;http://www.google.com&#x27;</span>,timeout=<span class="number">1</span>)</span><br><span class="line">    <span class="built_in">print</span>(response.read().decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line"><span class="keyword">except</span> urllib.error.URLError <span class="keyword">as</span> e:</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">isinstance</span>(e.reason,socket.timeout):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;TIME OUT&#x27;</span>)</span><br></pre></td></tr></table></figure>
</li>
</ul>
<ol start="2">
<li>
<h3 id="request"><a class="markdownIt-Anchor" href="#request"></a> Request()</h3>
<p>Request能实现更多参数的请求</p>
<blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, url, data=<span class="literal">None</span>, headers=&#123;&#125;,</span></span><br><span class="line"><span class="params">                 origin_req_host=<span class="literal">None</span>, unverifiable=<span class="literal">False</span>,</span></span><br><span class="line"><span class="params">                 method=<span class="literal">None</span></span>):</span><br></pre></td></tr></table></figure>
<ul>
<li>
<p>URL:请求URL</p>
</li>
<li>
<p>data:必须为bytes(),如果是字典可以用urllib.parse.urlencode()</p>
</li>
<li>
<p>headers:为一个字典</p>
</li>
<li>
<p>origin_req_host：表示这个请求是否是无法验证的</p>
</li>
<li>
<p>method:请求方法</p>
</li>
</ul>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request,parse</span><br><span class="line">url=<span class="string">&#x27;http://httpbin.org/post&#x27;</span></span><br><span class="line">headers=&#123;</span><br><span class="line">    <span class="string">&#x27;Host&#x27;</span>:<span class="string">&#x27;httpbin.org&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>:<span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/104.0.5112.81 Safari/537.36 Edg/104.0.1293.47&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">dict</span>=&#123;<span class="string">&#x27;b&#x27;</span>:<span class="number">1</span>&#125;</span><br><span class="line">data=<span class="built_in">bytes</span>(parse.urlencode(<span class="built_in">dict</span>),encoding=<span class="string">&#x27;utf8&#x27;</span>)</span><br><span class="line">data=<span class="built_in">bytes</span>(parse.urlencode(&#123;<span class="string">&#x27;B&#x27;</span>:<span class="string">&#x27;1&#x27;</span>&#125;),encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">req=request.Request(url,data=data,headers=headers,method=<span class="string">&#x27;POST&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">另一种请求头的添加方式</span></span><br><span class="line"><span class="string">req=request.Request(url=url,data=data,method=&#x27;POST&#x27;)</span></span><br><span class="line"><span class="string">req.add_header(&#x27;Host&#x27;,&#x27;httpbin.org&#x27;,)</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">response=request.urlopen(req)</span><br><span class="line"><span class="built_in">print</span>(response.read().deco</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="进阶用法"><a class="markdownIt-Anchor" href="#进阶用法"></a> 进阶用法</h2>
<h3 id="handler"><a class="markdownIt-Anchor" href="#handler"></a> Handler</h3>
<p>现在我们介绍Handler</p>
<p>比如：</p>
<blockquote>
<p>HTTPDefaultErrorHandler:用于处理</p>
</blockquote>
]]></content>
      <categories>
        <category>爬虫</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>爬虫基础</title>
    <url>/2022/08/09/%E7%88%AC%E8%99%AB%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h1 id="http基本原理"><a class="markdownIt-Anchor" href="#http基本原理"></a> HTTP基本原理</h1>
<blockquote>
<p>参考资料：</p>
<ul>
<li><a href="https://www.runoob.com/http/http-tutorial.html">HTTP 教程 | 菜鸟教程 (runoob.com)</a></li>
</ul>
</blockquote>
<hr />
<h2 id="uri和url"><a class="markdownIt-Anchor" href="#uri和url"></a> URI和URL</h2>
<p>URI:统一资源标识符</p>
<p>URL:统一资源定位符</p>
<p>URN:统一资源名称</p>
<blockquote>
<p>现在互联网，URN用得很少，一般网页链接🔗称为URL</p>
</blockquote>
<hr />
<h2 id="超文本"><a class="markdownIt-Anchor" href="#超文本"></a> 超文本</h2>
<p>网页源代码HTML称为超文本</p>
<hr />
<h2 id="http和https"><a class="markdownIt-Anchor" href="#http和https"></a> HTTP和HTTPS</h2>
<p>HTTP:超文本传输协议</p>
<p>HTTPS:HTTP下加入SSL层</p>
<hr />
<h2 id="http-请求过程"><a class="markdownIt-Anchor" href="#http-请求过程"></a> HTTP 请求过程</h2>
<img title="" src="https://s2.loli.net/2022/08/09/h6f4vkV2ICe3uQF.webp" alt="" data-align="inline">
<p><strong>我们利用浏览器”检查“工具的网络来观察这个过程</strong></p>
<img title="" src="https://s2.loli.net/2022/08/09/Xhdi1tqQlake73R.png" alt="" data-align="inline">
<ul>
<li>
<p>General部分</p>
<ul>
<li>
<p>Request URL:请求的URL</p>
</li>
<li>
<p>Request Method:请求方法</p>
</li>
<li>
<p>Status Code: 响应状态码</p>
</li>
<li>
<p>Remote Address:远程服务器的地址和端口</p>
</li>
<li>
<p>Referrer Policy:Referrer判别策略</p>
</li>
</ul>
</li>
<li>
<p>Response Header:响应头</p>
</li>
<li>
<p>Request Header:请求头</p>
</li>
</ul>
<hr />
<h2 id="请求"><a class="markdownIt-Anchor" href="#请求"></a> 请求</h2>
<blockquote>
<p>请求由客户端发出，分为4部分</p>
<blockquote>
<ul>
<li>
<p>请求方法:Request Method</p>
</li>
<li>
<p>请求网址:Request URL</p>
</li>
<li>
<p>请求头:Request Headers</p>
</li>
<li>
<p>请求体:Request Body</p>
</li>
</ul>
</blockquote>
</blockquote>
<h3 id="请求方法"><a class="markdownIt-Anchor" href="#请求方法"></a> 请求方法</h3>
<p>常见的为：GET和POST</p>
<blockquote>
<p>GET 与POST区别</p>
<ul>
<li>
<p>GET的参数在URL里面，而POST请求的数据以表单传输，包含在请求体</p>
</li>
<li>
<p>GET的数据只有1024字节，而POST没有限制</p>
</li>
</ul>
</blockquote>
<p>其他请求方法</p>
<img title="" src="https://s2.loli.net/2022/08/09/UV5MSGA7DJrgdxs.png" alt="" data-align="inline">
<h3 id="请求的网址"><a class="markdownIt-Anchor" href="#请求的网址"></a> 请求的网址</h3>
<p>请求的网址即URL</p>
<h3 id="请求头"><a class="markdownIt-Anchor" href="#请求头"></a> 请求头</h3>
<ul>
<li>
<p>Accept:请求报头域，指定客户端接收哪些类型的信息</p>
</li>
<li>
<p>Accept-Language:指定客户端可接受语言类型</p>
</li>
<li>
<p>Host:指定请求资源的主机IP和端口</p>
</li>
<li>
<p>Cookie:储存在用户本地终端上的数据,特定的 web文档关联在一起, 保存了该客户机访问这个Web 文档时的信息, 当客户机再次访问这个 Web 文档时这些信息可供该文档使用。</p>
</li>
<li>
<p>Referer:标识请求是从那个页面发过来的</p>
</li>
<li>
<p>User-Agent:一个特殊字符串头，使得服务器能够识别客户使用的操作系统及版本、CPU 类型、浏览器及版本、浏览器渲染引擎、浏览器语言、浏览器插件等。</p>
</li>
<li>
<p>Content-Type:内容类型，一般是指网页中存在的Content-Type，用于定义网络文件的类型和网页的编码，决定文件接收方将以什么形式、什么编码读取这个文件</p>
</li>
</ul>
<h3 id="请求体"><a class="markdownIt-Anchor" href="#请求体"></a> 请求体</h3>
<p>请求体承载的是POST的表单数据，对于GET，请求为空</p>
<hr />
<h2 id="响应"><a class="markdownIt-Anchor" href="#响应"></a> 响应</h2>
<h3 id="响应状态码"><a class="markdownIt-Anchor" href="#响应状态码"></a> 响应状态码</h3>
<p>常见的 HTTP 状态码：</p>
<ul>
<li>200 - 请求成功</li>
<li>301 - 资源（网页等）被永久转移到其它URL</li>
<li>404 - 请求的资源（网页等）不存在</li>
<li>500 - 内部服务器错误</li>
</ul>
<p>其它可以参考<a href="https://www.runoob.com/http/http-status-codes.html">HTTP 状态码 | 菜鸟教程</a></p>
<h3 id="响应头"><a class="markdownIt-Anchor" href="#响应头"></a> 响应头</h3>
<p>响应头包含服务器对请求的应答信息，如Content-Type、Sever、Set-Cookie</p>
<h3 id="响应体"><a class="markdownIt-Anchor" href="#响应体"></a> 响应体</h3>
<p>响应体包含响应的正文数据</p>
<hr />
<h1 id="网页基础"><a class="markdownIt-Anchor" href="#网页基础"></a> 网页基础</h1>
<h2 id="网页组成"><a class="markdownIt-Anchor" href="#网页组成"></a> 网页组成</h2>
<p>网页是由HTML、CSS、JavaScript组成</p>
<p><em><strong>如果想学爬虫，必须要点Web基础</strong></em></p>
]]></content>
      <categories>
        <category>爬虫</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>爬虫</tag>
      </tags>
  </entry>
</search>
