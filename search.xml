<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>C++的STL</title>
    <url>/2022/08/10/C-%E7%9A%84STL/</url>
    <content><![CDATA[<h2 id="开始">开始</h2>
<blockquote>
<p>STL的代码从广义上讲分为三类：algorithm（算法）、container（容器）和iterator（迭代器），几乎所有的代码都采用了模板类和模板函数的方式，这相比于传统的由函数和类组成的库来说。</p>
</blockquote>
<p>用STL我们就不用反复实现一些代码，提高开发效率。当然这个需要<mark>数据结构基础</mark></p>
<hr>
<h2 id="vector动态数组">vector动态数组</h2>
<h3 id="头文件">头文件</h3>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br></pre></td></tr></table></figure>
<h3 id="初始化">初始化</h3>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">vector&lt;<span class="type">int</span>&gt; ans;<span class="comment">//int的型的数组</span></span><br><span class="line">vector&lt;structure&gt; ans;<span class="comment">//一个structure结构体的数组</span></span><br><span class="line"><span class="comment">//指定长度的初始化</span></span><br><span class="line"><span class="function">vector&lt;<span class="type">short</span>&gt; <span class="title">ans</span><span class="params">(n)</span></span>;</span><br><span class="line"><span class="function">vector&lt;<span class="type">double</span>&gt; <span class="title">ans</span><span class="params">(n,<span class="number">2</span>)</span></span>;<span class="comment">//长度为n,全为2的数组</span></span><br><span class="line"><span class="function">vector&lt;<span class="type">double</span>&gt; <span class="title">shaow</span><span class="params">(ans)</span></span>;<span class="comment">//拷贝初始化，类型长度需相同</span></span><br><span class="line">vector&lt;<span class="type">int</span>&gt; a&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//二维</span></span><br><span class="line">vector&lt;<span class="type">int</span>&gt;ans[<span class="number">5</span>];<span class="comment">//行为固定的5，列为动态可变</span></span><br><span class="line">vector&lt;vectot&lt;<span class="type">int</span>&gt; &gt;num;<span class="comment">//行列均可以变</span></span><br><span class="line">vector&lt;vector&lt;<span class="type">int</span>&gt; &gt; <span class="built_in">a</span>(n + <span class="number">1</span>, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(m + <span class="number">1</span>, <span class="number">0</span>));<span class="comment">//固定n+1行m+1列初始值为0的二维数组</span></span><br></pre></td></tr></table></figure>
<h3 id="访问遍历">访问遍历</h3>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;vector&quot;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n = <span class="number">5</span>;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">num</span><span class="params">(<span class="number">5</span>, <span class="number">1</span>)</span></span>;</span><br><span class="line">    cout&lt;&lt;num[<span class="number">2</span>];<span class="comment">//访问下标为2的元素</span></span><br><span class="line"><span class="comment">//智能指针遍历</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> i: num)</span><br><span class="line">        cout &lt;&lt; i &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line"><span class="comment">//遍历</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;num.<span class="built_in">size</span>();i++)</span><br><span class="line">        cout&lt;&lt;num[i]&lt;&lt;<span class="string">&#x27; &#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="方法函数">方法函数</h3>
<table>
<thead>
<tr>
<th style="text-align:center"><strong>函数</strong></th>
<th style="text-align:center">含义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">a.empty()</td>
<td style="text-align:center">判断是否为空，空为真</td>
</tr>
<tr>
<td style="text-align:center">a.begin()</td>
<td style="text-align:center">返回首元素的迭代器</td>
</tr>
<tr>
<td style="text-align:center">a.end()</td>
<td style="text-align:center">返回末位元素的迭代器</td>
</tr>
<tr>
<td style="text-align:center">a.size()</td>
<td style="text-align:center">返回数据个数</td>
</tr>
<tr>
<td style="text-align:center">a.insert(it,x)</td>
<td style="text-align:center">先任意迭代器插入一个元素</td>
</tr>
<tr>
<td style="text-align:center">a.push_back()</td>
<td style="text-align:center">尾部添加一个</td>
</tr>
<tr>
<td style="text-align:center">a.pop_back()</td>
<td style="text-align:center">删除最后一个元素</td>
</tr>
<tr>
<td style="text-align:center">a.front()</td>
<td style="text-align:center">返回第一个数据</td>
</tr>
<tr>
<td style="text-align:center">a.clear()</td>
<td style="text-align:center">清除元素</td>
</tr>
<tr>
<td style="text-align:center">a.resize(n,v)</td>
<td style="text-align:center">改变数组大小为n,赋值为v</td>
</tr>
<tr>
<td style="text-align:center">a.erase(f,l)</td>
<td style="text-align:center">删除[f,i)的所有元素</td>
</tr>
<tr>
<td style="text-align:center">sort(a.begin(),a.end())</td>
<td style="text-align:center">排序</td>
</tr>
</tbody>
</table>
<h3 id="代码">代码</h3>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;vector&quot;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n = <span class="number">5</span>;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">num</span><span class="params">(<span class="number">5</span>, <span class="number">1</span>)</span></span>;</span><br><span class="line">    <span class="keyword">for</span>(vector&lt;<span class="type">int</span>&gt;::iterator it=num.<span class="built_in">begin</span>();it!=num.<span class="built_in">end</span>();it++)</span><br><span class="line">        cout&lt;&lt;*it&lt;&lt;<span class="string">&#x27; &#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="stack栈">stack栈</h2>
<h3 id="头文件-2">头文件</h3>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br></pre></td></tr></table></figure>
<h3 id="初始化-2">初始化</h3>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">stack&lt;<span class="type">int</span>&gt;ans;</span><br></pre></td></tr></table></figure>
<h3 id="方法函数-2">方法函数</h3>
<table>
<thead>
<tr>
<th style="text-align:center">函数</th>
<th style="text-align:center">含义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">push()</td>
<td style="text-align:center">压栈</td>
</tr>
<tr>
<td style="text-align:center">pop()</td>
<td style="text-align:center">出栈</td>
</tr>
<tr>
<td style="text-align:center">empty()</td>
<td style="text-align:center">空为真</td>
</tr>
<tr>
<td style="text-align:center">top()</td>
<td style="text-align:center">取得栈顶元素</td>
</tr>
<tr>
<td style="text-align:center">size()</td>
<td style="text-align:center">元素个数</td>
</tr>
</tbody>
</table>
<h3 id="代码-2">代码</h3>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    stack&lt;<span class="type">int</span>&gt;a;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="keyword">while</span>(!a.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        i=a.<span class="built_in">top</span>();</span><br><span class="line">        cout&lt;&lt;i&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">        a.<span class="built_in">pop</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="queue队列">queue队列</h2>
<h3 id="头文件-3">头文件</h3>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br></pre></td></tr></table></figure>
<h3 id="初始化-3">初始化</h3>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">queue&lt;<span class="type">int</span>&gt;ans;</span><br></pre></td></tr></table></figure>
<h3 id="方法函数-3">方法函数</h3>
<table>
<thead>
<tr>
<th style="text-align:center">函数</th>
<th style="text-align:center">含义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">front()</td>
<td style="text-align:center">返回队首</td>
</tr>
<tr>
<td style="text-align:center">back()</td>
<td style="text-align:center">返回队尾元素</td>
</tr>
<tr>
<td style="text-align:center">pop()</td>
<td style="text-align:center">出队</td>
</tr>
<tr>
<td style="text-align:center">push()</td>
<td style="text-align:center">进队</td>
</tr>
<tr>
<td style="text-align:center">size()</td>
<td style="text-align:center">元素个数</td>
</tr>
<tr>
<td style="text-align:center">empty()</td>
<td style="text-align:center">空队为空</td>
</tr>
</tbody>
</table>
<h3 id="代码-3">代码</h3>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    queue&lt;<span class="type">int</span>&gt;a;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line">        a.<span class="built_in">push</span>(i);</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="keyword">while</span>(!a.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        i=a.<span class="built_in">front</span>();</span><br><span class="line">        cout&lt;&lt;i&lt;&lt;<span class="string">&#x27; &#x27;</span>;</span><br><span class="line">        a.<span class="built_in">pop</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="deque双队列">deque双队列</h2>
<h3 id="头文件-4">头文件</h3>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;deque&gt;</span></span></span><br></pre></td></tr></table></figure>
<h3 id="初始化-4">初始化</h3>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">deque&lt;<span class="type">int</span>&gt;ans;</span><br></pre></td></tr></table></figure>
<h3 id="方法函数-4">方法函数</h3>
<table>
<thead>
<tr>
<th style="text-align:center">函数</th>
<th style="text-align:center">含义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">push_back()<br/>push_front()</td>
<td style="text-align:center">入队</td>
</tr>
<tr>
<td style="text-align:center">back()<br/>front()</td>
<td style="text-align:center">访问</td>
</tr>
<tr>
<td style="text-align:center">pop_back()<br/>pop_back()</td>
<td style="text-align:center">出队</td>
</tr>
<tr>
<td style="text-align:center">erase(iterator f,iterator l)</td>
<td style="text-align:center">删除</td>
</tr>
<tr>
<td style="text-align:center">empty()</td>
<td style="text-align:center">空为真</td>
</tr>
<tr>
<td style="text-align:center">size()</td>
<td style="text-align:center">元素数量</td>
</tr>
<tr>
<td style="text-align:center">clear()</td>
<td style="text-align:center">清空</td>
</tr>
<tr>
<td style="text-align:center">sort(iterator f,iterator l)</td>
<td style="text-align:center">排序</td>
</tr>
</tbody>
</table>
<h3 id="代码-4">代码</h3>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;algorithm&quot;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">deque&lt;<span class="type">int</span>&gt;a;</span><br><span class="line"><span class="type">int</span> b[<span class="number">5</span>]=&#123;<span class="number">3</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">6</span>,<span class="number">2</span>&#125;;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++)</span><br><span class="line">    a.<span class="built_in">push_front</span>(b[i]);</span><br><span class="line"><span class="built_in">sort</span>(a.<span class="built_in">begin</span>(),a.<span class="built_in">end</span>());</span><br><span class="line"><span class="type">int</span> i;</span><br><span class="line"><span class="keyword">while</span>(!a.<span class="built_in">empty</span>())</span><br><span class="line">&#123;</span><br><span class="line">    i=a.<span class="built_in">back</span>();</span><br><span class="line">    cout&lt;&lt;i&lt;&lt;<span class="string">&#x27; &#x27;</span>;</span><br><span class="line">    a.<span class="built_in">pop_back</span>();</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="priority-queue优先队列">priority_queue优先队列</h2>
<h3 id="头文件-5">头文件</h3>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br></pre></td></tr></table></figure>
<h3 id="头文件-6">头文件</h3>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line">priority_queue&lt;Type, Container, Functional&gt;</span><br></pre></td></tr></table></figure>
<h3 id="方法函数-5">方法函数</h3>
<table>
<thead>
<tr>
<th style="text-align:center">函数</th>
<th style="text-align:center">含义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">top()</td>
<td style="text-align:center">队首元素</td>
</tr>
<tr>
<td style="text-align:center">push()</td>
<td style="text-align:center">入队</td>
</tr>
<tr>
<td style="text-align:center">pop()</td>
<td style="text-align:center">出队</td>
</tr>
<tr>
<td style="text-align:center">empty()</td>
<td style="text-align:center">空为真</td>
</tr>
<tr>
<td style="text-align:center">size()</td>
<td style="text-align:center">元素个数</td>
</tr>
</tbody>
</table>
<h3 id="代码-5">代码</h3>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    priority_queue&lt;<span class="type">int</span>&gt; a;</span><br><span class="line">    priority_queue&lt;<span class="type">int</span>, vector&lt;<span class="type">int</span>&gt;, greater&lt;<span class="type">int</span>&gt; &gt; c;  <span class="comment">//这样就是小顶堆</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        a.<span class="built_in">push</span>(i);</span><br><span class="line">        c.<span class="built_in">push</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (!a.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; a.<span class="built_in">top</span>() &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">        a.<span class="built_in">pop</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">while</span> (!c.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; c.<span class="built_in">top</span>() &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">        c.<span class="built_in">pop</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="map映射">map映射</h2>
<h3 id="头文件-7">头文件</h3>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br></pre></td></tr></table></figure>
<h3 id="初始化-5">初始化</h3>
<pre><code>map&lt;string,int&gt;a;
</code></pre>
<h3 id="函数方法">函数方法</h3>
<table>
<thead>
<tr>
<th style="text-align:center">函数</th>
<th style="text-align:center">含义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">find(key)</td>
<td style="text-align:center">返回键为key的映射的迭代器<br/><em>当数据存在时，返回数据所在位置的迭代器，数据不存在时，返回mp.end()</em></td>
</tr>
<tr>
<td style="text-align:center">erase(it)</td>
<td style="text-align:center">删除迭代器对应的键和值</td>
</tr>
<tr>
<td style="text-align:center">erase(key)</td>
<td style="text-align:center">根据映射的键删除键和值</td>
</tr>
<tr>
<td style="text-align:center">erase(first,last)</td>
<td style="text-align:center">删除左闭右开区间迭代器对应的键和值</td>
</tr>
<tr>
<td style="text-align:center">size()</td>
<td style="text-align:center">返回对数</td>
</tr>
<tr>
<td style="text-align:center">clear()</td>
<td style="text-align:center">清空所有元素</td>
</tr>
<tr>
<td style="text-align:center">insert()</td>
<td style="text-align:center">插入元素</td>
</tr>
<tr>
<td style="text-align:center">empty()</td>
<td style="text-align:center">是否为空</td>
</tr>
<tr>
<td style="text-align:center">begin()</td>
<td style="text-align:center">第一个元素的迭代器</td>
</tr>
<tr>
<td style="text-align:center">end()</td>
<td style="text-align:center">返回尾部的迭代器（最后一个元素的下一个地址）</td>
</tr>
<tr>
<td style="text-align:center">rbegin()</td>
<td style="text-align:center">返回最后一个元素的迭代器（地址）</td>
</tr>
<tr>
<td style="text-align:center">rend()</td>
<td style="text-align:center">返回第一个元素的迭代器</td>
</tr>
<tr>
<td style="text-align:center">rend()</td>
<td style="text-align:center">返回第一个元素的迭代器</td>
</tr>
<tr>
<td style="text-align:center">count(key)</td>
<td style="text-align:center">查看元素是否存在</td>
</tr>
<tr>
<td style="text-align:center">lower_bound()</td>
<td style="text-align:center">返回指向键值&gt;= key的第一个元素</td>
</tr>
<tr>
<td style="text-align:center">upper_bound()</td>
<td style="text-align:center">返回指向键值&gt; key的第一个元素的迭代器，</td>
</tr>
</tbody>
</table>
<h3 id="代码-6">代码</h3>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">map&lt;<span class="type">int</span>,string&gt;a;</span><br><span class="line">a[<span class="number">1</span>]=<span class="string">&quot;hello&quot;</span>;</span><br><span class="line">a[<span class="number">2</span>]=<span class="string">&quot;hi&quot;</span>;</span><br><span class="line">cout&lt;&lt;a[<span class="number">1</span>];</span><br><span class="line">cout&lt;&lt;endl;</span><br><span class="line">    map&lt;<span class="type">int</span>,string&gt;::iterator it;</span><br><span class="line">    <span class="keyword">for</span>(it=a.<span class="built_in">begin</span>();it!=a.<span class="built_in">end</span>();it++)</span><br><span class="line">        cout&lt;&lt;it-&gt;first&lt;&lt;<span class="string">&#x27;:&#x27;</span>&lt;&lt;it-&gt;second&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> i:a)</span><br><span class="line">        cout&lt;&lt;i.first&lt;&lt;<span class="string">&quot;:&quot;</span>&lt;&lt;i.second&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="set集合">set集合</h2>
<p>集合不重合且有序</p>
<h3 id="头文件-8">头文件</h3>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br></pre></td></tr></table></figure>
<h3 id="方法函数-6">方法函数</h3>
<table>
<thead>
<tr>
<th style="text-align:center">函数</th>
<th style="text-align:center">含义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">begin()</td>
<td style="text-align:center">返回第一个元素的迭代器</td>
</tr>
<tr>
<td style="text-align:center">end()</td>
<td style="text-align:center">返回最后一个元素的迭代器</td>
</tr>
<tr>
<td style="text-align:center">rbegin()</td>
<td style="text-align:center">返回逆序迭代器</td>
</tr>
<tr>
<td style="text-align:center">rend()</td>
<td style="text-align:center">返回逆序迭代器</td>
</tr>
<tr>
<td style="text-align:center">clear()</td>
<td style="text-align:center">删除set容器中的所有的元素</td>
</tr>
<tr>
<td style="text-align:center">empty()</td>
<td style="text-align:center">判断是否为空</td>
</tr>
<tr>
<td style="text-align:center">insert()</td>
<td style="text-align:center">插入一个元素</td>
</tr>
<tr>
<td style="text-align:center">size()</td>
<td style="text-align:center">容器中的元素个数</td>
</tr>
<tr>
<td style="text-align:center">erase(iterator)<br/>erase(first,second）</td>
<td style="text-align:center">删除指向的值</td>
</tr>
<tr>
<td style="text-align:center">erase(key_value)</td>
<td style="text-align:center">删除键值key_value的值</td>
</tr>
<tr>
<td style="text-align:center">find(元素)</td>
<td style="text-align:center">查找set中的某一元素，返回迭代器</td>
</tr>
<tr>
<td style="text-align:center">lower_bound(k)</td>
<td style="text-align:center">返回大于等于k的第一个元素的迭代器</td>
</tr>
<tr>
<td style="text-align:center">upper_bound(k)</td>
<td style="text-align:center">返回大于k的第一个元素的迭代器</td>
</tr>
</tbody>
</table>
<h3 id="代码-7">代码</h3>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    set&lt;<span class="type">int</span>&gt;a;</span><br><span class="line">    a.<span class="built_in">insert</span>(<span class="number">8</span>);</span><br><span class="line">    a.<span class="built_in">insert</span>(<span class="number">3</span>);</span><br><span class="line">    a.<span class="built_in">insert</span>(<span class="number">9</span>);</span><br><span class="line">    a.<span class="built_in">insert</span>(<span class="number">7</span>);</span><br><span class="line">    a.<span class="built_in">insert</span>(<span class="number">6</span>);</span><br><span class="line">    a.<span class="built_in">insert</span>(<span class="number">5</span>);</span><br><span class="line">    <span class="keyword">for</span>(set&lt;<span class="type">int</span>&gt;::iterator it=a.<span class="built_in">begin</span>();it!=a.<span class="built_in">end</span>();it++)</span><br><span class="line">        cout&lt;&lt;*it&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//结果为3 5 6 7 8 9</span></span><br></pre></td></tr></table></figure>
<hr>
<h2 id="pair对组">pair对组</h2>
<p>pair只含有两个元素，可以看作是只有两个元素的结构体.</p>
<h3 id="头文件-9">头文件</h3>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;utility&gt;</span></span></span><br></pre></td></tr></table></figure>
<hr>
<h2 id="字符串">字符串</h2>
<h3 id="头文件-10">头文件</h3>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br></pre></td></tr></table></figure>
<h3 id="初始化-6">初始化</h3>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">string str1; <span class="comment">//生成空字符串</span></span><br><span class="line"><span class="function">string <span class="title">str2</span><span class="params">(<span class="string">&quot;123456789&quot;</span>)</span></span>; <span class="comment">//生成&quot;1234456789&quot;的复制品 </span></span><br><span class="line"><span class="function">string <span class="title">str3</span><span class="params">(<span class="string">&quot;12345&quot;</span>, <span class="number">0</span>, <span class="number">3</span>)</span></span>;<span class="comment">//结果为&quot;123&quot; ，从0位置开始，长度为3</span></span><br><span class="line"><span class="function">string <span class="title">str4</span><span class="params">(<span class="string">&quot;123456&quot;</span>, <span class="number">5</span>)</span></span>; <span class="comment">//结果为&quot;12345&quot; ，长度为5</span></span><br><span class="line"><span class="function">string <span class="title">str5</span><span class="params">(<span class="number">5</span>, <span class="string">&#x27;2&#x27;</span>)</span></span>; <span class="comment">//结果为&quot;22222&quot; ,构造5个字符&#x27;2&#x27;连接而成的字符串</span></span><br><span class="line"><span class="function">string <span class="title">str6</span><span class="params">(str2, <span class="number">2</span>)</span></span>; <span class="comment">//结果为&quot;3456789&quot;，截取第三个元素（2对应第三位）到最后</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="函数方法-2">函数方法</h3>
<table>
<thead>
<tr>
<th style="text-align:center">函数</th>
<th style="text-align:center">含义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">sort(s.begin(),s.end());</td>
<td style="text-align:center">排序</td>
</tr>
<tr>
<td style="text-align:center">size()<br/>length()</td>
<td style="text-align:center">长度</td>
</tr>
<tr>
<td style="text-align:center">max_size()</td>
<td style="text-align:center">返回string对象最多包含的字符数</td>
</tr>
<tr>
<td style="text-align:center">capacity()</td>
<td style="text-align:center">重新分配内存之前，string对象能包含的最大字符数</td>
</tr>
<tr>
<td style="text-align:center">push_back()</td>
<td style="text-align:center">末尾插入</td>
</tr>
<tr>
<td style="text-align:center">insert(pos,element)</td>
<td style="text-align:center">插入</td>
</tr>
<tr>
<td style="text-align:center">append(str)</td>
<td style="text-align:center">末尾添加字符串</td>
</tr>
<tr>
<td style="text-align:center">erase(it)erase(iterator p)</td>
<td style="text-align:center">删除指定字符</td>
</tr>
<tr>
<td style="text-align:center">erase(iterator first, iterator last)</td>
<td style="text-align:center">删除字符串中迭代器区间所有字符</td>
</tr>
<tr>
<td style="text-align:center">clear()</td>
<td style="text-align:center">清空</td>
</tr>
<tr>
<td style="text-align:center">replace(pos,n,str)</td>
<td style="text-align:center">把当前字符串从索引pos开始的n个字符替换为str</td>
</tr>
<tr>
<td style="text-align:center">replace(pos,n,x,c)</td>
<td style="text-align:center">把当前字符串从索引pos开始的n个字符替换为x个字符c</td>
</tr>
<tr>
<td style="text-align:center">replace(it1,it2,str)</td>
<td style="text-align:center">把当前字符串[it1,it2)区间替换为str</td>
</tr>
<tr>
<td style="text-align:center">tolower()</td>
<td style="text-align:center">转换为小写</td>
</tr>
<tr>
<td style="text-align:center">toupper()</td>
<td style="text-align:center">转换为大写</td>
</tr>
<tr>
<td style="text-align:center">substr(pos,n)</td>
<td style="text-align:center">截取从pos索引开始的n个字符</td>
</tr>
<tr>
<td style="text-align:center">find (str, pos)<br/><br/>find (c, pos)</td>
<td style="text-align:center">在当前字符串的pos索引位置(默认为0)开始，查找子串str，返回找到的位置索引，-1表示查找不到子串</td>
</tr>
<tr>
<td style="text-align:center">rfind (str, pos)</td>
<td style="text-align:center">在当前字符串的pos索引位置开始，反向查找子串s，返回找到的位置索引</td>
</tr>
<tr>
<td style="text-align:center">find_first_of (str, pos)</td>
<td style="text-align:center">在当前字符串的pos索引位置(默认为0)开始，查找子串s的字符</td>
</tr>
<tr>
<td style="text-align:center">.find_first_not_of (str,pos)</td>
<td style="text-align:center">在当前字符串的pos索引位置(默认为0)开始，查找第一个不位于子串s的字符</td>
</tr>
<tr>
<td style="text-align:center">find_last_of(str, pos)</td>
<td style="text-align:center">当前字符串的pos索引位置开始，查找最后一个位于子串s的字符</td>
</tr>
<tr>
<td style="text-align:center">find_last_not_of ( str, pos)</td>
<td style="text-align:center">在当前字符串的pos索引位置开始，查找最后一个不位于子串s的字符</td>
</tr>
</tbody>
</table>
<hr>
<h2 id="bitsei位组">bitsei位组</h2>
<h3 id="头文件-11">头文件</h3>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bitset&gt;</span></span></span><br></pre></td></tr></table></figure>
<h3 id="初始化-7">初始化</h3>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">bitset &lt; n &gt;a; <span class="comment">//a有n位，每位都为0</span></span><br><span class="line">bitset &lt; n &gt;<span class="built_in">a</span>(b);</span><br><span class="line">bitset &lt; n &gt;<span class="built_in">a</span>(s,pos,n);<span class="comment">//a是s中从位置pos开始的n个位的副本</span></span><br><span class="line">bitset &lt; n &gt;<span class="built_in">a</span>(s);</span><br></pre></td></tr></table></figure>
<h3 id="函数方法-3">函数方法</h3>
<table>
<thead>
<tr>
<th style="text-align:center">函数</th>
<th style="text-align:center">含义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">any()</td>
<td style="text-align:center">是否存在置为1的二进制位，有返回true</td>
</tr>
<tr>
<td style="text-align:center">none()</td>
<td style="text-align:center">b中是否没有1</td>
</tr>
<tr>
<td style="text-align:center">count()</td>
<td style="text-align:center">1的个数</td>
</tr>
<tr>
<td style="text-align:center">size()</td>
<td style="text-align:center">二进制位的个数</td>
</tr>
<tr>
<td style="text-align:center">test(pos)</td>
<td style="text-align:center">在pos位置是否为1，是返回true</td>
</tr>
<tr>
<td style="text-align:center">b.set()</td>
<td style="text-align:center">所有位都置为1</td>
</tr>
<tr>
<td style="text-align:center">reset()</td>
<td style="text-align:center">所有位都置为0</td>
</tr>
<tr>
<td style="text-align:center">reset(pos)</td>
<td style="text-align:center">pos位置置为0</td>
</tr>
<tr>
<td style="text-align:center">flip()</td>
<td style="text-align:center">所有二进制位取反</td>
</tr>
<tr>
<td style="text-align:center">flip(pos)</td>
<td style="text-align:center">pos位置取反</td>
</tr>
<tr>
<td style="text-align:center">to_ulong()</td>
<td style="text-align:center">同样的二进制位返回一个unsigned long值</td>
</tr>
</tbody>
</table>
<blockquote>
<p>bitset也支持位运算</p>
</blockquote>
<hr>
<h2 id="array数组">array数组</h2>
<h3 id="头文件-12">头文件</h3>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;array&gt;</span></span></span><br></pre></td></tr></table></figure>
<h3 id="初始化-8">初始化</h3>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">array&lt;<span class="type">int</span>, 100&gt; a;<span class="comment">//声明一个大小为100的int型数组</span></span><br><span class="line">array&lt;<span class="type">int</span>, 100&gt; a&#123;&#125;;<span class="comment">//声明一个大小为100的int型数组，初始值均为0</span></span><br><span class="line">array&lt;<span class="type">int</span>, 100&gt; a&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;<span class="comment">//始化部分值，其余全部为0</span></span><br><span class="line">array&lt;<span class="type">int</span>, 100&gt; a = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="访问遍历-2">访问遍历</h3>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">array&lt;<span class="type">int</span>, 4&gt; a = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) </span><br><span class="line">    cout &lt;&lt; a[i] &lt;&lt; <span class="string">&quot; \n&quot;</span>[i == <span class="number">3</span>];</span><br><span class="line"><span class="comment">//迭代器</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> i : a)</span><br><span class="line">    cout &lt;&lt; i &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line"><span class="comment">//at访问</span></span><br><span class="line">array&lt;<span class="type">int</span>, 4&gt; a = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;;</span><br><span class="line"><span class="type">int</span> res = a.<span class="built_in">at</span>(<span class="number">1</span>) + a.<span class="built_in">at</span>(<span class="number">2</span>);</span><br><span class="line">cout &lt;&lt; res &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">get</span>&lt;<span class="number">1</span>&gt;(a) = x;<span class="comment">//将a数组下标为1位置处的值改为x</span></span><br></pre></td></tr></table></figure>
<h3 id="方法函数-7">方法函数</h3>
<table>
<thead>
<tr>
<th style="text-align:center">函数</th>
<th style="text-align:center">含义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">begin()</td>
<td style="text-align:center">第一个元素的访问迭代器</td>
</tr>
<tr>
<td style="text-align:center">end()</td>
<td style="text-align:center">返回容器最后一个元素之后一个位置的访问迭代器</td>
</tr>
<tr>
<td style="text-align:center">rbegin()</td>
<td style="text-align:center">返回最后一个元素的访问迭代器</td>
</tr>
<tr>
<td style="text-align:center">rend()</td>
<td style="text-align:center">返回第一个元素之前一个位置的访问迭代器</td>
</tr>
<tr>
<td style="text-align:center">size()</td>
<td style="text-align:center">返回容器中元素的数量</td>
</tr>
<tr>
<td style="text-align:center">max_size()</td>
<td style="text-align:center">返回容器可容纳元素的最大数量</td>
</tr>
<tr>
<td style="text-align:center">empty()</td>
<td style="text-align:center">判断容器是否为空</td>
</tr>
<tr>
<td style="text-align:center">at(n)</td>
<td style="text-align:center">返回容器中 n 位置处元素的引用</td>
</tr>
<tr>
<td style="text-align:center">front()</td>
<td style="text-align:center">返回容器中第一个元素的直接引用</td>
</tr>
<tr>
<td style="text-align:center">back()</td>
<td style="text-align:center">返回容器中最后一个元素的直接引用</td>
</tr>
<tr>
<td style="text-align:center">data()</td>
<td style="text-align:center">返回一个指向容器首个元素的指针</td>
</tr>
<tr>
<td style="text-align:center">fill(x)</td>
<td style="text-align:center">将 x 这个值赋值给容器中的每个元素,相当于初始化</td>
</tr>
<tr>
<td style="text-align:center">array1.swap(array2)</td>
<td style="text-align:center">交换 array1 和 array2 容器中的所有元素，但前提是它们具有相同的长度和类型</td>
</tr>
<tr>
<td style="text-align:center">sort()</td>
<td style="text-align:center">排序</td>
</tr>
</tbody>
</table>
<hr>
<h2 id="tuple元组">tuple元组</h2>
<h3 id="头文件-13">头文件</h3>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;tuple&gt;</span></span></span><br></pre></td></tr></table></figure>
<h3 id="初始化-9">初始化</h3>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">tuple&lt;<span class="type">int</span>, <span class="type">int</span>, string&gt; t1;<span class="comment">//声明一个空的tuple三元组</span></span><br><span class="line">t1 = <span class="built_in">make_tuple</span>(<span class="number">1</span>, <span class="number">1</span>, <span class="string">&quot;hahaha&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="function">tuple&lt;<span class="type">int</span>, <span class="type">int</span>, <span class="type">int</span>, <span class="type">int</span>&gt; <span class="title">t2</span><span class="params">(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">auto</span> p = <span class="built_in">make_pair</span>(<span class="string">&quot;wang&quot;</span>, <span class="number">1</span>);</span><br><span class="line">tuple&lt;string, <span class="type">int</span>&gt; t3 &#123;p&#125;; <span class="comment">//将pair对象赋给tuple对象</span></span><br></pre></td></tr></table></figure>
<h3 id="操作">操作</h3>
<h4 id="读取修改">读取修改</h4>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> first = <span class="built_in">get</span>&lt;<span class="number">0</span>&gt;(t);</span><br><span class="line"><span class="built_in">get</span>&lt;<span class="number">0</span>&gt;(t) = <span class="number">1</span>;</span><br></pre></td></tr></table></figure>
<h4 id="获取元素个数">获取元素个数</h4>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function">tuple&lt;<span class="type">int</span>, <span class="type">int</span>, <span class="type">int</span>&gt; <span class="title">t</span><span class="params">(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span></span>;</span><br><span class="line">cout &lt;&lt; tuple_size&lt;<span class="keyword">decltype</span>(t)&gt;::value &lt;&lt; <span class="string">&quot;\n&quot;</span>; <span class="comment">// 3</span></span><br></pre></td></tr></table></figure>
<h4 id="解包">解包</h4>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> one, three;</span><br><span class="line">string two; </span><br><span class="line"><span class="function">tuple&lt;<span class="type">int</span>, string, <span class="type">int</span>&gt; <span class="title">t</span><span class="params">(<span class="number">1</span>, <span class="string">&quot;hahaha&quot;</span>, <span class="number">3</span>)</span></span>;</span><br><span class="line"><span class="built_in">tie</span>(one, two, three) = t;</span><br><span class="line">cout &lt;&lt; one &lt;&lt; two &lt;&lt; three &lt;&lt; <span class="string">&quot;\n&quot;</span>; <span class="comment">// 1hahaha3</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>STL</tag>
      </tags>
  </entry>
  <entry>
    <title>C++编程基础</title>
    <url>/2022/08/10/C-%E7%BC%96%E7%A8%8B/</url>
    <content><![CDATA[<h2 id="从C到C">从C到C++</h2>
<p>C是面向过程的语言，对于小规模程序还是得心应手的，为了程序设计的更见简易，C++最为C语言的自增版，保留原来语法，增加面向对象机制。</p>
<h1 id="万能头文件">万能头文件</h1>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span><span class="comment">//万能头文件  几乎包含所有的头文件</span></span></span><br></pre></td></tr></table></figure>
<h2 id="最简单的C-程序">最简单的C++程序</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    std::cout &lt;&lt; <span class="string">&quot;Hello, World!&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol>
<li>
<p>C++规定main函数必须声明为int型。</p>
</li>
<li>
<p>cout为输出流对象</p>
</li>
</ol>
<h2 id="输入输出">输入输出</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">     <span class="type">int</span> a,b,sum; </span><br><span class="line">     cin&gt;&gt;a&gt;&gt;b;   </span><br><span class="line">     sum = a + b;                 </span><br><span class="line">     cout&lt;&lt;″a + b =″&lt;&lt;sum&lt;&lt;endl;        </span><br><span class="line">     <span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="内联函数">内联函数</h2>
<p>内联函数是直接复制“镶嵌”到主函数中去的，就是将内联函数的代码直接放在内联函数的位置上</p>
<p>当数本身内容比较少，代码比较短，函数功能相对简单，函数被调用得频繁，我们用内联函数</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">function</span><span class="params">( <span class="type">int</span> a )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="函数模板">函数模板</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">class</span> <span class="title class_">T</span>&gt;<span class="comment">//T代表一个待定的类型，会改变为传入的参数的类型</span></span><br><span class="line">返回值类型 函数名(参数列表)</span><br><span class="line">&#123;</span><br><span class="line">函数体</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="引用和引用形参">引用和引用形参</h2>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span>  &amp;b = a;     <span class="comment">//声明b是a的引用（别名）</span></span><br></pre></td></tr></table></figure>
<h1 id="参数传递">参数传递</h1>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">sum</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b=<span class="number">1</span>)</span></span>&#123; &#125;<span class="comment">//正确</span></span><br></pre></td></tr></table></figure>
<ul>
<li><strong>默认参数必须写在一般参数的后面</strong></li>
</ul>
<h1 id="一元作用域运算符">一元作用域运算符::</h1>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n=<span class="number">55</span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> n=<span class="number">5</span>;</span><br><span class="line">    cout&lt;&lt;::n&lt;&lt;<span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>OP编程</tag>
      </tags>
  </entry>
  <entry>
    <title>Flask框架基础</title>
    <url>/2022/11/15/Flask%E6%A1%86%E6%9E%B6%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h1 id="Flask基础">Flask基础</h1>
<h2 id="第一个应用">第一个应用</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"></span><br><span class="line">app=Flask(__name__)</span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;hello world&quot;</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">      app.run()</span><br></pre></td></tr></table></figure>
<h2 id="调试">调试</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"></span><br><span class="line">app=Flask(__name__)</span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;hello world&quot;</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">      app.run</span><br></pre></td></tr></table></figure>
<h1 id="路由">路由</h1>
<p>程序需要每个URL运行哪些代码，所以保存一个URL到Python函数的映射关系。处理URL和函数之间关系的程序称为路由。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"></span><br><span class="line">app=Flask(__name__)</span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/404&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;&quot;&quot;&lt;html&gt;&lt;head&gt;&lt;title&gt;404 Not Found&lt;/title&gt;&lt;/head&gt;</span></span><br><span class="line"><span class="string">&lt;body&gt;&lt;center&gt;&lt;h1&gt;404 Not Found&lt;/h1&gt;&lt;/center&gt;</span></span><br><span class="line"><span class="string">&lt;hr&gt;&lt;center&gt;nginx&lt;/center&gt;&lt;/body&gt;&lt;/html&gt;&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">      app.run(debug=<span class="literal">True</span>,port=<span class="number">8088</span>)</span><br></pre></td></tr></table></figure>
<h2 id="变量规则">变量规则</h2>
<p>在<code>@app.route()</code>函数中添加URL时，该URL有时候是变化的，所以针对这种情况，可以构造有动态部分的URL，也可以在一个函数上添加多个规则。</p>
<p>在给URL添加变量部分时，可以把这些特殊的字段标记为<code>&lt;变量名&gt;</code>的形式，它将作为命名参数传递给函数。要给变量名的类型进行限制，可以用<code>&lt;变量类型:变量名&gt;</code>指定一个可选的类型转换器</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line">app=Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;hello world&#x27;</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/user/&lt;username&gt;&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show_user_profile</span>(<span class="params">username</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="string">f&#x27;用户名是：<span class="subst">&#123;username&#125;</span>&#x27;</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/post/&lt;int:post_id&gt;&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show_post</span>(<span class="params">post_id</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="string">f&#x27;ID是<span class="subst">&#123;post_id&#125;</span>&#x27;</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(debug=  <span class="literal">True</span>)</span><br></pre></td></tr></table></figure>
<h2 id="构造URL">构造URL</h2>
<p>使用url_for()函数来给指定的函数构造URL。其第一个参数是函数名，其余参数会添加到URL末尾作为查询参数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> *</span><br><span class="line">app=Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;show_user_profile&#x27;</span>,username=<span class="string">&#x27;bill&#x27;</span>))</span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/user/&lt;username&gt;&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show_user_profile</span>(<span class="params">username</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="string">f&#x27;用户名是：<span class="subst">&#123;username&#125;</span>&#x27;</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/post/&lt;int:post_id&gt;&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show_post</span>(<span class="params">post_id</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="string">f&#x27;ID是<span class="subst">&#123;post_id&#125;</span>&#x27;</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(debug=  <span class="literal">True</span>)</span><br></pre></td></tr></table></figure>
<h2 id="HTTP方法">HTTP方法</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> *</span><br><span class="line">app=Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span>,methods=[<span class="string">&#x27;GET&#x27;</span>,<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">if</span> request.method==<span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;show_user_profile&#x27;</span>,username=<span class="string">&#x27;bill&#x27;</span>))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello&quot;</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/user/&lt;username&gt;&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show_user_profile</span>(<span class="params">username</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="string">f&#x27;用户名是：<span class="subst">&#123;username&#125;</span>&#x27;</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/post/&lt;int:post_id&gt;&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show_post</span>(<span class="params">post_id</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="string">f&#x27;ID是<span class="subst">&#123;post_id&#125;</span>&#x27;</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(debug=  <span class="literal">True</span>)</span><br></pre></td></tr></table></figure>
<h1 id="模板">模板</h1>
<p>模板是一个包含响应文本的文件，其中包含占位变量的动态部分，其具体值只在请求的上下文才知道。</p>
<h2 id="渲染模板">渲染模板</h2>
<p>语法格式</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">render_template(<span class="string">&#x27;temprender.html&#x27;</span>,username=name)</span><br></pre></td></tr></table></figure>
<p>Flask程序默认在templates子文件中找模板</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,url_for,render_template</span><br><span class="line"></span><br><span class="line">app=Flask(__name__)</span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    title=<span class="string">&quot;Flask&quot;</span></span><br><span class="line">    msg=<span class="string">&quot;你好&quot;</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;index.html&#x27;</span>,title=title,msg=msg)</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure>
<h2 id="模板变量">模板变量</h2>
<p><code>&#123;&#123;name&#125;&#125;</code>表示一个变量，是一种特殊的占位符。也可以是列表、字典和对象</p>
<p><img src="https://s2.loli.net/2022/11/19/8YlEPiwKkI5LrZx.png" alt=""></p>
<p>还有常用过滤器</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="keyword">HTML</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>&#123;&#123;title&#125;&#125;<span class="tag">&lt;/<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span><span class="tag">&lt;<span class="name">h1</span>&gt;</span><span class="tag">&lt;<span class="name">center</span>&gt;</span>&#123;&#123;msg|upper&#125;&#125;<span class="tag">&lt;/<span class="name">center</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>名称</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>safe</td>
<td>渲染时不转义</td>
</tr>
<tr>
<td>capitalize</td>
<td>把值得首字母转为大写，其它字母转为小写</td>
</tr>
<tr>
<td>lower</td>
<td>把值转为小写</td>
</tr>
<tr>
<td>upper</td>
<td>把值转换为大写形式</td>
</tr>
<tr>
<td>title</td>
<td>把值中每个单词的首单词都转换为大写</td>
</tr>
<tr>
<td>trim</td>
<td>把值的首尾空格去掉</td>
</tr>
<tr>
<td>striptages</td>
<td>渲染之前把值中所有的HTML标签都删掉</td>
</tr>
</tbody>
</table>
<h2 id="控制结构">控制结构</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, url_for, render_template</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    title = <span class="string">&quot;Flask&quot;</span></span><br><span class="line">    user=<span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;index.html&#x27;</span>, title=title,user=user)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="keyword">HTML</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>&#123;&#123;title&#125;&#125;<span class="tag">&lt;/<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span><span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;% if user %&#125;&#123;&#123;user&#125;&#125;&#123;% else %&#125;no user&#123;% endif %&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h1 id="Web表单">Web表单</h1>
<blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install flask-wtf</span><br></pre></td></tr></table></figure>
</blockquote>
<h2 id="表单类">表单类</h2>
<p>使用Flask-WTF时候，每个Web表单都继承自Form的类表示</p>
<p>例如</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask_wtf <span class="keyword">import</span> FlaskForm</span><br><span class="line"><span class="keyword">from</span> wtforms <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> wtforms.validators <span class="keyword">import</span> DataRequired</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">NameForm</span>(<span class="title class_ inherited__">FlaskForm</span>):\</span><br><span class="line">    name=StringField(<span class="string">&#x27;请输入姓名&#x27;</span>,validators=DataRequired())</span><br><span class="line">    passwd=PasswordField(<span class="string">&#x27;请输入密码&#x27;</span>,validators=DataRequired())</span><br><span class="line">    sumbmit=SubmitField(<span class="string">&quot;提交&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>当然WTForms支持其它HTML标准字段</p>
<table>
<thead>
<tr>
<th>字段类型</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>StringField</td>
<td>文本字段</td>
</tr>
<tr>
<td>TextAreaField</td>
<td>多行文本字段</td>
</tr>
<tr>
<td>PasswordFiled</td>
<td>密码文本字段</td>
</tr>
<tr>
<td>HiddenField</td>
<td>隐藏文本字段</td>
</tr>
<tr>
<td>DateField</td>
<td>文本字段，值为datetime.date格式</td>
</tr>
<tr>
<td>DateTimeField</td>
<td>文本字段，值为datetime.datetime格式</td>
</tr>
<tr>
<td>IntegerField</td>
<td>文本字段，值为整数</td>
</tr>
<tr>
<td>DecimalField</td>
<td>文本字段，值为decimal.Decimal格式</td>
</tr>
<tr>
<td>FloatField</td>
<td>文本字段，值为浮点数</td>
</tr>
<tr>
<td>BooleanField</td>
<td>复选框，值为True或False</td>
</tr>
<tr>
<td>RadioField</td>
<td>一组单选按钮</td>
</tr>
<tr>
<td>SelectFiled</td>
<td>下拉列表</td>
</tr>
<tr>
<td>SelectMultipleField</td>
<td>下拉列表，可选择多个值</td>
</tr>
<tr>
<td>FileField</td>
<td>文件上传字段</td>
</tr>
<tr>
<td>SubmitFiled</td>
<td>表单提交按钮</td>
</tr>
<tr>
<td>FormFiled</td>
<td>把表单作为字段嵌入另一个表单内</td>
</tr>
<tr>
<td>FieldList</td>
<td>一组指定类型的字段</td>
</tr>
</tbody>
</table>
<p>WTForms内置的验证函数</p>
<table>
<thead>
<tr>
<th>字段类型</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>Email</td>
<td>验证电子邮箱地址</td>
</tr>
<tr>
<td>EqualTo</td>
<td>比较两个字段的值，常用于比较输入两次密码进行确认的情况</td>
</tr>
<tr>
<td>IPAdress</td>
<td>验证IPv4地址</td>
</tr>
<tr>
<td>Length</td>
<td>验证输入字符串的长度</td>
</tr>
<tr>
<td>NumberRange</td>
<td>验证输入的值的在数字范围内</td>
</tr>
<tr>
<td>Optional</td>
<td>无输入值时跳过其他验证函数</td>
</tr>
<tr>
<td>Required</td>
<td>确保字段中有数据</td>
</tr>
<tr>
<td>Regexp</td>
<td>使用正则表达式验证输入值</td>
</tr>
<tr>
<td>URL</td>
<td>验证URL</td>
</tr>
<tr>
<td>AnyOf</td>
<td>确保输入值在可选列表中</td>
</tr>
</tbody>
</table>
<h2 id="把表单渲染成HTML">把表单渲染成HTML</h2>
<p><a href="http://models.py">models.py</a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask_wtf <span class="keyword">import</span> FlaskForm</span><br><span class="line"><span class="keyword">from</span> wtforms <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> wtforms.validators <span class="keyword">import</span> DataRequired, Length</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">LoginForm</span>(<span class="title class_ inherited__">FlaskForm</span>):</span><br><span class="line">    name = StringField(label=<span class="string">&#x27;用户名&#x27;</span>, validators=[DataRequired(<span class="string">&quot;用户名不能为空&quot;</span>),</span><br><span class="line">                                                   Length(<span class="built_in">max</span>=<span class="number">10</span>, <span class="built_in">min</span>=<span class="number">3</span>, message=<span class="string">&quot;用户名要大于3且小于10&quot;</span>)])</span><br><span class="line">    password = PasswordField(label=<span class="string">&#x27;密码&#x27;</span>, validators=[DataRequired(<span class="string">&quot;密码不能为空&quot;</span>),</span><br><span class="line">                                                       Length(<span class="built_in">max</span>=<span class="number">15</span>, <span class="built_in">min</span>=<span class="number">6</span>, message=<span class="string">&quot;密码长度大于6且小于15&quot;</span>)])</span><br><span class="line">    submit = SubmitField(label=<span class="string">&quot;提交&quot;</span>)</span><br></pre></td></tr></table></figure>
<p><a href="http://main.py">main.py</a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> models <span class="keyword">import</span> LoginForm</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.config[<span class="string">&#x27;SECRET_KEY&#x27;</span>] =<span class="string">&quot;HELLO&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/login&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login</span>():</span><br><span class="line">    form = LoginForm()</span><br><span class="line">    <span class="keyword">if</span> form.validate_on_submit():</span><br><span class="line">        username = form.name.data</span><br><span class="line">        password = form.password.data</span><br><span class="line">        <span class="keyword">if</span> username == <span class="string">&quot;bill&quot;</span> <span class="keyword">and</span> password ==<span class="string">&quot;myfile12&quot;</span>:</span><br><span class="line">            <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;index&#x27;</span>))</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&quot;login.html&quot;</span>,form=form)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&quot;index.html&quot;</span>, title=<span class="string">&quot;首页&quot;</span>, user=<span class="string">&quot;用户&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">center</span>&gt;</span>表单<span class="tag">&lt;/<span class="name">center</span>&gt;</span><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">            &#123;&#123;form.name.label&#125;&#125;</span><br><span class="line">            &#123;&#123;form.name()&#125;&#125;</span><br><span class="line">            &#123;% for err in form.name.errors %&#125;</span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">&quot;color: red&quot;</span>&gt;</span>&#123;&#123;err&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            &#123;% endfor %&#125;</span><br><span class="line">            &#123;&#123;form.password.label&#125;&#125;</span><br><span class="line">            &#123;&#123;form.password()&#125;&#125;</span><br><span class="line">            &#123;% for err in form.password.errors %&#125;</span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">&quot;color: red&quot;</span>&gt;</span>&#123;&#123;err&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            &#123;% endfor %&#125;</span><br><span class="line">            &#123;&#123;form.csrf_token&#125;&#125;</span><br><span class="line">            &#123;&#123;form.submit()&#125;&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>网站开发</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>网站开发</tag>
      </tags>
  </entry>
  <entry>
    <title>JSP:隐式对象</title>
    <url>/2022/11/01/JSP-%E9%9A%90%E5%BC%8F%E5%AF%B9%E8%B1%A1/</url>
    <content><![CDATA[<blockquote>
<ul>
<li>JSP隐式对象是JSP容器为每个页面提供的Java对象，开发者可以直接使用它们而不用显式声明。JSP隐式对象也被称为预定义变量。</li>
</ul>
<table>
<thead>
<tr>
<th><strong>对象</strong></th>
<th><strong>描述</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>request</td>
<td><strong>HttpServletRequest</strong> 接口的实例</td>
</tr>
<tr>
<td>response</td>
<td><strong>HttpServletResponse</strong> 接口的实例</td>
</tr>
<tr>
<td>out</td>
<td><strong>JspWriter</strong>类的实例，用于把结果输出至网页上</td>
</tr>
<tr>
<td>session</td>
<td><strong>HttpSession</strong>类的实例</td>
</tr>
<tr>
<td>application</td>
<td><strong>ServletContext</strong>类的实例，与应用上下文有关</td>
</tr>
<tr>
<td>config</td>
<td><strong>ServletConfig</strong>类的实例</td>
</tr>
<tr>
<td>pageContext</td>
<td><strong>PageContext</strong>类的实例，提供对JSP页面所有对象以及命名空间的访问</td>
</tr>
<tr>
<td>page</td>
<td>类似于Java类中的this关键字</td>
</tr>
<tr>
<td>Exception</td>
<td><strong>Exception</strong>类的对象，代表发生错误的JSP页面中对应的异常对象</td>
</tr>
</tbody>
</table>
</blockquote>
<h1 id="request-对象">request 对象</h1>
<h2 id="常用方法">常用方法</h2>
<table>
<thead>
<tr>
<th style="text-align:center">方法</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">Object getAttribute(String name)</td>
<td style="text-align:left">返回指定属性的属性值</td>
</tr>
<tr>
<td style="text-align:center">Enumeration getAttributeNames</td>
<td style="text-align:left">返回所有可用属性名的枚举</td>
</tr>
<tr>
<td style="text-align:center">String getCharaterEncoding</td>
<td style="text-align:left">返回字符编码方式</td>
</tr>
<tr>
<td style="text-align:center">int getContentLength()</td>
<td style="text-align:left">返回请求体的字节数</td>
</tr>
<tr>
<td style="text-align:center">String getContentType()</td>
<td style="text-align:left">返回请求体的MIME类型</td>
</tr>
<tr>
<td style="text-align:center">ServletInputStream getInputStream()</td>
<td style="text-align:left">返回请求体的一行二进制流</td>
</tr>
<tr>
<td style="text-align:center">String getParameter(String name)</td>
<td style="text-align:left">返回name指定参数的参数值</td>
</tr>
<tr>
<td style="text-align:center">Enumeration getParameterNames()</td>
<td style="text-align:left">返回可用参数名的枚举</td>
</tr>
<tr>
<td style="text-align:center">String[] getParameterValues(String name)</td>
<td style="text-align:left">返回包含参数name的所有值的数组</td>
</tr>
<tr>
<td style="text-align:center">String getProtocol()</td>
<td style="text-align:left">返回请求用的协议类型及版本号</td>
</tr>
<tr>
<td style="text-align:center">String getServerName()</td>
<td style="text-align:left">返回接收请求的服务器主机名</td>
</tr>
<tr>
<td style="text-align:center">int getServerPort()</td>
<td style="text-align:left">返回服务器接收此请求的端口号</td>
</tr>
<tr>
<td style="text-align:center">String getRemoteAddr()</td>
<td style="text-align:left">返回发送此请求的客户端IP地址</td>
</tr>
<tr>
<td style="text-align:center">String getRemoteHost()</td>
<td style="text-align:left">返回发送此请求的客户端主机名</td>
</tr>
<tr>
<td style="text-align:center">void setAttribute(String key,Obeject obj)</td>
<td style="text-align:left">设置属性的属性值</td>
</tr>
<tr>
<td style="text-align:center">String geRealPath(String path)</td>
<td style="text-align:left">返回一虚拟路径的真实路径</td>
</tr>
</tbody>
</table>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>网站</tag>
      </tags>
  </entry>
  <entry>
    <title>Java:集合类</title>
    <url>/2022/10/01/Java-%E9%9B%86%E5%90%88%E7%B1%BB/</url>
    <content><![CDATA[<h1 id="Set">Set</h1>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Set</span>&lt;E&gt; <span class="keyword">extends</span> <span class="title class_">Collection</span>&lt;E&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//基本操作</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">size</span><span class="params">()</span>;</span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">()</span>;</span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">contains</span><span class="params">(Objects element)</span>;</span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">add</span><span class="params">(E element)</span>;</span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">remove</span><span class="params">(Objects element)</span>;</span><br><span class="line">    Iterator&lt;E&gt; <span class="title function_">iterator</span><span class="params">()</span>;</span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">containsAll</span><span class="params">(Collection &lt;?&gt; c)</span>;</span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">addAll</span><span class="params">(Collection&lt;?extends E&gt; c)</span>;<span class="comment">//将集合c的元素添加到本集合</span></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">removeAll</span><span class="params">(Collection&lt;?&gt; c)</span>;</span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">retainAll</span><span class="params">(Collection&lt;?&gt; c)</span>;<span class="comment">//只保留属于c的元素</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">clear</span><span class="params">()</span>;</span><br><span class="line">    Objects[] toArray();</span><br><span class="line">    &lt;T&gt;T[] toArray(T[] a);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>JDK提供Set接口3个实用类</p>
<ul>
<li>
<p>HashSet，采用Hash,无固定顺序</p>
</li>
<li>
<p>TreeSet，实现SortedSet接口，有序</p>
</li>
<li>
<p>LinkedHashSet，有固定顺序</p>
</li>
</ul>
<hr>
<h1 id="List">List</h1>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">List</span>&lt;E&gt; <span class="keyword">extends</span> <span class="title class_">Collection</span>&lt;E&gt;&#123;</span><br><span class="line">    E <span class="title function_">get</span><span class="params">(<span class="type">int</span> index)</span>;</span><br><span class="line">    E <span class="title function_">set</span><span class="params">(<span class="type">int</span> index,E element)</span>;</span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">add</span><span class="params">(E element)</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> index,E element)</span>;</span><br><span class="line">    E <span class="title function_">remove</span><span class="params">(<span class="type">int</span> index)</span>;</span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">addAll</span><span class="params">(<span class="type">int</span> index,Collection&lt;? extends E&gt; c)</span>;</span><br><span class="line">    <span class="comment">//查找</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">indexOf</span><span class="params">(Object o)</span>;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">lastIndexOf</span><span class="params">(Object o)</span>;</span><br><span class="line">    ListIterator&lt;E&gt; <span class="title function_">listIterator</span><span class="params">()</span>;</span><br><span class="line">    ListIterator&lt;E&gt; <span class="title function_">listIterator</span><span class="params">(<span class="type">int</span> index)</span>;</span><br><span class="line">    Lis&lt;E&gt; <span class="title function_">subList</span><span class="params">(<span class="type">int</span> from,<span class="type">int</span> to)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>JDK提供Set接口3个实用类</p>
<ul>
<li>
<p>ArrayList,效率最高</p>
</li>
<li>
<p>LinkedList,还提供在结尾和开头get,remove,insert</p>
</li>
<li>
<p>Vector</p>
</li>
</ul>
<hr>
<h1 id="Queue">Queue</h1>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Queue</span>&lt;E&gt; <span class="keyword">extends</span> <span class="title class_">Collection</span>&lt;E&gt; &#123;</span><br><span class="line">    E <span class="title function_">element</span><span class="params">()</span>;</span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">add</span><span class="params">(E e)</span>;</span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">offer</span><span class="params">(E e)</span>;</span><br><span class="line">    E <span class="title function_">remove</span><span class="params">()</span>;</span><br><span class="line">    E <span class="title function_">poll</span><span class="params">()</span>;</span><br><span class="line">    E <span class="title function_">peek</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h1 id="Map">Map</h1>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Map</span>&lt;K, V&gt; &#123;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">size</span><span class="params">()</span>;</span><br><span class="line">    V <span class="title function_">put</span><span class="params">(K key,V value)</span>;</span><br><span class="line">    V <span class="title function_">get</span><span class="params">(Object key)</span>;</span><br><span class="line">    V <span class="title function_">remove</span><span class="params">(Object key)</span>;</span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">containsKey</span><span class="params">(Object key)</span>;</span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">containsValue</span><span class="params">(Object value)</span>;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">size</span><span class="params">()</span>;</span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">putAll</span><span class="params">(Map&lt;?extends K,?extends V&gt;m)</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">clear</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Set</span><span class="params">(K)</span> keySet();</span><br><span class="line">    <span class="keyword">public</span> Collection&lt;V&gt; <span class="title function_">values</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">public</span> Set&lt;Map.Entry&lt;k,v&gt;&gt; entrySet();</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Entry</span>&#123;</span><br><span class="line">        K <span class="title function_">getKey</span><span class="params">()</span>;</span><br><span class="line">        V <span class="title function_">getValue</span><span class="params">()</span>;</span><br><span class="line">        V <span class="title function_">setValue</span><span class="params">(V value)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>K-means聚类算法筛实现鸢尾花聚类</title>
    <url>/2022/11/04/K-means%E8%81%9A%E7%B1%BB%E7%AE%97%E6%B3%95%E7%AD%9B%E5%AE%9E%E7%8E%B0%E9%B8%A2%E5%B0%BE%E8%8A%B1%E8%81%9A%E7%B1%BB/</url>
    <content><![CDATA[<blockquote>
<p>K-means聚类算法筛实现鸢尾花聚类:对于给定的样本集，按照样本之间的距离大小，将样本集划分为K个簇，让簇内的点尽量紧密的连在一起，而让簇间的距离尽量的。聚类属于<strong>无监督算法</strong>，不必专门切分训练集与测试集</p>
</blockquote>
<h1 id="导入包">导入包</h1>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> sklearn.cluster <span class="keyword">import</span> KMeans </span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> datasets </span><br></pre></td></tr></table></figure>
<h1 id="sklearn-datasets中加载数据集">sklearn.datasets中加载数据集</h1>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 直接从sklearn中获取数据集</span></span><br><span class="line">iris = datasets.load_iris()</span><br><span class="line">X = iris.data[:, :<span class="number">4</span>]    <span class="comment"># 表示我们取特征空间中的4个维度</span></span><br><span class="line"><span class="built_in">print</span>(X.shape)</span><br></pre></td></tr></table></figure>
<h1 id="绘制二维数据分布图">绘制二维数据分布图</h1>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 取前两个维度（萼片长度、萼片宽度），绘制数据分布图</span></span><br><span class="line">plt.scatter(X[:, <span class="number">0</span>], X[:, <span class="number">1</span>], c=<span class="string">&quot;red&quot;</span>, marker=<span class="string">&#x27;o&#x27;</span>, label=<span class="string">&#x27;see&#x27;</span>)</span><br><span class="line">plt.xlabel(<span class="string">&#x27;sepal length&#x27;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;sepal width&#x27;</span>)</span><br><span class="line">plt.legend(loc=<span class="number">2</span>)</span><br><span class="line">plt.show() </span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1 id="实例化K-means类，并且定义训练函数">实例化K-means类，并且定义训练函数</h1>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">Model</span>(<span class="params">n_clusters</span>):</span><br><span class="line">    estimator = KMeans(n_clusters=n_clusters)<span class="comment"># 构造聚类器</span></span><br><span class="line">    <span class="keyword">return</span> estimator</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">train</span>(<span class="params">estimator</span>):</span><br><span class="line">    estimator.fit(X)  <span class="comment"># 聚类</span></span><br></pre></td></tr></table></figure>
<h1 id="训练">训练</h1>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 初始化实例，并开启训练拟合</span></span><br><span class="line">estimator=Model(<span class="number">3</span>)     </span><br><span class="line">train(estimator)   </span><br></pre></td></tr></table></figure>
<h1 id="可视化展示">可视化展示</h1>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">label_pred = estimator.labels_  <span class="comment"># 获取聚类标签</span></span><br><span class="line"><span class="comment"># 绘制k-means结果</span></span><br><span class="line">x0 = X[label_pred == <span class="number">0</span>]</span><br><span class="line">x1 = X[label_pred == <span class="number">1</span>]</span><br><span class="line">x2 = X[label_pred == <span class="number">2</span>]</span><br><span class="line">plt.scatter(x0[:, <span class="number">0</span>], x0[:, <span class="number">1</span>], c=<span class="string">&quot;red&quot;</span>, marker=<span class="string">&#x27;o&#x27;</span>, label=<span class="string">&#x27;label0&#x27;</span>)</span><br><span class="line">plt.scatter(x1[:, <span class="number">0</span>], x1[:, <span class="number">1</span>], c=<span class="string">&quot;green&quot;</span>, marker=<span class="string">&#x27;*&#x27;</span>, label=<span class="string">&#x27;label1&#x27;</span>)</span><br><span class="line">plt.scatter(x2[:, <span class="number">0</span>], x2[:, <span class="number">1</span>], c=<span class="string">&quot;blue&quot;</span>, marker=<span class="string">&#x27;+&#x27;</span>, label=<span class="string">&#x27;label2&#x27;</span>)</span><br><span class="line">plt.xlabel(<span class="string">&#x27;sepal length&#x27;</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;sepal width&#x27;</span>)</span><br><span class="line">plt.legend(loc=<span class="number">2</span>)</span><br><span class="line">plt.show() </span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>机器学习</category>
      </categories>
      <tags>
        <tag>机器学习</tag>
        <tag>人工智能</tag>
      </tags>
  </entry>
  <entry>
    <title>Django:快速入门介绍</title>
    <url>/2022/10/17/Django-%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8%E4%BB%8B%E7%BB%8D/</url>
    <content><![CDATA[<h1 id="创建项目">创建项目</h1>
<p>在Pycharm专业版这可以直接创建Django项目</p>
<p><img src="https://s2.loli.net/2022/10/17/TLKMSFCeza4cbyl.png" alt=""></p>
<p>也可以在创建空项目,在终端中输入</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">django-admin startproject quickstart</span><br></pre></td></tr></table></figure>
<p>我们就可以发现目录生成一下文件结构</p>
<ul>
<li>
<p>quickstart/</p>
<ul>
<li>
<p><a href="http://manage.py">manage.py</a></p>
</li>
<li>
<p>quickstart/</p>
<ul>
<li>
<p>_init_.py</p>
</li>
<li>
<p><a href="http://settings.py">settings.py</a></p>
</li>
<li>
<p><a href="http://urls.py">urls.py</a></p>
</li>
<li>
<p><a href="http://wsgi.py">wsgi.py</a></p>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>说明：</p>
<blockquote>
<ul>
<li>
<p>外层quickstart只是名字，可以替换</p>
</li>
<li>
<p>manage.py是一个命令行程序，允许用户以各种方式与此项目进行交互</p>
</li>
<li>
<p>quickstart/<em>init</em>.py为空文件，告诉python其为一个包</p>
</li>
<li>
<p>quickstart/settings.py为项目配置文件</p>
</li>
<li>
<p>quickstart/urls.py是项目URL声明</p>
</li>
<li>
<p>quickstart/wsgi.py是使用WSGI部署服务的入口</p>
</li>
</ul>
</blockquote>
<h1 id="创建应用">创建应用</h1>
<p>我们在终端输入以下命令创建应用</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">django-admin startapp myapp</span><br></pre></td></tr></table></figure>
<p>我们就可以发现目录生成一下文件结构</p>
<ul>
<li>
<p>myapp/</p>
<ul>
<li>
<p>_<em>init_</em>.py</p>
</li>
<li>
<p><a href="http://admin.py">admin.py</a></p>
</li>
<li>
<p><a href="http://migrations.py">migrations.py</a></p>
<ul>
<li>_init_.py</li>
</ul>
</li>
</ul>
<ul>
<li>
<p><a href="http://tests.py">tests.py</a></p>
</li>
<li>
<p><a href="http://models.py">models.py</a></p>
</li>
<li>
<p><a href="http://views.py">views.py</a></p>
</li>
</ul>
</li>
</ul>
<p>说明：</p>
<blockquote>
<p>admin.py用于定制应用的管理页面</p>
<p>migrations.py文件夹用于模型出现修改时对应数据库的更改操作</p>
<p>_init_.py为空文件，告诉python其为一个包</p>
<p>models.py用于储存应用的模型，即MVC中的M</p>
<p>test.py一般用于放单元测试的代码</p>
<p>views.py用来放视图的函数</p>
</blockquote>
<h1 id="启动服务器">启动服务器</h1>
<p>像pycharm直接点击运行按钮</p>
<p><img src="https://s2.loli.net/2022/10/17/TVDHpkghNJSRXlF.png" alt=""></p>
<p>也可以在终端输入</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python manage.py runserver</span><br></pre></td></tr></table></figure>
<p><img src="https://s2.loli.net/2022/10/17/Cd2QGq8yPwYeBvz.png" alt=""></p>
<p>点击<a href="http://127.0.0.1:8000/">http://127.0.0.1:8000/</a></p>
<p>就可以看见创建的服务了</p>
<p><img src="https://s2.loli.net/2022/10/17/Lq8QMhRXiKGj1Uy.png" alt=""></p>
<h1 id="编写一个页面">编写一个页面</h1>
]]></content>
      <categories>
        <category>Django</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Django</tag>
      </tags>
  </entry>
  <entry>
    <title>JSP语法</title>
    <url>/2022/10/29/JSP%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<h1 id="JSP脚本元素">JSP脚本元素</h1>
<h2 id="Java程序片">Java程序片</h2>
<p>在标记符<code>&lt;%</code>和 <code>%&gt;</code>之间插入的Java代码被称为JSP页面的Java程序片。</p>
<p>一个JSP页面可以有任意段Java程序片段，这些片段将被JSP引擎(如Tomcat)按顺序执行。在    一个程序片中声明的变量被为JSP页面的局部变量，他们在JSP后记所有的程序片以及表达式内都有效。</p>
<p>当多个客户请求一个JSP页面时,JSP引擎为每个客户启动一个线程，不同线程分别执行该JSP中程序片，程序片中的局部变量会在不同的线程被分配不同的内存空间，因此一个客户对JSP页面局部变量操作的结果不会影响到其它客户</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot;</span><br><span class="line">         pageEncoding=&quot;UTF-8&quot;%&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">&lt;%</span><br><span class="line">    int i=0;</span><br><span class="line">    for(i=0;i&lt;10;i++) &#123;</span><br><span class="line">    out.print(&quot;<span class="tag">&lt;<span class="name">h2</span>&gt;</span>&quot;+i+&quot;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span>&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">%&gt;</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="成员变量与方法的声明">成员变量与方法的声明</h2>
<p>在标识符<code> &lt;%!</code>和<code> %&gt;</code>之间声明的变量被称为JSP页面的成员变量。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;%!</span><br><span class="line">    <span class="type">int</span> n=<span class="number">0</span>;</span><br><span class="line">%&gt; </span><br></pre></td></tr></table></figure>
<p>在标识符 <code>&lt;%!</code>和 <code>%&gt;</code>之间声明的方法被称为JSP页面的成员方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">&quot;java&quot;</span> contentType=<span class="string">&quot;text/html; charset=UTF-8&quot;</span></span><br><span class="line">         pageEncoding=<span class="string">&quot;UTF-8&quot;</span>%&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;hello&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;%!</span><br><span class="line">    <span class="type">int</span> n=<span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> x+y;</span><br><span class="line">    &#125;</span><br><span class="line">%&gt;</span><br><span class="line">&lt;%</span><br><span class="line">    out.print(<span class="string">&quot;&lt;h1&gt;被请求&quot;</span>+(n++)+<span class="string">&quot;次&lt;/h1&gt;&quot;</span>);</span><br><span class="line">    out.print(<span class="string">&quot;&lt;p&gt;1+2=&quot;</span>+add(<span class="number">1</span>,<span class="number">2</span>)+<span class="string">&quot;&lt;/p&gt;&quot;</span>);</span><br><span class="line"></span><br><span class="line">%&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
<h2 id="JAVA表达式">JAVA表达式</h2>
<p>在标识符<code>&lt;%=</code>和<code>%&gt;</code>之间插入一个表达式，可以有算术表达式、逻辑表达式和条件表达式。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">&quot;java&quot;</span> contentType=<span class="string">&quot;text/html; charset=UTF-8&quot;</span></span><br><span class="line">         pageEncoding=<span class="string">&quot;UTF-8&quot;</span>%&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;hello&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;%</span><br><span class="line">    out.print(<span class="string">&quot;&lt;p&gt;2+2=&quot;</span>);</span><br><span class="line">%&gt;</span><br><span class="line">&lt;%=<span class="number">2</span>+<span class="number">2</span>%&gt;</span><br><span class="line">&lt;%</span><br><span class="line">    out.print(<span class="string">&quot;&lt;/p&gt;&lt;p&gt;2==2:&quot;</span>);</span><br><span class="line">%&gt;</span><br><span class="line">&lt;%=<span class="number">2</span>==<span class="number">2</span>%&gt;</span><br><span class="line">&lt;%</span><br><span class="line">    out.print(<span class="string">&quot;&lt;/p&gt;&quot;</span>);</span><br><span class="line">%&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
<h1 id="JSP指令标记">JSP指令标记</h1>
<h2 id="page-指令">page 指令</h2>
<p>page指令用来定义整个JSP页面的一些属性和属性值。</p>
<p>page指令格式:<code> &lt;% @ page 属性=“值1” %&gt;</code></p>
<ul>
<li>
<p>contentType</p>
</li>
<li>
<p>import</p>
</li>
<li>
<p>language</p>
</li>
<li>
<p>pageEncoding</p>
</li>
</ul>
<h2 id="include-指令">include 指令</h2>
<p>include指令标记就是将jsp文件、或其它文件静态嵌入当前jsp文件</p>
<p>语法格式 <code>&lt;%include file=&quot;url&quot;%&gt;</code></p>
<h1 id="JSP动作标记">JSP动作标记</h1>
<h2 id="include-动作标记">include 动作标记</h2>
<p>动作标记include就是让JSP文件动态嵌入当前JSP文件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;jsp:include page=<span class="string">&quot;url&quot;</span>/&gt;</span><br></pre></td></tr></table></figure>
<p>或者</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;jsp:include page=<span class="string">&quot;url&quot;</span>&gt;</span><br><span class="line">子标签</span><br><span class="line">&lt;jsp:include/&gt;</span><br></pre></td></tr></table></figure>
<p>以下是include动作相关的属性列表。</p>
<table>
<thead>
<tr>
<th>属性</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>page</td>
<td>包含在页面中的相对URL地址。</td>
</tr>
<tr>
<td>flush</td>
<td>布尔属性，定义在包含资源前是否刷新缓存区。</td>
</tr>
</tbody>
</table>
<h2 id="forward-动作标签">forward 动作标签</h2>
<p>jsp:forward动作把请求转到另外的页面。jsp:forward标记只有一个属性page。语法格式如下所示：</p>
<pre><code>&lt;jsp:forward page=&quot;相对 URL 地址&quot; /&gt;
</code></pre>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>网站</tag>
      </tags>
  </entry>
  <entry>
    <title>Numpy笔记</title>
    <url>/2022/09/26/Numpy%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="安装">安装</h1>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip3 install --user numpy scipy matplotlib</span><br></pre></td></tr></table></figure>
<h1 id="Ndarray-对象">Ndarray 对象</h1>
<p>N 维数组对象 ndarray，它是一系列同类型数据的集合，以 0 下标为开始进行集合中元素的索引。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">numpy.array(<span class="built_in">object</span>, dtype = <span class="literal">None</span>, copy = <span class="literal">True</span>, order = <span class="literal">None</span>, subok = <span class="literal">False</span>, ndmin = <span class="number">0</span>)</span><br></pre></td></tr></table></figure>
<p><strong>参数说明：</strong></p>
<table>
<thead>
<tr>
<th>名称</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>object</td>
<td>数组或嵌套的数列</td>
</tr>
<tr>
<td>dtype</td>
<td>数组元素的数据类型，可选</td>
</tr>
<tr>
<td>copy</td>
<td>对象是否需要复制，可选</td>
</tr>
<tr>
<td>order</td>
<td>创建数组的样式，C为行方向，F为列方向，A为任意方向（默认）</td>
</tr>
<tr>
<td>subok</td>
<td>默认返回一个与基类类型一致的数组</td>
</tr>
<tr>
<td>ndmin</td>
<td>指定生成数组的最小维度</td>
</tr>
</tbody>
</table>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np </span><br><span class="line">a = np.array([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],ndmin =  <span class="number">2</span>,dtype = <span class="built_in">complex</span>,)  </span><br><span class="line"><span class="built_in">print</span> (a)</span><br><span class="line">/*</span><br><span class="line"></span><br><span class="line">*/</span><br></pre></td></tr></table></figure>
<h1 id="数据类型">数据类型</h1>
<table>
<thead>
<tr>
<th>名称</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>bool_</td>
<td>布尔型数据类型（True 或者 False）</td>
</tr>
<tr>
<td>int_</td>
<td>默认的整数类型（类似于 C 语言中的 long，int32 或 int64）</td>
</tr>
<tr>
<td>intc</td>
<td>与 C 的 int 类型一样，一般是 int32 或 int 64</td>
</tr>
<tr>
<td>intp</td>
<td>用于索引的整数类型（类似于 C 的 ssize_t，一般情况下仍然是 int32 或 int64）</td>
</tr>
<tr>
<td>int8</td>
<td>字节（-128 to 127）</td>
</tr>
<tr>
<td>int16</td>
<td>整数（-32768 to 32767）</td>
</tr>
<tr>
<td>int32</td>
<td>整数（-2147483648 to 2147483647）</td>
</tr>
<tr>
<td>int64</td>
<td>整数（-9223372036854775808 to 9223372036854775807）</td>
</tr>
<tr>
<td>uint8</td>
<td>无符号整数（0 to 255）</td>
</tr>
<tr>
<td>uint16</td>
<td>无符号整数（0 to 65535）</td>
</tr>
<tr>
<td>uint32</td>
<td>无符号整数（0 to 4294967295）</td>
</tr>
<tr>
<td>uint64</td>
<td>无符号整数（0 to 18446744073709551615）</td>
</tr>
<tr>
<td>float_</td>
<td>float64 类型的简写</td>
</tr>
<tr>
<td>float16</td>
<td>半精度浮点数，包括：1 个符号位，5 个指数位，10 个尾数位</td>
</tr>
<tr>
<td>float32</td>
<td>单精度浮点数，包括：1 个符号位，8 个指数位，23 个尾数位</td>
</tr>
<tr>
<td>float64</td>
<td>双精度浮点数，包括：1 个符号位，11 个指数位，52 个尾数位</td>
</tr>
<tr>
<td>complex_</td>
<td>complex128 类型的简写，即 128 位复数</td>
</tr>
<tr>
<td>complex64</td>
<td>复数，表示双 32 位浮点数（实数部分和虚数部分）</td>
</tr>
<tr>
<td>complex128</td>
<td>复数，表示双 64 位浮点数（实数部分和虚数部分）</td>
</tr>
</tbody>
</table>
<p>numpy 的数值类型实际上是 dtype 对象的实例，并对应唯一的字符，包括 np.bool_，np.int32，np.float32，等等。</p>
<h2 id="数据类型对象-dtype">数据类型对象 (dtype)</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">numpy.dtype(<span class="built_in">object</span>, align, copy)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="comment"># 使用标量类型</span></span><br><span class="line">dt = np.dtype(np.int32)</span><br><span class="line"><span class="built_in">print</span>(dt)    </span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">dt = np.dtype([(<span class="string">&#x27;age&#x27;</span>,np.int8)]) </span><br><span class="line"><span class="built_in">print</span>(dt)     </span><br><span class="line">/*</span><br><span class="line">[(<span class="string">&#x27;age&#x27;</span>, <span class="string">&#x27;i1&#x27;</span>)]    </span><br><span class="line">*/</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">student = np.dtype([(<span class="string">&#x27;name&#x27;</span>,<span class="string">&#x27;S20&#x27;</span>), (<span class="string">&#x27;age&#x27;</span>, <span class="string">&#x27;i1&#x27;</span>), (<span class="string">&#x27;marks&#x27;</span>, <span class="string">&#x27;f4&#x27;</span>)]) </span><br><span class="line">a = np.array([(<span class="string">&#x27;abc&#x27;</span>, <span class="number">21</span>, <span class="number">50</span>),(<span class="string">&#x27;xyz&#x27;</span>, <span class="number">18</span>, <span class="number">75</span>)], dtype = student) </span><br><span class="line"><span class="built_in">print</span>(a)</span><br></pre></td></tr></table></figure>
<h1 id="数组属性">数组属性</h1>
<table>
<thead>
<tr>
<th>属性</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>ndarray.ndim</td>
<td>秩，即轴的数量或维度的数量</td>
</tr>
<tr>
<td>ndarray.shape</td>
<td>数组的维度，对于矩阵，n 行 m 列</td>
</tr>
<tr>
<td>ndarray.size</td>
<td>数组元素的总个数，相当于 .shape 中 n*m 的值</td>
</tr>
<tr>
<td>ndarray.dtype</td>
<td>ndarray 对象的元素类型</td>
</tr>
<tr>
<td>ndarray.itemsize</td>
<td>ndarray 对象中每个元素的大小，以字节为单位</td>
</tr>
<tr>
<td>ndarray.flags</td>
<td>ndarray 对象的内存信息</td>
</tr>
<tr>
<td>ndarray.real</td>
<td>ndarray元素的实部</td>
</tr>
<tr>
<td>ndarray.imag</td>
<td>ndarray 元素的虚部</td>
</tr>
<tr>
<td>ndarray.data</td>
<td>包含实际数组元素的缓冲区，由于一般通过数组的索引获取元素，所以通常不需要使用这个属性</td>
</tr>
</tbody>
</table>
<h1 id="创建数组">创建数组</h1>
<h2 id="numpy-empty">numpy.empty</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">numpy.empty(shape, dtype = <span class="built_in">float</span>, order = <span class="string">&#x27;C&#x27;</span>)</span><br></pre></td></tr></table></figure>
<h2 id="numpy-zeros">numpy.zeros</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">numpy.zeros(shape, dtype = <span class="built_in">float</span>, order = <span class="string">&#x27;C&#x27;</span>)</span><br></pre></td></tr></table></figure>
<h2 id="numpy-ones">numpy.ones</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">numpy.ones(shape, dtype = <span class="literal">None</span>, order = <span class="string">&#x27;C&#x27;</span>)</span><br></pre></td></tr></table></figure>
<h1 id="从已有的数组创建数组">从已有的数组创建数组</h1>
<h2 id="numpy-asarray">numpy.asarray</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">numpy.asarray(a,dtype = <span class="literal">None</span>, order = <span class="literal">None</span>)   </span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>参数</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>a</td>
<td>任意形式的输入参数，可以是，列表, 列表的元组, 元组, 元组的元组, 元组的列表，多维数组</td>
</tr>
<tr>
<td>dtype</td>
<td>数据类型，可选</td>
</tr>
<tr>
<td>order</td>
<td>可选，有&quot;C&quot;和&quot;F&quot;两个选项,分别代表，行优先和列优先，在计算机内存中的存储元素的顺序。</td>
</tr>
</tbody>
</table>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np </span><br><span class="line"></span><br><span class="line">x =  [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>] </span><br><span class="line">a = np.asarray(x)  </span><br><span class="line"><span class="built_in">print</span> (a)</span><br></pre></td></tr></table></figure>
<h2 id="numpy-frombuffer">numpy.frombuffer</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">numpy.frombuffer(buffer, dtype = <span class="built_in">float</span>, count = -<span class="number">1</span>, offset = <span class="number">0</span>)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np </span><br><span class="line">s =  <span class="string">b&#x27;Hello World&#x27;</span> </span><br><span class="line">a = np.frombuffer(s, dtype =  <span class="string">&#x27;S1&#x27;</span>)  </span><br><span class="line"><span class="built_in">print</span> (a)</span><br></pre></td></tr></table></figure>
<h2 id="numpy-fromiter">numpy.fromiter</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">numpy.fromiter(iterable, dtype, count=-<span class="number">1</span>)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np </span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 range 函数创建列表对象  </span></span><br><span class="line"><span class="built_in">list</span>=<span class="built_in">range</span>(<span class="number">5</span>)</span><br><span class="line">it=<span class="built_in">iter</span>(<span class="built_in">list</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用迭代器创建 ndarray </span></span><br><span class="line">x=np.fromiter(it, dtype=<span class="built_in">float</span>)</span><br><span class="line"><span class="built_in">print</span>(x)</span><br></pre></td></tr></table></figure>
<h1 id="从数值范围创建数组">从数值范围创建数组</h1>
<h3 id="numpy-arange">numpy.arange</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">numpy.arange(start, stop, step, dtype)</span><br></pre></td></tr></table></figure>
<h3 id="numpy-linspace">numpy.linspace</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">np.linspace(start, stop, num=<span class="number">50</span>, endpoint=<span class="literal">True</span>, retstep=<span class="literal">False</span>, dtype=<span class="literal">None</span>)</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>参数</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>start</code></td>
<td>序列的起始值</td>
</tr>
<tr>
<td><code>stop</code></td>
<td>序列的终止值，如果<code>endpoint</code>为<code>true</code>，该值包含于数列中</td>
</tr>
<tr>
<td><code>num</code></td>
<td>要生成的等步长的样本数量，默认为<code>50</code></td>
</tr>
<tr>
<td><code>endpoint</code></td>
<td>该值为 <code>true</code> 时，数列中包含<code>stop</code>值，反之不包含，默认是True。</td>
</tr>
<tr>
<td><code>retstep</code></td>
<td>如果为 True 时，生成的数组中会显示间距，反之不显示。</td>
</tr>
<tr>
<td><code>dtype</code></td>
<td><code>ndarray</code> 的数据类型</td>
</tr>
</tbody>
</table>
<h3 id="numpy-logspace">numpy.logspace</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">np.logspace(start, stop, num=<span class="number">50</span>, endpoint=<span class="literal">True</span>, base=<span class="number">10.0</span>, dtype=<span class="literal">None</span>)</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>参数</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>start</code></td>
<td>序列的起始值为：base ** start</td>
</tr>
<tr>
<td><code>stop</code></td>
<td>序列的终止值为：base ** stop。如果<code>endpoint</code>为<code>true</code>，该值包含于数列中</td>
</tr>
<tr>
<td><code>num</code></td>
<td>要生成的等步长的样本数量，默认为<code>50</code></td>
</tr>
<tr>
<td><code>endpoint</code></td>
<td>该值为 <code>true</code> 时，数列中中包含<code>stop</code>值，反之不包含，默认是True。</td>
</tr>
<tr>
<td><code>base</code></td>
<td>对数 log 的底数。</td>
</tr>
<tr>
<td><code>dtype</code></td>
<td><code>ndarray</code> 的数据类型</td>
</tr>
</tbody>
</table>
<h1 id="切片和索引">切片和索引</h1>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">a = np.arange(<span class="number">10</span>)</span><br><span class="line">s = <span class="built_in">slice</span>(<span class="number">2</span>,<span class="number">7</span>,<span class="number">2</span>)   <span class="comment"># 从索引 2 开始到索引 7 停止，间隔为2</span></span><br><span class="line"><span class="built_in">print</span> (a[s])    </span><br><span class="line">/*</span><br><span class="line">[<span class="number">2</span>  <span class="number">4</span>  <span class="number">6</span>]</span><br><span class="line">*/</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">a = np.arange(<span class="number">10</span>)  </span><br><span class="line">b = a[<span class="number">2</span>:<span class="number">7</span>:<span class="number">2</span>]   <span class="comment"># 从索引 2 开始到索引 7 停止，间隔为 2</span></span><br><span class="line"><span class="built_in">print</span>(b)</span><br></pre></td></tr></table></figure>
<p>切片还可以包括省略号 …，来使选择元组的长度与数组的维度相同。 如果在行位置使用省略号，它将返回包含行中元素的 ndarray。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">a = np.array([[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>],[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]])  </span><br><span class="line"><span class="built_in">print</span> (a[...,<span class="number">1</span>])   <span class="comment"># 第2列元素</span></span><br><span class="line"><span class="built_in">print</span> (a[<span class="number">1</span>,...])   <span class="comment"># 第2行元素</span></span><br><span class="line"><span class="built_in">print</span> (a[...,<span class="number">1</span>:])  <span class="comment"># 第2列及剩下的所有元素</span></span><br></pre></td></tr></table></figure>
<h1 id="高级索引">高级索引</h1>
<h2 id="整数数组索引">整数数组索引</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np </span><br><span class="line"> <span class="comment">#以下实例获取数组中 (0,0)，(1,1) 和 (2,0) 位置处的元素。</span></span><br><span class="line">x = np.array([[<span class="number">1</span>,  <span class="number">2</span>],  [<span class="number">3</span>,  <span class="number">4</span>],  [<span class="number">5</span>,  <span class="number">6</span>]]) </span><br><span class="line">y = x[[<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>],  [<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>]]  </span><br><span class="line"><span class="built_in">print</span> (y)</span><br></pre></td></tr></table></figure>
<h2 id="布尔索引">布尔索引</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np </span><br><span class="line"></span><br><span class="line">x = np.array([[  <span class="number">0</span>,  <span class="number">1</span>,  <span class="number">2</span>],[  <span class="number">3</span>,  <span class="number">4</span>,  <span class="number">5</span>],[  <span class="number">6</span>,  <span class="number">7</span>,  <span class="number">8</span>],[  <span class="number">9</span>,  <span class="number">10</span>,  <span class="number">11</span>]])  </span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;我们的数组是：&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span> (x)</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"><span class="comment"># 现在我们会打印出大于 5 的元素  </span></span><br><span class="line"><span class="built_in">print</span>  (<span class="string">&#x27;大于 5 的元素是：&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span> (x[x &gt;  <span class="number">5</span>])</span><br></pre></td></tr></table></figure>
<h2 id="花式索引">花式索引</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">mport numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">x = np.arange(<span class="number">9</span>)</span><br><span class="line"><span class="built_in">print</span>(x)</span><br><span class="line"><span class="comment"># 一维数组读取指定下标对应的元素</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;-------读取下标对应的元素-------&quot;</span>)</span><br><span class="line">x2 = x[[<span class="number">0</span>, <span class="number">6</span>]] <span class="comment"># 使用花式索引</span></span><br><span class="line"><span class="built_in">print</span>(x2)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(x2[<span class="number">0</span>])</span><br><span class="line"><span class="built_in">print</span>(x2[<span class="number">1</span>])</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np </span><br><span class="line"></span><br><span class="line">x=np.arange(<span class="number">32</span>).reshape((<span class="number">8</span>,<span class="number">4</span>))</span><br><span class="line"><span class="built_in">print</span>(x)</span><br><span class="line"><span class="comment"># 二维数组读取指定下标对应的行</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;-------读取下标对应的行-------&quot;</span>)</span><br><span class="line"><span class="built_in">print</span> (x[[<span class="number">4</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">7</span>]])</span><br></pre></td></tr></table></figure>
<h1 id="广播-Broadcast">广播(Broadcast)</h1>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np </span><br><span class="line"></span><br><span class="line">a = np.array([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]) </span><br><span class="line">b = np.array([<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>,<span class="number">40</span>]) </span><br><span class="line">c = a * b </span><br><span class="line"><span class="built_in">print</span> (c)    </span><br><span class="line">/*</span><br><span class="line">[ <span class="number">10</span>  <span class="number">40</span>  <span class="number">90</span> <span class="number">160</span>]</span><br><span class="line">*/</span><br></pre></td></tr></table></figure>
<h1 id="迭代数组">迭代数组</h1>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">a = np.arange(<span class="number">6</span>).reshape(<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;原始数组是：&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span> (a)</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;迭代输出元素：&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> np.nditer(a):</span><br><span class="line">    <span class="built_in">print</span> (x, end=<span class="string">&quot;, &quot;</span> )</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;\n&#x27;</span>)     </span><br><span class="line">/*</span><br><span class="line">原始数组是：</span><br><span class="line">[[<span class="number">0</span> <span class="number">1</span> <span class="number">2</span>]</span><br><span class="line"> [<span class="number">3</span> <span class="number">4</span> <span class="number">5</span>]]</span><br><span class="line">迭代输出元素：</span><br><span class="line"><span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, </span><br><span class="line">*/</span><br></pre></td></tr></table></figure>
<h3 id="控制遍历顺序">控制遍历顺序</h3>
<ul>
<li><code>for x in np.nditer(a, order='F'):</code>Fortran order，即是列序优先；</li>
<li><code>for x in np.nditer(a.T, order='C'):</code>C order，即是行序优先；</li>
</ul>
<h1 id="数组操作">数组操作</h1>
<table>
<thead>
<tr>
<th>函数</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>reshape</code></td>
<td>不改变数据的条件下修改形状</td>
</tr>
<tr>
<td><code>flat</code></td>
<td>数组元素迭代器</td>
</tr>
<tr>
<td><code>flatten</code></td>
<td>返回一份数组拷贝，对拷贝所做的修改不会影响原始数组</td>
</tr>
<tr>
<td><code>ravel</code></td>
<td>返回展开数组</td>
</tr>
</tbody>
</table>
<h2 id="修改数组形状">修改数组形状</h2>
<h3 id="numpy-reshape">numpy.reshape</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">numpy.reshape(arr, newshape, order=<span class="string">&#x27;C&#x27;</span>)</span><br></pre></td></tr></table></figure>
<h3 id="numpy-ndarray-flat">numpy.ndarray.flat</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">a = np.arange(<span class="number">9</span>).reshape(<span class="number">3</span>,<span class="number">3</span>) </span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;原始数组：&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> row <span class="keyword">in</span> a:</span><br><span class="line">    <span class="built_in">print</span> (row)</span><br><span class="line"></span><br><span class="line"><span class="comment">#对数组中每个元素都进行处理，可以使用flat属性，该属性是一个数组元素迭代器：</span></span><br><span class="line"><span class="built_in">print</span> (<span class="string">&#x27;迭代后的数组：&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> element <span class="keyword">in</span> a.flat:</span><br><span class="line">    <span class="built_in">print</span> (element)</span><br></pre></td></tr></table></figure>
<h3 id="numpy-ndarray-flatten">numpy.ndarray.flatten</h3>
<p>numpy.ndarray.flatten 返回一份数组拷贝，对拷贝所做的修改不会影响原始数组，格式如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ndarray.flatten(order=<span class="string">&#x27;C&#x27;</span>)</span><br></pre></td></tr></table></figure>
<h3 id="numpy-ravel">numpy.ravel</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">numpy.ravel(a, order=<span class="string">&#x27;C&#x27;</span>) </span><br></pre></td></tr></table></figure>
<h2 id="翻转数组">翻转数组</h2>
<table>
<thead>
<tr>
<th>函数</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>transpose</code></td>
<td>对换数组的维度</td>
</tr>
<tr>
<td><code>ndarray.T</code></td>
<td>和 <code>self.transpose()</code> 相同</td>
</tr>
<tr>
<td><code>rollaxis</code></td>
<td>向后滚动指定的轴</td>
</tr>
<tr>
<td><code>swapaxes</code></td>
<td>对换数组的两个轴</td>
</tr>
</tbody>
</table>
<h3 id="numpy-transpose">numpy.transpose</h3>
<p>numpy.transpose 函数用于对换数组的维度，格式如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">numpy.transpose(arr, axes)</span><br></pre></td></tr></table></figure>
<h3 id="numpy-rollaxis">numpy.rollaxis</h3>
<p>numpy.rollaxis 函数向后滚动特定的轴到一个特定位置，格式如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">numpy.rollaxis(arr, axis, start)</span><br></pre></td></tr></table></figure>
<h3 id="numpy-swapaxes">numpy.swapaxes</h3>
<p>numpy.swapaxes 函数用于交换数组的两个轴，格式如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">numpy.swapaxes(arr, axis1, axis2)</span><br></pre></td></tr></table></figure>
<h1 id="随机ndarray数组">随机ndarray数组</h1>
<p>创建随机ndarray数组主要包含设置随机种子、均匀分布和正态分布三部分内容</p>
<ul>
<li><strong>设置随机数种子</strong></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 可以多次运行，观察程序输出结果是否一致</span></span><br><span class="line"><span class="comment"># 如果不设置随机数种子，观察多次运行输出结果是否一致</span></span><br><span class="line">np.random.seed(<span class="number">10</span>)</span><br><span class="line">a = np.random.rand(<span class="number">3</span>, <span class="number">3</span>)</span><br></pre></td></tr></table></figure>
<ul>
<li><strong>均匀分布</strong></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 生成均匀分布随机数，随机数取值范围在[0, 1)之间</span></span><br><span class="line">a = np.random.rand(<span class="number">3</span>, <span class="number">3</span>)</span><br></pre></td></tr></table></figure>
<h1 id="生成均匀分布随机数，指定随机数取值范围和数组形状">生成均匀分布随机数，指定随机数取值范围和数组形状</h1>
<p>a = np.random.uniform(low = -1.0, high = 1.0, size=(2,2))</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">```</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">- **正态分布**</span><br><span class="line"></span><br><span class="line">```python</span><br><span class="line"># 生成标准正态分布随机数</span><br><span class="line">a = np.random.randn(3, 3)</span><br><span class="line">a = np.random.normal(loc = 1.0, scale = 1.0, size = (3,3))</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>OpenCV:图像处理</title>
    <url>/2022/09/12/OpenCV-%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86/</url>
    <content><![CDATA[<h1 id="颜色变换cvtColor">颜色变换cvtColor</h1>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line">img=cv2.imread(<span class="string">&#x27;pic.png&#x27;</span>)</span><br><span class="line">gray_img=cv2.cvtColor(img,cv2.COLOR_BGR2GRAY)</span><br><span class="line">hsv_img=cv2.cvtColor(img,cv2.COLOR_BGR2HSV)</span><br><span class="line">rgb=cv2.cvtColor(img,cv2.COLOR_BGR2RGB)</span><br><span class="line">cv2.imshow(<span class="string">&quot;img&quot;</span>,img)</span><br><span class="line">cv2.imshow(<span class="string">&quot;gray&quot;</span>,gray_img)</span><br><span class="line">cv2.imshow(<span class="string">&quot;hsv&quot;</span>,hsv_img)</span><br><span class="line">cv2.imshow(<span class="string">&quot;RGB&quot;</span>,rgb)</span><br><span class="line">cv2.waitKey(<span class="number">0</span>)</span><br><span class="line">cv2.destroyWindow()</span><br></pre></td></tr></table></figure>
<p><img src="https://s2.loli.net/2022/09/12/i3HnX974xZhBYuT.png" alt=""></p>
<h1 id="画基本图形">画基本图形</h1>
<h2 id="画矩形">画矩形</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">rectangle</span>(<span class="params">img, pt1, pt2, color, thickness=<span class="literal">None</span>, lineType=<span class="literal">None</span>, shift=<span class="literal">None</span></span>):</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line">img=cv2.imread(<span class="string">&#x27;pic.png&#x27;</span>)</span><br><span class="line">img=cv2.rectangle(img,(<span class="number">100</span>,<span class="number">100</span>),(<span class="number">300</span>,<span class="number">400</span>),(<span class="number">255</span>,<span class="number">14</span>,<span class="number">65</span>),<span class="number">6</span>)</span><br><span class="line">cv2.imshow(<span class="string">&quot;1&quot;</span>,img)</span><br><span class="line">cv2.waitKey(<span class="number">0</span>)</span><br><span class="line">cv2.destroyWindow()</span><br></pre></td></tr></table></figure>
<h2 id="画圆">画圆</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">circle</span>(<span class="params">img, center, radius, color, thickness=<span class="literal">None</span>, lineType=<span class="literal">None</span>, shift=<span class="literal">None</span></span>):</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line">img=cv2.imread(<span class="string">&#x27;pic.png&#x27;</span>)</span><br><span class="line">img=cv2.circle(img,(<span class="number">300</span>,<span class="number">200</span>),<span class="number">100</span>,(<span class="number">155</span>,<span class="number">64</span>,<span class="number">240</span>),-<span class="number">1</span>)</span><br><span class="line">cv2.imshow(<span class="string">&quot;1&quot;</span>,img)</span><br><span class="line">cv2.waitKey(<span class="number">0</span>)</span><br><span class="line">cv2.destroyWindow()</span><br></pre></td></tr></table></figure>
<h2 id="画椭圆">画椭圆</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">ellipse</span>(<span class="params">img, center, axes, angle, startAngle, endAngle, color, thickness=<span class="literal">None</span>, lineType=<span class="literal">None</span>, shift=<span class="literal">None</span></span>):</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line">img=cv2.imread(<span class="string">&#x27;pic.png&#x27;</span>)</span><br><span class="line">img=cv2.ellipse(img,(<span class="number">100</span>,<span class="number">200</span>),(<span class="number">50</span>,<span class="number">20</span>),<span class="number">0</span>,<span class="number">0</span>,<span class="number">360</span>,(<span class="number">255</span>,<span class="number">0</span>,<span class="number">0</span>),-<span class="number">1</span>,<span class="number">8</span>)</span><br><span class="line">cv2.imshow(<span class="string">&quot;1&quot;</span>,img)</span><br><span class="line">cv2.waitKey(<span class="number">0</span>)</span><br><span class="line">cv2.destroyWindow()</span><br></pre></td></tr></table></figure>
<h2 id="画线段">画线段</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">line</span>(<span class="params">img, pt1, pt2, color, thickness=<span class="literal">None</span>, lineType=<span class="literal">None</span>, shift=<span class="literal">None</span></span>):</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">img=cv2.imread(<span class="string">&#x27;pic.png&#x27;</span>)</span><br><span class="line">Pts=np.array([[<span class="number">10</span>,<span class="number">5</span>],[<span class="number">20</span>,<span class="number">30</span>],[<span class="number">70</span>,<span class="number">20</span>],[<span class="number">50</span>,<span class="number">10</span>]],np.int32)</span><br><span class="line">img=cv2.line(img,[<span class="number">0</span>,<span class="number">0</span>],[<span class="number">300</span>,<span class="number">200</span>],(<span class="number">0</span>,<span class="number">0</span>,<span class="number">255</span>),<span class="number">2</span>)</span><br><span class="line">cv2.imshow(<span class="string">&quot;1&quot;</span>,img)</span><br><span class="line">cv2.waitKey(<span class="number">0</span>)</span><br><span class="line">cv2.destroyWindow()</span><br></pre></td></tr></table></figure>
<h1 id="画多边形">画多边形</h1>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">polylines</span>(<span class="params">img, pts, isClosed, color, thickness=<span class="literal">None</span>, lineType=<span class="literal">None</span>, shift=<span class="literal">None</span></span>):</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">img=cv2.imread(<span class="string">&#x27;pic.png&#x27;</span>)</span><br><span class="line">Pts=np.array([[<span class="number">10</span>,<span class="number">5</span>],[<span class="number">20</span>,<span class="number">30</span>],[<span class="number">70</span>,<span class="number">20</span>],[<span class="number">50</span>,<span class="number">10</span>]],np.int32)</span><br><span class="line">img=cv2.polylines(img,[Pts],<span class="literal">True</span>,(<span class="number">255</span>,<span class="number">0</span>,<span class="number">0</span>),<span class="number">6</span>)</span><br><span class="line">cv2.imshow(<span class="string">&quot;1&quot;</span>,img)</span><br><span class="line">cv2.waitKey(<span class="number">0</span>)</span><br><span class="line">cv2.destroyWindow()</span><br></pre></td></tr></table></figure>
<h2 id="填充多边形">填充多边形</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">fillPoly</span>(<span class="params">img, pts, color, lineType=<span class="literal">None</span>, shift=<span class="literal">None</span>, offset=<span class="literal">None</span></span>): </span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">img=cv2.imread(<span class="string">&#x27;pic.png&#x27;</span>)</span><br><span class="line">Pts=np.array([[<span class="number">10</span>,<span class="number">5</span>],[<span class="number">20</span>,<span class="number">30</span>],[<span class="number">70</span>,<span class="number">20</span>],[<span class="number">50</span>,<span class="number">10</span>]],np.int32)</span><br><span class="line">img=cv2.fillPoly(img,[Pts],(<span class="number">255</span>,<span class="number">0</span>,<span class="number">0</span>))</span><br><span class="line">cv2.imshow(<span class="string">&quot;1&quot;</span>,img)</span><br><span class="line">cv2.waitKey(<span class="number">0</span>)</span><br><span class="line">cv2.destroyWindow()</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>OpenCV</tag>
      </tags>
  </entry>
  <entry>
    <title>OpenCV:简单实现人脸识别</title>
    <url>/2022/09/06/OpenCV-Python/</url>
    <content><![CDATA[<h1 id="安装-2">安装</h1>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install numpy</span><br><span class="line">pip install opencv-python</span><br><span class="line">pip install opencv-contrib-python</span><br></pre></td></tr></table></figure>
<hr>
<h1 id="OpenCV主要模块">OpenCV主要模块</h1>
<blockquote>
<h3 id="core">core</h3>
<p>核心功能模块。该模块主要包含 OpenCV库的基础结构以及基本操作，例如OpenCV基础数据结构、绘图函数、数组操作相关函数、动态数据结构等calib3d：<br>
这个模块名称是有 calibration（校准）和 3D 两个术语的缩写组合而成。包含了相机标定与立体视觉等功能，例如物体位姿估计、三维重建、摄像头标定等</p>
<h3 id="dnn">dnn</h3>
<p>深度学习模块。该模块是 OpenCV4版的一个特色，主要包括：构建神经网络、加载序列化网络模型等。但这一模块目前仅适用与正向传递计算（测试网络），原则上不支持反向计算（训练网络）。</p>
<h3 id="feature2d">feature2d</h3>
<p>该模块是由 feature（特征）和 2D 两个术语的缩写组合而成的，其功能主要为处理图像特征点，例如特征检测、描述、匹配等</p>
<h3 id="flann">flann</h3>
<p>快速近似最邻近库（Fast Library for Approximate Nearest Neighbors）。该模块是高维的近似近邻快速搜索算法库，主要包含快速近似近邻搜索、聚类等</p>
<h3 id="gapi">gapi</h3>
<p>该模块是 OpenCV4.0 中新增模块，旨在加速常规的图像处理。与其他模块相比，这个模块主要充当框架，而不是某些特定的计算机视觉算法</p>
<h3 id="highgui">highgui</h3>
<p>高层 GUI，包含创建和操作显示图像的窗口、处理鼠标事件及键盘命令、提高图形交互可视化界面等</p>
<h3 id="imgcodecs">imgcodecs</h3>
<p>图像文件读取与保存模块，主要用于图像文件读取与保存</p>
<h3 id="imgproc">imgproc</h3>
<p>该模块名称是由 image（图像）和 process（处理）两个组合而成。是重要的图像处理模块，主要包含：图像滤波、几何变换、直方图、特征检测、目标检测等</p>
<h3 id="ml">ml</h3>
<p>机器学习模块，主要包括：统计分类、回归、数据聚类等</p>
<h3 id="objdetect">objdetect</h3>
<p>目标检测模块，主要用于图像的目标检测，如检测 Haar 特征</p>
<h3 id="photo">photo</h3>
<p>计算摄像模块，只要包含图像修复、去燥等</p>
<h3 id="stitching">stitching</h3>
<p>图像拼接模块，主要包含：特征点寻找与匹配图像、估计旋转、自动校准、接缝估计等图像拼接过程的相关内容</p>
<h3 id="video">video</h3>
<p>视频分析模块，主要包含：运动估计、背景分离、对象跟踪等视频处理等</p>
<h3 id="videoio">videoio</h3>
<p>视频输入/输出模块，主要用于读取、写入视频 或者图像序列</p>
</blockquote>
<hr>
<h1 id="图片基本操作">图片基本操作</h1>
<h2 id="摄像头采集图片">摄像头采集图片</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 引入OpenCV库</span></span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用摄像头进行拍照 VideoCapture(0)0为默认摄像头</span></span><br><span class="line">cap = cv2.VideoCapture(<span class="number">0</span>)</span><br><span class="line"><span class="comment"># 获取一帧图片</span></span><br><span class="line"><span class="comment"># 如果捕获成功，代码中ret值为真，img为捕获的图像。</span></span><br><span class="line">ret, img = cap.read()</span><br><span class="line"><span class="comment"># 释放捕获对象</span></span><br><span class="line">cap.release()</span><br></pre></td></tr></table></figure>
<h2 id="读取图片">读取图片</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cv2.imread(path, 标记)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>第二个参数指定图片被读取的方式：</p>
<ul>
<li><code>cv2.IMREAD_COLOR</code> : 读入彩色图像，默认模式；</li>
<li><code>cv2.IMREAD_GRAYSCALE</code> : 以灰度模式读入图像；</li>
<li><code>cv2.IMREAD_UNCHANGED</code> : 加载图像包含<code>alpha</code>通道。</li>
</ul>
<p>使用数字简约表示以上三种标记，分别为 <code>1</code>， <code>0</code>或<code>-1</code>。</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line">image_path = <span class="string">&quot;images.jpg&quot;</span></span><br><span class="line">img = cv2.imread(image_path,<span class="number">0</span>)</span><br></pre></td></tr></table></figure>
<h2 id="显示图像">显示图像</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line">cap=cv2.VideoCapture(<span class="number">0</span>)</span><br><span class="line">ret,img=cap.read()    </span><br><span class="line"><span class="comment">## 如果捕获成功，代码中ret值为真，img为捕获的图像。</span></span><br><span class="line">cap.release()</span><br><span class="line"><span class="keyword">if</span> ret:</span><br><span class="line">    cv2.imshow(<span class="string">&#x27;demo&#x27;</span>,img)</span><br><span class="line">    cv2.waitKey(<span class="number">0</span>)</span><br><span class="line">    cv2.destroyAllWindows()</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;错误&quot;</span>)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">imshow(窗口名称, 图片对象) </span><br></pre></td></tr></table></figure>
<h2 id="保存图片">保存图片</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line">cap=cv2.VideoCapture(<span class="number">0</span>)</span><br><span class="line">ret,img=cap.read()</span><br><span class="line">cap.release()</span><br><span class="line"><span class="keyword">if</span> ret:</span><br><span class="line">    cv2.imshow(<span class="string">&#x27;demo&#x27;</span>,img)</span><br><span class="line">    cv2.imwrite(<span class="string">&#x27;2.png&#x27;</span>, img)</span><br><span class="line">    cv2.waitKey(<span class="number">0</span>)</span><br><span class="line">    cv2.destroyAllWindows()</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;错误&quot;</span>)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line">cap=cv2.VideoCapture(<span class="number">0</span>)</span><br><span class="line">ret,img=cap.read()</span><br><span class="line">cap.release()</span><br><span class="line"><span class="keyword">if</span> ret:</span><br><span class="line">    cv2.imshow(<span class="string">&#x27;demo&#x27;</span>,img)</span><br><span class="line">    cv2.imwrite(<span class="string">&#x27;2.png&#x27;</span>, img)</span><br><span class="line">    cv2.waitKey(<span class="number">0</span>)</span><br><span class="line">    cv2.destroyAllWindows()</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;错误&quot;</span>)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cv2.imwrite(path, 图片对象)</span><br></pre></td></tr></table></figure>
<h2 id="色彩空间">色彩空间</h2>
<blockquote>
<p><code>色彩空间（Color space）</code>是对色彩的组织方式，是坐标系统和子空间的阐述，位于系统的每种颜色都有单个点表示。</p>
</blockquote>
<h3 id="RGB">RGB</h3>
<p><code>OpenCV</code>中默认的色彩空间是<code>BGR</code>。<code>BGR</code>与<code>RGB</code>的区别只是三个颜色信道的位置发生了变化，实际上原理相同。</p>
<p><img src="https://s2.loli.net/2022/10/09/VDJc9HUibwA4XGy.png" alt=""></p>
<h3 id="HSV与HSL色彩空间">HSV与HSL色彩空间</h3>
<blockquote>
<p>为了更好的数字化处理颜色，提出了<code>HSV</code>，<code>HSL</code>两个色彩空间。</p>
<p><code>HSV</code>色彩空间中，<code>H</code>是<code>色调(hue)</code>，<code>S</code>是<code>饱和度(saturation)</code>， <code>V</code>是<code>明度(value)</code>。</p>
<p><code>HSL</code>色彩空间中，<code>H</code>是<code>色调(hue)</code>，<code>S</code>是<code>饱和度(saturation)</code>，<code>L</code>是<code>亮度(lightness)</code>。</p>
</blockquote>
<h3 id="灰度空间">灰度空间</h3>
<blockquote>
<p>在<code>OpenCV</code>的灰度空间中，和一般的色彩空间相同，每一个颜色都有三个量，但是只有第一个亮度有值，所以表示为<code>（亮度，0，0）</code>。</p>
<p>其中，亮度是根据如下灰度公式计算而得：<code>Gray = R*0.299 + G*0.587 + B*0.114</code></p>
</blockquote>
<h3 id="色彩空间转换">色彩空间转换</h3>
<p>经常用到的是以下两种：</p>
<ol>
<li><code>BGR</code>空间到<code>Gray</code>空间 的转换；</li>
<li><code>BGR</code>空间到<code>HSV</code>空间 的转换。</li>
</ol>
<p>使用的函数为：<code>cv2.cvtColor()</code>。</p>
<p>它的函数声明为：</p>
<ol>
<li><code>cv2.cvtColor(图片对象，转换类型)</code></li>
</ol>
<blockquote>
<p>对于<code>BGR</code>到<code>Gray</code>的转换，使<code>cv2.COLOR_BGR2GRAY</code>类型。</p>
<p>同样的，对于<code>BGR</code>到<code>HSV</code>的转换，使用<code>cv2.COLOR_BGR2HSV</code>类型。</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2, requests</span><br><span class="line">r=requests.get(<span class="string">&#x27;https://raw.githubusercontent.com/MrHarsh10/ImageHosting-/main/img/202209062216524.jpg&#x27;</span>)</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;pic.jpg&#x27;</span>,<span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(r.content)</span><br><span class="line">img=cv2.imread(<span class="string">&#x27;pic.jpg&#x27;</span>,<span class="number">1</span>)</span><br><span class="line">img2=cv2.cvtColor(img,cv2.COLOR_BGR2GRAY)</span><br><span class="line">cv2.imshow(<span class="string">&#x27;处理前&#x27;</span>,img)</span><br><span class="line">cv2.imshow(<span class="string">&#x27;处理后&#x27;</span>,img2)</span><br><span class="line">cv2.waitKey(<span class="number">0</span>)</span><br><span class="line">cv2.destroyAllWindows()</span><br><span class="line">cv2.imwrite(<span class="string">&#x27;test.jpg&#x27;</span>,img2) </span><br></pre></td></tr></table></figure>
<hr>
<h1 id="人脸识别应用">人脸识别应用</h1>
<blockquote>
<h3 id="类Harr特征">类Harr特征</h3>
<p>图像中的特征通常是指，图片的像素点经过一系列的运算之后得到的结果，这些结果可能是向量、矩阵和多维数据等等。类<code>Harr</code>特征是一种反映图像的灰度变化的，像素分模块求差值的一种特征。</p>
<h4 id="Harr特征类别">Harr特征类别</h4>
<p>可分为三类：边缘特征、线性特征、中心特征和对角线特征</p>
<h3 id="边缘特征">边缘特征</h3>
<p><img src="https://s2.loli.net/2022/10/09/5ZzpSNW6wyE9hP2.png" alt=""></p>
<h3 id="线性特征">线性特征</h3>
<p><img src="https://s2.loli.net/2022/10/09/5ZzpSNW6wyE9hP2.png" alt=""></p>
<h3 id="中心特征和对角线特征">中心特征和对角线特征</h3>
<p><img src="https://s2.loli.net/2022/10/09/OjVZcJx7BuULlsN.png" alt=""></p>
</blockquote>
<h3 id="使用Harr分类器检测人脸">使用Harr分类器检测人脸</h3>
<p><code>OpenCV</code> 中的人脸训练模型格式为 <code>XML</code>，可以从 <a href="https://github.com/opencv/opencv/tree/master/data/haarcascades">https://github.com/opencv/opencv/tree/master/data/haarcascades</a> 。在此我们使用<code>Harrcascade_frontalface_default.xml</code>模型检测人脸。</p>
<p>声明分类器：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">CascadeClassifier(path)</span><br></pre></td></tr></table></figure>
<p>调用分类函数：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">detectMultiScale(img,scaleFactor, minNeighbors, minSize)`</span><br></pre></td></tr></table></figure>
<blockquote>
<p>参数说明：</p>
<ol>
<li>图片对象：待识别图片对象；</li>
<li><code>scaleFactor</code>：图像缩放比例；</li>
<li><code>minNeighbors</code>：对特征检测点周边多少有效点同时检测，这样可避免因选取的特征检测点太小而导致遗漏；</li>
<li><code>minSize</code>：特征检测点的最小尺寸，可选参数。</li>
</ol>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line">img=cv2.imread(<span class="string">&#x27;1.png&#x27;</span>,<span class="number">1</span>)</span><br><span class="line">grayimg=cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)</span><br><span class="line">face_cascade = cv2.CascadeClassifier(<span class="string">&#x27;haarcascade_frontalface_default.xml&#x27;</span>)</span><br><span class="line">faces = face_cascade.detectMultiScale(grayimg, <span class="number">1.2</span>, <span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (x,y,w,h) <span class="keyword">in</span> faces:</span><br><span class="line">    <span class="built_in">print</span>((x,y,w,h))</span><br><span class="line">    cv2.rectangle(img, (x, y), (x + w, y + h), (<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>), <span class="number">6</span>)</span><br><span class="line">cv2.imshow(<span class="string">&#x27;demo&#x27;</span>,img)</span><br><span class="line">cv2.imwrite(<span class="string">&#x27;out.jpg&#x27;</span>,img)</span><br><span class="line">cv2.waitKey(<span class="number">0</span>)</span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure>
<p><img src="https://s2.loli.net/2022/10/09/kxtZTsWFJM5nL63.png" alt=""></p>
<p><img src="https://s2.loli.net/2022/10/09/UNlsSDQKXyLdf8a.jpg" alt=""></p>
<h1 id="摄像头实时识别">摄像头实时识别</h1>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">capture = cv2.VideoCapture(<span class="number">0</span>)</span><br><span class="line"><span class="keyword">if</span> capture.isOpened():</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        ret, frame = capture.read()</span><br><span class="line">        grayimg = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)</span><br><span class="line">        face_cascade = cv2.CascadeClassifier(<span class="string">&#x27;haarcascade_frontalface_default.xml&#x27;</span>)</span><br><span class="line">        faces = face_cascade.detectMultiScale(grayimg, <span class="number">1.2</span>, <span class="number">5</span>)</span><br><span class="line">        <span class="keyword">for</span> (x, y, w, h) <span class="keyword">in</span> faces:</span><br><span class="line">            cv2.rectangle(frame, (x, y), (x + w, y + h), (<span class="number">0</span>, <span class="number">0</span>, <span class="number">255</span>), <span class="number">2</span>)</span><br><span class="line">        cv2.imshow(<span class="string">&#x27;frame&#x27;</span>, frame)</span><br><span class="line">        <span class="keyword">if</span> cv2.waitKey(<span class="number">1</span>) == <span class="built_in">ord</span>(<span class="string">&#x27;q&#x27;</span>):</span><br><span class="line">            capture.release()</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>OpenCV</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>OpenCV</tag>
      </tags>
  </entry>
  <entry>
    <title>OpenCV:数组矩阵</title>
    <url>/2022/09/11/OpenCV-%E6%95%B0%E7%BB%84%E7%9F%A9%E9%98%B5/</url>
    <content><![CDATA[<h1 id="ndarray对象">ndarray对象</h1>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">array</span>(<span class="params">p_object, dtype=<span class="literal">None</span>, *args, **kwargs</span>):</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a=np.array([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],ndmin=<span class="number">2</span>)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a=np.array([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],dtype=<span class="built_in">complex</span>)</span><br></pre></td></tr></table></figure>
<h1 id="NumPy数据类型">NumPy数据类型</h1>
<table>
<thead>
<tr>
<th>名称</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>bool_</td>
<td>布尔型数据类型（True 或者 False）</td>
</tr>
<tr>
<td>int_</td>
<td>默认的整数类型（类似于 C 语言中的 long，int32 或 int64）</td>
</tr>
<tr>
<td>intc</td>
<td>与 C 的 int 类型一样，一般是 int32 或 int 64</td>
</tr>
<tr>
<td>intp</td>
<td>用于索引的整数类型（类似于 C 的 ssize_t，一般情况下仍然是 int32 或 int64）</td>
</tr>
<tr>
<td>int8</td>
<td>字节（-128 to 127）</td>
</tr>
<tr>
<td>int16</td>
<td>整数（-32768 to 32767）</td>
</tr>
<tr>
<td>int32</td>
<td>整数（-2147483648 to 2147483647）</td>
</tr>
<tr>
<td>int64</td>
<td>整数（-9223372036854775808 to 9223372036854775807）</td>
</tr>
<tr>
<td>uint8</td>
<td>无符号整数（0 to 255）</td>
</tr>
<tr>
<td>uint16</td>
<td>无符号整数（0 to 65535）</td>
</tr>
<tr>
<td>uint32</td>
<td>无符号整数（0 to 4294967295）</td>
</tr>
<tr>
<td>uint64</td>
<td>无符号整数（0 to 18446744073709551615）</td>
</tr>
<tr>
<td>float_</td>
<td>float64 类型的简写</td>
</tr>
<tr>
<td>float16</td>
<td>半精度浮点数，包括：1 个符号位，5 个指数位，10 个尾数位</td>
</tr>
<tr>
<td>float32</td>
<td>单精度浮点数，包括：1 个符号位，8 个指数位，23 个尾数位</td>
</tr>
<tr>
<td>float64</td>
<td>双精度浮点数，包括：1 个符号位，11 个指数位，52 个尾数位</td>
</tr>
<tr>
<td>complex_</td>
<td>complex128 类型的简写，即 128 位复数</td>
</tr>
<tr>
<td>complex64</td>
<td>复数，表示双 32 位浮点数（实数部分和虚数部分）</td>
</tr>
<tr>
<td>complex128</td>
<td>复数，表示双 64 位浮点数（实数部分和虚数部分）</td>
</tr>
</tbody>
</table>
<p>numpy 的数值类型实际上是 dtype 对象的实例，并对应唯一的字符，包括 np.bool_，np.int32，np.float32，等等。</p>
<h1 id="新建数组">新建数组</h1>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x=np.empty([<span class="number">3</span>],dtype=<span class="built_in">int</span>)</span><br><span class="line"><span class="built_in">print</span>(x)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>为随机值，未初始化</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x=np.zeros([<span class="number">3</span>,<span class="number">2</span>],dtype=<span class="built_in">int</span>)</span><br><span class="line"><span class="built_in">print</span>(x)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x=np.ones([<span class="number">3</span>,<span class="number">2</span>],dtype=<span class="built_in">int</span>)</span><br><span class="line"><span class="built_in">print</span>(x)</span><br></pre></td></tr></table></figure>
<h1 id="从已有的数组创建数组-2">从已有的数组创建数组</h1>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">x=[[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">2</span>,<span class="number">3</span>,<span class="number">2</span>]]</span><br><span class="line">a=np.asarray(x)</span><br><span class="line"><span class="built_in">print</span>(a.shape)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="built_in">str</span>=<span class="string">b&#x27;hello&#x27;</span></span><br><span class="line">a=np.frombuffer(<span class="built_in">str</span>,dtype=<span class="string">&#x27;S1&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(a)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="built_in">list</span>=<span class="built_in">range</span>(<span class="number">20</span>)</span><br><span class="line">it=<span class="built_in">iter</span>(<span class="built_in">list</span>)</span><br><span class="line">x=np.fromiter(it,dtype=<span class="built_in">int</span>)</span><br><span class="line"><span class="built_in">print</span>(x)</span><br></pre></td></tr></table></figure>
<h1 id="从数值范围创建数组-2">从数值范围创建数组</h1>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x=np.arange(<span class="number">12</span>,dtype=<span class="built_in">float</span>)</span><br><span class="line"><span class="built_in">print</span>(x)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">x=np.linspace(<span class="number">0</span>,<span class="number">9</span>,<span class="number">10</span>,dtype=<span class="built_in">int</span>)</span><br><span class="line"><span class="built_in">print</span>(x)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">x=np.logspace(<span class="number">0</span>,<span class="number">9</span>,<span class="number">10</span>,base=<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(x)</span><br></pre></td></tr></table></figure>
<h1 id="切片与索引">切片与索引</h1>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">x=np.arange(<span class="number">15</span>)</span><br><span class="line">a=<span class="built_in">slice</span>(<span class="number">2</span>,<span class="number">10</span>,<span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(x[a])</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">x=np.arange(<span class="number">15</span>)</span><br><span class="line">a=x[<span class="number">2</span>:<span class="number">12</span>:<span class="number">3</span>]</span><br><span class="line"><span class="built_in">print</span>(a)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">x=np.array([[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>],[<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>]])</span><br><span class="line"><span class="built_in">print</span>(x[...,<span class="number">1</span>])<span class="comment">#第二列</span></span><br><span class="line"><span class="built_in">print</span>(x[<span class="number">1</span>,...])<span class="comment">#第二行</span></span><br><span class="line"><span class="built_in">print</span>(x[...,<span class="number">1</span>:])<span class="comment">#第二列及以下</span></span><br></pre></td></tr></table></figure>
<h1 id="高级索引-2">高级索引</h1>
<h2 id="整数数组索引-2">整数数组索引</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="comment">#获取(0,0),(1,1),(2,0)</span></span><br><span class="line">x=np.array([[<span class="number">1</span>,<span class="number">2</span>],[<span class="number">3</span>,<span class="number">4</span>],[<span class="number">5</span>,<span class="number">6</span>]])</span><br><span class="line">y=x[[<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>],[<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>]]</span><br><span class="line"><span class="built_in">print</span>(y)      </span><br><span class="line">/*</span><br><span class="line">[<span class="number">1</span> <span class="number">4</span> <span class="number">5</span>]</span><br><span class="line">*/</span><br></pre></td></tr></table></figure>
<h2 id="布尔索引-2">布尔索引</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">x=np.arange(<span class="number">1</span>,<span class="number">50</span>)</span><br><span class="line"><span class="built_in">print</span>(x[x&gt;<span class="number">10</span>])    </span><br><span class="line">/*</span><br><span class="line">[<span class="number">11</span> <span class="number">12</span> <span class="number">13</span> <span class="number">14</span> <span class="number">15</span> <span class="number">16</span> <span class="number">17</span> <span class="number">18</span> <span class="number">19</span> <span class="number">20</span> <span class="number">21</span> <span class="number">22</span> <span class="number">23</span> <span class="number">24</span> <span class="number">25</span> <span class="number">26</span> <span class="number">27</span> <span class="number">28</span> <span class="number">29</span> <span class="number">30</span> <span class="number">31</span> <span class="number">32</span> <span class="number">33</span> <span class="number">34</span></span><br><span class="line"> <span class="number">35</span> <span class="number">36</span> <span class="number">37</span> <span class="number">38</span> <span class="number">39</span> <span class="number">40</span> <span class="number">41</span> <span class="number">42</span> <span class="number">43</span> <span class="number">44</span> <span class="number">45</span> <span class="number">46</span> <span class="number">47</span> <span class="number">48</span> <span class="number">49</span>]</span><br><span class="line">*/</span><br></pre></td></tr></table></figure>
<h2 id="花式索引-2">花式索引</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">x=np.arange(<span class="number">32</span>).reshape(<span class="number">4</span>,<span class="number">8</span>)</span><br><span class="line"><span class="built_in">print</span>(x[[<span class="number">0</span>,<span class="number">2</span>,<span class="number">1</span>]])    </span><br><span class="line">/*</span><br><span class="line">[[ <span class="number">0</span>  <span class="number">1</span>  <span class="number">2</span>  <span class="number">3</span>  <span class="number">4</span>  <span class="number">5</span>  <span class="number">6</span>  <span class="number">7</span>]</span><br><span class="line"> [<span class="number">16</span> <span class="number">17</span> <span class="number">18</span> <span class="number">19</span> <span class="number">20</span> <span class="number">21</span> <span class="number">22</span> <span class="number">23</span>]</span><br><span class="line"> [ <span class="number">8</span>  <span class="number">9</span> <span class="number">10</span> <span class="number">11</span> <span class="number">12</span> <span class="number">13</span> <span class="number">14</span> <span class="number">15</span>]]</span><br><span class="line">*/ </span><br></pre></td></tr></table></figure>
<h1 id="迭代数组-2">迭代数组</h1>
<h2 id="迭代对象nditer">迭代对象nditer</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">x=np.arange(<span class="number">6</span>).reshape(<span class="number">3</span>,<span class="number">2</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> np.nditer(x):</span><br><span class="line">    <span class="built_in">print</span>(i,end=<span class="string">&quot;,&quot;</span>)</span><br></pre></td></tr></table></figure>
<h2 id="控制遍历顺序-2">控制遍历顺序</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">x=np.arange(<span class="number">6</span>).reshape(<span class="number">3</span>,<span class="number">2</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> np.nditer(x,order=<span class="string">&#x27;F&#x27;</span>):</span><br><span class="line">    <span class="built_in">print</span>(i,end=<span class="string">&quot;,&quot;</span>)     </span><br><span class="line">/*</span><br><span class="line"><span class="number">0</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,</span><br><span class="line">*/</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">x=np.arange(<span class="number">6</span>).reshape(<span class="number">3</span>,<span class="number">2</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> np.nditer(x,order=<span class="string">&#x27;C&#x27;</span>):</span><br><span class="line">    <span class="built_in">print</span>(i,end=<span class="string">&quot;,&quot;</span>)      </span><br><span class="line">/*</span><br><span class="line"><span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,</span><br><span class="line">*/</span><br></pre></td></tr></table></figure>
<h2 id="修改数组中元素的值">修改数组中元素的值</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">x=np.arange(<span class="number">0</span>,<span class="number">60</span>,<span class="number">5</span>).reshape(<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line"><span class="built_in">print</span>(x)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> np.nditer(x,op_flags=[<span class="string">&#x27;readwrite&#x27;</span>]):</span><br><span class="line">    i[...]=<span class="number">2</span>*i</span><br><span class="line"><span class="built_in">print</span>(x)</span><br></pre></td></tr></table></figure>
<h2 id="使用外部循环">使用外部循环</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">x=np.arange(<span class="number">0</span>,<span class="number">60</span>,<span class="number">5</span>).reshape(<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> np.nditer(x,flags=[<span class="string">&#x27;external_loop&#x27;</span>],order=<span class="string">&#x27;F&#x27;</span>):</span><br><span class="line">    <span class="built_in">print</span>(i,end=<span class="string">&#x27;,&#x27;</span>)    </span><br><span class="line">/*</span><br><span class="line">[ <span class="number">0</span> <span class="number">20</span> <span class="number">40</span>],[ <span class="number">5</span> <span class="number">25</span> <span class="number">45</span>],[<span class="number">10</span> <span class="number">30</span> <span class="number">50</span>],[<span class="number">15</span> <span class="number">35</span> <span class="number">55</span>],</span><br><span class="line">*/</span><br></pre></td></tr></table></figure>
<h2 id="广播迭代">广播迭代</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">x=np.arange(<span class="number">0</span>,<span class="number">60</span>,<span class="number">5</span>).reshape(<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line">b=np.array([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>],dtype=<span class="built_in">int</span>)</span><br><span class="line"><span class="keyword">for</span> i,j <span class="keyword">in</span> np.nditer([x,b]):</span><br><span class="line">    <span class="built_in">print</span>(i,j)</span><br></pre></td></tr></table></figure>
<h1 id="数组操作-2">数组操作</h1>
<h2 id="修改数组形状-2">修改数组形状</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">x=np.arange(<span class="number">0</span>,<span class="number">60</span>,<span class="number">5</span>).reshape(<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line"><span class="built_in">print</span>(x)</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> x.flat:</span><br><span class="line">    <span class="built_in">print</span>(j,end=<span class="string">&quot; &quot;</span>)</span><br></pre></td></tr></table></figure>
<h2 id="反转数组">反转数组</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">x=np.arange(<span class="number">0</span>,<span class="number">60</span>,<span class="number">5</span>).reshape(<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line"><span class="built_in">print</span>(np.transpose(x))</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>OpenCV</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>OpenCV</tag>
      </tags>
  </entry>
  <entry>
    <title>Pandas基础</title>
    <url>/2022/11/13/Pandas%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h1 id="Pandas">Pandas</h1>
<p>Pandas 一个强大的分析结构化数据的工具集，基础是Numpy（提供高性能的矩阵运算）。Pandas 可以从各种文件格式比如 CSV、JSON、SQL、Microsoft Excel 导入数据。Pandas 可以对各种数据进行运算操作，比如归并、再成形、选择，还有数据清洗和数据加工特征。Pandas 广泛应用在学术、金融、统计学等各个数据分析领域。</p>
<p>Pandas 的主要数据结构是 Series （一维数据）与 DataFrame（二维数据），这两种数据结构足以处理金融、统计、社会科学、工程等领域里的大多数典型用例。</p>
<h1 id="Series">Series</h1>
<h2 id="创建">创建</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">fruits=&#123;<span class="string">&quot;origin&quot;</span>:<span class="number">2</span>,<span class="string">&quot;bannaa&quot;</span>:<span class="number">8</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(pd.Series(fruits))</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">index =[<span class="string">&quot;apple&quot;</span>,<span class="string">&quot;dog&quot;</span>,<span class="string">&quot;cat&quot;</span>,<span class="string">&quot;pig&quot;</span>,<span class="string">&quot;orange&quot;</span>]</span><br><span class="line">data =[<span class="number">8</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">2</span>]</span><br><span class="line">series=pd.Series(data,index=index)</span><br><span class="line"><span class="built_in">print</span>(series)</span><br></pre></td></tr></table></figure>
<h2 id="数据的引用">数据的引用</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">index =[<span class="string">&quot;apple&quot;</span>,<span class="string">&quot;dog&quot;</span>,<span class="string">&quot;cat&quot;</span>,<span class="string">&quot;pig&quot;</span>,<span class="string">&quot;orange&quot;</span>]</span><br><span class="line">data =[<span class="number">8</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">2</span>]</span><br><span class="line">series=pd.Series(data,index=index)</span><br><span class="line"><span class="built_in">print</span>(series[<span class="number">0</span>:<span class="number">2</span>])</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">index =[<span class="string">&quot;apple&quot;</span>,<span class="string">&quot;dog&quot;</span>,<span class="string">&quot;cat&quot;</span>,<span class="string">&quot;pig&quot;</span>,<span class="string">&quot;orange&quot;</span>]</span><br><span class="line">data =[<span class="number">8</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">2</span>]</span><br><span class="line">series=pd.Series(data,index=index)</span><br><span class="line"><span class="built_in">print</span>(series[[<span class="string">&quot;dog&quot;</span>,<span class="string">&quot;pig&quot;</span>]])</span><br></pre></td></tr></table></figure>
<h2 id="数据与索引的读取">数据与索引的读取</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">index =[<span class="string">&quot;apple&quot;</span>,<span class="string">&quot;dog&quot;</span>,<span class="string">&quot;cat&quot;</span>,<span class="string">&quot;pig&quot;</span>,<span class="string">&quot;orange&quot;</span>]</span><br><span class="line">data =[<span class="number">8</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">2</span>]</span><br><span class="line">series=pd.Series(data,index=index)</span><br><span class="line">series_values =series.values</span><br><span class="line">series_index =series.index</span><br><span class="line"><span class="built_in">print</span>(series_values,series_index)</span><br></pre></td></tr></table></figure>
<h2 id="元素的添加">元素的添加</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">index =[<span class="string">&quot;apple&quot;</span>,<span class="string">&quot;dog&quot;</span>,<span class="string">&quot;cat&quot;</span>,<span class="string">&quot;pig&quot;</span>,<span class="string">&quot;orange&quot;</span>]</span><br><span class="line">data =[<span class="number">8</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">2</span>]</span><br><span class="line">series=pd.Series(data,index=index)</span><br><span class="line"></span><br><span class="line">series=series.append(pd.Series([<span class="number">12</span>],index=[<span class="string">&quot;goose&quot;</span>]))</span><br><span class="line"></span><br><span class="line">series.append(pd.Series (&#123;<span class="string">&quot;orange&quot;</span>:<span class="number">45</span>&#125;))</span><br><span class="line"></span><br><span class="line">grap=pd.Series([<span class="number">1</span>],index=[<span class="string">&quot;grap&quot;</span>])</span><br><span class="line">series.append(series)</span><br><span class="line"><span class="built_in">print</span>(series)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="元素的删除">元素的删除</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">index =[<span class="string">&quot;apple&quot;</span>,<span class="string">&quot;dog&quot;</span>,<span class="string">&quot;cat&quot;</span>,<span class="string">&quot;pig&quot;</span>,<span class="string">&quot;orange&quot;</span>]</span><br><span class="line">data =[<span class="number">8</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">2</span>]</span><br><span class="line">series=pd.Series(data,index=index)</span><br><span class="line">series=series.drop(<span class="string">&quot;cat&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(series)</span><br></pre></td></tr></table></figure>
<h2 id="过滤">过滤</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">index =[<span class="string">&quot;apple&quot;</span>,<span class="string">&quot;dog&quot;</span>,<span class="string">&quot;cat&quot;</span>,<span class="string">&quot;pig&quot;</span>,<span class="string">&quot;orange&quot;</span>]</span><br><span class="line">data =[<span class="number">8</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">2</span>]</span><br><span class="line">series=pd.Series(data,index=index)</span><br><span class="line">conditions=[<span class="literal">True</span>,<span class="literal">False</span>,<span class="literal">True</span>,<span class="literal">False</span>,<span class="literal">False</span>]</span><br><span class="line"><span class="built_in">print</span>(series[conditions])</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">index =[<span class="string">&quot;apple&quot;</span>,<span class="string">&quot;dog&quot;</span>,<span class="string">&quot;cat&quot;</span>,<span class="string">&quot;pig&quot;</span>,<span class="string">&quot;orange&quot;</span>]</span><br><span class="line">data =[<span class="number">8</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">2</span>]</span><br><span class="line">series=pd.Series(data,index=index)</span><br><span class="line"><span class="built_in">print</span>(series[series%<span class="number">2</span>==<span class="number">0</span>])</span><br></pre></td></tr></table></figure>
<h2 id="排序">排序</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">index =[<span class="string">&quot;apple&quot;</span>,<span class="string">&quot;dog&quot;</span>,<span class="string">&quot;cat&quot;</span>,<span class="string">&quot;pig&quot;</span>,<span class="string">&quot;orange&quot;</span>]</span><br><span class="line">data =[<span class="number">8</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">2</span>]</span><br><span class="line">series=pd.Series(data,index=index)</span><br><span class="line"><span class="built_in">print</span>(series.sort_values())</span><br><span class="line"><span class="built_in">print</span>(series.sort_index())</span><br></pre></td></tr></table></figure>
<h1 id="DataFrame">DataFrame</h1>
<h2 id="创建-2">创建</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">data=&#123;<span class="string">&quot;fruits&quot;</span>:[<span class="string">&quot;apple&quot;</span>,<span class="string">&quot;orange&quot;</span>,<span class="string">&quot;banana&quot;</span>,<span class="string">&quot;peach&quot;</span>],</span><br><span class="line">      <span class="string">&quot;num&quot;</span>:[<span class="number">1</span>,<span class="number">34</span>,<span class="number">23</span>,<span class="number">54</span>],</span><br><span class="line">      <span class="string">&quot;year&quot;</span>:[<span class="number">2000</span>,<span class="number">2023</span>,<span class="number">2015</span>,<span class="number">2045</span>]&#125;</span><br><span class="line">df=pd.DataFrame(data)</span><br><span class="line"><span class="built_in">print</span>(df)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python爬虫:微博爬取</title>
    <url>/2022/10/05/Python%E7%88%AC%E8%99%AB-%E5%BE%AE%E5%8D%9A%E7%88%AC%E5%8F%96/</url>
    <content><![CDATA[<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> urlencode</span><br><span class="line"><span class="keyword">from</span> pyquery <span class="keyword">import</span> PyQuery <span class="keyword">as</span> pq</span><br><span class="line"></span><br><span class="line">base_url = <span class="string">&#x27;https://m.weibo.cn/api/container/getIndex?&#x27;</span></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">&#x27;Host&#x27;</span>: <span class="string">&#x27;m.weibo.cn&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Referer&#x27;</span>: <span class="string">&#x27;https://m.weibo.cn/u/2830678474&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.0.0 Safari/537.36 Edg/105.0.1343.53&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;X-Requested-With&#x27;</span>: <span class="string">&#x27;XMLHttpRequest&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">max_page = <span class="number">50</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_page</span>(<span class="params">page</span>):</span><br><span class="line">    uid=<span class="string">&#x27;1679186305&#x27;</span></span><br><span class="line">    containerid=<span class="string">&#x27;107603&#x27;</span>+uid</span><br><span class="line">    params = &#123;</span><br><span class="line">        <span class="string">&#x27;type&#x27;</span>: <span class="string">&#x27;uid&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;value&#x27;</span>: uid,</span><br><span class="line">        <span class="string">&#x27;containerid&#x27;</span>:containerid,</span><br><span class="line">        <span class="string">&#x27;page&#x27;</span>: page</span><br><span class="line">    &#125;</span><br><span class="line">    url = base_url + urlencode(params)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        response = requests.get(url, headers=headers)</span><br><span class="line">        <span class="keyword">if</span> response.status_code == <span class="number">200</span>:</span><br><span class="line">            <span class="keyword">return</span> response.json()</span><br><span class="line">    <span class="keyword">except</span> requests.ConnectionError <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Error&#x27;</span>, e.args)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">parse_page</span>(<span class="params">json</span>):</span><br><span class="line">    <span class="keyword">if</span> json:</span><br><span class="line">        items = json.get(<span class="string">&#x27;data&#x27;</span>).get(<span class="string">&#x27;cards&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> items:</span><br><span class="line">            item = item.get(<span class="string">&#x27;mblog&#x27;</span>)</span><br><span class="line">            weibo = &#123;&#125;</span><br><span class="line">            weibo[<span class="string">&#x27;id&#x27;</span>] = item.get(<span class="string">&#x27;id&#x27;</span>)</span><br><span class="line">            weibo[<span class="string">&#x27;text&#x27;</span>] = pq(item.get(<span class="string">&#x27;text&#x27;</span>)).text()</span><br><span class="line">            weibo[<span class="string">&#x27;attitudes&#x27;</span>] = item.get(<span class="string">&#x27;attitudes_count&#x27;</span>)</span><br><span class="line">            weibo[<span class="string">&#x27;comments&#x27;</span>] = item.get(<span class="string">&#x27;comments_count&#x27;</span>)</span><br><span class="line">            weibo[<span class="string">&#x27;reposts&#x27;</span>] = item.get(<span class="string">&#x27;reposts_count&#x27;</span>)</span><br><span class="line">            <span class="keyword">yield</span> weibo</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">for</span> page <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, max_page + <span class="number">1</span>):</span><br><span class="line">        json = get_page(page)</span><br><span class="line">        results = parse_page(json)</span><br><span class="line">        <span class="keyword">for</span> result <span class="keyword">in</span> results:</span><br><span class="line">            <span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>爬虫</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>PyMysql:对数据库服务器的操作</title>
    <url>/2022/11/12/PyMysql-%E5%AF%B9%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<h1 id="安装PyMySql">安装PyMySql</h1>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install pymysql</span><br></pre></td></tr></table></figure>
<h1 id="连接对象">连接对象</h1>
<h2 id="获取连接对象">获取连接对象</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    connection=pymysql.connect(host=<span class="string">&#x27;112.245.212.109&#x27;</span>,port=<span class="number">3306</span>,user=<span class="string">&#x27;db1&#x27;</span>,password=<span class="string">&#x27;yyds&#x27;</span>,db=<span class="string">&#x27;db1 &#x27;</span>,charset=<span class="string">&#x27;utf8&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(connection)</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(e)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="连接对象的常用方法">连接对象的常用方法</h2>
<table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>cursor()</td>
<td>获取游标对象，操作数据库</td>
</tr>
<tr>
<td>commit()</td>
<td>提交事物</td>
</tr>
<tr>
<td>rollback()</td>
<td>回滚事物</td>
</tr>
<tr>
<td>close()</td>
<td>关闭数据库连接</td>
</tr>
</tbody>
</table>
<h1 id="游标对象">游标对象</h1>
<h2 id="获取游标对象">获取游标对象</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cursor=connection.cursor()</span><br></pre></td></tr></table></figure>
<h2 id="游标对象的常用方法">游标对象的常用方法</h2>
<table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>execute()</td>
<td>执行数据库操作</td>
</tr>
<tr>
<td>executemany()</td>
<td>用于批量操作</td>
</tr>
<tr>
<td>fetchone()</td>
<td>获取查询结果集中的下一条记录</td>
</tr>
<tr>
<td>fetchmany()</td>
<td>获取指定数量的记录</td>
</tr>
<tr>
<td>fetchall()</td>
<td>获取结构集合所有记录</td>
</tr>
<tr>
<td>close()</td>
<td>关闭当前游标</td>
</tr>
</tbody>
</table>
<h2 id="操作-2">操作</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    connection=pymysql.connect(host=<span class="string">&#x27;116.205.228.29&#x27;</span>,port=<span class="number">3306</span>,user=<span class="string">&#x27;db1&#x27;</span>,password=<span class="string">&#x27;TCy3KWW4T5k5W8eG&#x27;</span>,db=<span class="string">&#x27;db1&#x27;</span>,charset=<span class="string">&#x27;utf8&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(connection)</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(e)</span><br><span class="line"></span><br><span class="line">cursor=connection.cursor()</span><br><span class="line">cursor.execute(<span class="string">&quot;SELECT * FROM student;&quot;</span>)</span><br><span class="line">data=cursor.fetchall()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> data:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;学号&quot;</span>+i[<span class="number">0</span>].strip()+<span class="string">&quot;; 姓名:&quot;</span>+i[<span class="number">1</span>].strip()+<span class="string">&quot;;&quot;</span>)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>OpenCV的基本操作</title>
    <url>/2022/09/10/OpenCV%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<h1 id="图像输入输出模块imgcodecs">图像输入输出模块imgcodecs</h1>
<h2 id="读取图像文件">读取图像文件</h2>
<p>读取图片</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cv2.imread(path[, flag])</span><br></pre></td></tr></table></figure>
<blockquote>
<p>第二个参数指定图片被读取的方式：</p>
<ul>
<li><code>cv2.IMREAD_COLOR</code> : 读入彩色图像，默认模式；</li>
<li><code>cv2.IMREAD_GRAYSCALE</code> : 以灰度模式读入图像；</li>
<li><code>cv2.IMREAD_UNCHANGED</code> : 加载图像包含<code>alpha</code>通道。</li>
</ul>
<p>使用数字简约表示以上三种标记，分别为 <code>1</code>， <code>0</code>或<code>-1</code>。</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line">image_path = <span class="string">&quot;images.jpg&quot;</span></span><br><span class="line">img = cv2.imread(image_path,<span class="number">0</span>)</span><br></pre></td></tr></table></figure>
<p>读取失败返回None</p>
<h2 id="读取照片的高度与宽度">读取照片的高度与宽度</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2 <span class="keyword">as</span> cv</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">img=cv.imread(<span class="string">&#x27;pic.png&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(np.shape(img))</span><br><span class="line"></span><br><span class="line">height=np.shape(img)[<span class="number">0</span>]</span><br><span class="line">width=np.shape(img)[<span class="number">1</span>]</span><br><span class="line">channles=np.shape(img)[<span class="number">2</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;height:&quot;</span>,height)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;width:&#x27;</span>,width)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;channles:&#x27;</span>,channles)</span><br></pre></td></tr></table></figure>
<h2 id="保存照片">保存照片</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">imwrite(filename,img[,params)-&gt;retval</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2 <span class="keyword">as</span> cv</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">img=cv.imread(<span class="string">&#x27;pic.png&#x27;</span>)</span><br><span class="line">height,width=img.shape[:<span class="number">2</span>]</span><br><span class="line">cv.line(img,(<span class="number">0</span>,<span class="number">0</span>),(width,height),(<span class="number">0</span>,<span class="number">0</span>,<span class="number">255</span>),<span class="number">1</span>)</span><br><span class="line">cv.imwrite(<span class="string">&#x27;output.jpg&#x27;</span>,img)</span><br><span class="line">img=cv.imread(<span class="string">&#x27;output.jpg&#x27;</span>)</span><br><span class="line">cv.imshow(<span class="string">&#x27;img&#x27;</span>,img)</span><br><span class="line">cv.waitKey(<span class="number">0</span>)</span><br><span class="line">cv.destroyAllWindows()</span><br></pre></td></tr></table></figure>
<h1 id="OpenCV界面编程">OpenCV界面编程</h1>
<h2 id="新建窗口函数">新建窗口函数</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">namedWindow(winname[,flags])</span><br></pre></td></tr></table></figure>
<blockquote>
<p>flags</p>
<ul>
<li>
<p>cv2.WINDOW_AUTOSIZE 窗口大小自动适应</p>
</li>
<li>
<p>cv2.WINDOW_NORMAL</p>
</li>
</ul>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2 <span class="keyword">as</span> cv</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">img=cv.imread(<span class="string">&#x27;pic.png&#x27;</span>)</span><br><span class="line">cv.namedWindow(<span class="string">&#x27;hemo&#x27;</span>,cv.WINDOW_NORMAL)</span><br><span class="line">cv.imshow(<span class="string">&#x27;hemo&#x27;</span>,img)</span><br><span class="line">cv.waitKey(<span class="number">6000</span>)</span><br><span class="line">cv.destroyAllWindows()</span><br></pre></td></tr></table></figure>
<h1 id="单窗口显示多图片">单窗口显示多图片</h1>
<p>利用numpy的hstack函数合并行数相同的矩阵数组</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2 <span class="keyword">as</span> cv</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">img1=cv.imread(<span class="string">&#x27;pic.png&#x27;</span>)</span><br><span class="line">img2=cv.imread(<span class="string">&#x27;pic2.png&#x27;</span>)</span><br><span class="line">img=np.hstack([img1,img2])</span><br><span class="line">cv.imshow(<span class="string">&#x27;a&#x27;</span>,img)</span><br><span class="line">cv.waitKey(<span class="number">0</span>)</span><br><span class="line">cv.destroyAllWindows()</span><br></pre></td></tr></table></figure>
<img title="" src="https://s2.loli.net/2022/10/09/UNlsSDQKXyLdf8a.jpg" alt="" data-align="center">
<h1 id="销毁窗口">销毁窗口</h1>
<ul>
<li>
<p>cv2.destroyWindow(winname)</p>
</li>
<li>
<p>cv2.destroyAllWindows(winname)</p>
</li>
<li>
<p>cv2.resizeWindow(winname,width,height)</p>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2 <span class="keyword">as</span> cv</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">img1=cv.imread(<span class="string">&#x27;pic.png&#x27;</span>)</span><br><span class="line">img2=cv.imread(<span class="string">&#x27;pic2.png&#x27;</span>)</span><br><span class="line">img=np.hstack([img1,img2])</span><br><span class="line">cv.namedWindow(<span class="string">&#x27;1&#x27;</span>,cv.WINDOW_NORMAL)</span><br><span class="line">cv.imshow(<span class="string">&#x27;1&#x27;</span>,img)</span><br><span class="line">cv.resizeWindow(<span class="string">&#x27;1&#x27;</span>,<span class="number">900</span>,<span class="number">300</span>)</span><br><span class="line">cv.waitKey(<span class="number">0</span>)</span><br><span class="line">cv.destroyAllWindows()</span><br><span class="line">cv.destroyWindow()</span><br></pre></td></tr></table></figure>
<h1 id="鼠标事件">鼠标事件</h1>
<p>OpenCV使用setMousecallback设定</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">//设置回调函数</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">setMouseCallback</span>(<span class="params">windowName, onMouse, param=<span class="literal">None</span></span>):</span><br><span class="line">//回调函数</span><br><span class="line">void your_mouse_callback(<span class="built_in">int</span> event,<span class="built_in">int</span> x,<span class="built_in">int</span> y,<span class="built_in">int</span> flags,void* param) ;</span><br></pre></td></tr></table></figure>
<p>鼠标事件event</p>
<blockquote>
<p>enum<br>
{<br>
EVENT_MOUSEMOVE      =0,   //鼠标移动<br>
EVENT_LBUTTONDOWN    =1,   //按下左键<br>
EVENT_RBUTTONDOWN    =2,   //按下右键<br>
EVENT_MBUTTONDOWN    =3,   //按下中键<br>
EVENT_LBUTTONUP      =4,   //放开左键<br>
EVENT_RBUTTONUP      =5,   //放开右键<br>
EVENT_MBUTTONUP      =6,   //放开中键<br>
EVENT_LBUTTONDBLCLK  =7,   //左键双击<br>
EVENT_RBUTTONDBLCLK  =8,   //右键双击<br>
EVENT_MBUTTONDBLCLK  =9,   //中键双击<br>
EVENT_MOUSEWHEEL     =10,  //滚轮滚动<br>
};</p>
</blockquote>
<p>鼠标事件flags</p>
<blockquote>
<p>enum<br>
{<br>
CV_EVENT_FLAG_LBUTTON   =1,   //左键拖拽<br>
CV_EVENT_FLAG_RBUTTON   =2,   //右键拖拽<br>
CV_EVENT_FLAG_MBUTTON   =4,   //中键拖拽<br>
CV_EVENT_FLAG_CTRLKEY   =8,   //按住CTRL拖拽<br>
CV_EVENT_FLAG_SHIFTKEY  =16,  //按住Shift拖拽<br>
CV_EVENT_FLAG_ALTKEY    =32   //按住ALT拖拽<br>
};</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2 <span class="keyword">as</span> cv</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">img=np.zeros((<span class="number">400</span>,<span class="number">400</span>))</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">draw_circle</span>(<span class="params">event,x,y,flags,param</span>):</span><br><span class="line">    <span class="keyword">if</span> event==cv.EVENT_LBUTTONDOWN:</span><br><span class="line">        cv.circle(img,(x,y),<span class="number">20</span>,<span class="number">255</span>,-<span class="number">1</span>)</span><br><span class="line">cv.namedWindow(<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">cv.setMouseCallback(<span class="string">&#x27;1&#x27;</span>,draw_circle)</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>):</span><br><span class="line">    cv.imshow(<span class="string">&#x27;1&#x27;</span>,img)</span><br><span class="line">    n=cv.waitKey(<span class="number">5</span>)</span><br><span class="line">    <span class="keyword">if</span> n==<span class="built_in">ord</span>(<span class="string">&#x27;q&#x27;</span>):</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">elif</span> n==<span class="built_in">ord</span>(<span class="string">&#x27;s&#x27;</span>):</span><br><span class="line">        cv.imwrite(<span class="string">&#x27;output.jpg&#x27;</span>,img)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;保存成功&#x27;</span>)</span><br><span class="line">cv.destroyAllWindows()</span><br></pre></td></tr></table></figure>
<h1 id="滑动条事件">滑动条事件</h1>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">createTrackbar</span>(<span class="params">trackbarName, windowName, value, count, onChange</span>):</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">TrackbarCallback</span>(<span class="params">pos,userdata</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getTrackbarPos</span>(<span class="params">trackbarname, winname</span>):</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">setTrackbarPos</span>(<span class="params">trackbarname, winname, pos</span>): </span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2 <span class="keyword">as</span> cv</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">alpha=<span class="number">0.3</span></span><br><span class="line">beta=<span class="number">80</span></span><br><span class="line">img=cv2.imread(<span class="string">&#x27;pic.png&#x27;</span>)</span><br><span class="line">img2=cv.imread(<span class="string">&#x27;pic.png&#x27;</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">upadateAlpha</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">global</span> alpha,img,img2,beta</span><br><span class="line">    alpha=cv.getTrackbarPos(<span class="string">&#x27;Alpha&#x27;</span>,<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">    alpha=alpha*<span class="number">0.01</span></span><br><span class="line">    img=np.uint8(np.clip((alpha*img2+beta),<span class="number">0</span>,<span class="number">255</span>))</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">updateBeta</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">global</span> alpha, img, img2,beta</span><br><span class="line">    beta=cv.getTrackbarPos(<span class="string">&#x27;Beta&#x27;</span>,<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">    img=np.uint8(np.clip((alpha*img2+beta),<span class="number">0</span>,<span class="number">255</span>))</span><br><span class="line"></span><br><span class="line">cv.namedWindow(<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">cv.createTrackbar(<span class="string">&#x27;Alpha&#x27;</span>,<span class="string">&#x27;1&#x27;</span>,<span class="number">0</span>,<span class="number">300</span>,upadateAlpha)</span><br><span class="line">cv.createTrackbar(<span class="string">&#x27;Beta&#x27;</span>,<span class="string">&#x27;1&#x27;</span>,<span class="number">0</span>,<span class="number">255</span>,updateBeta)</span><br><span class="line">cv.setTrackbarPos(<span class="string">&#x27;Alpha&#x27;</span>,<span class="string">&#x27;1&#x27;</span>,<span class="number">100</span>)</span><br><span class="line">cv.setTrackbarPos(<span class="string">&#x27;Beta&#x27;</span>,<span class="string">&#x27;1&#x27;</span>,<span class="number">10</span>)</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>):</span><br><span class="line">    cv2.imshow(<span class="string">&#x27;1&#x27;</span>,img)</span><br><span class="line">    <span class="keyword">if</span> cv.waitKey(<span class="number">1</span>)==<span class="built_in">ord</span>(<span class="string">&#x27;q&#x27;</span>):</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">cv.destroyAllWindows()</span><br></pre></td></tr></table></figure>
<p><img src="https://s2.loli.net/2022/10/09/SGZxMl649gC5HtI.png" alt=""></p>
]]></content>
      <categories>
        <category>OpenCV</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>OpenCV</tag>
      </tags>
  </entry>
  <entry>
    <title>Python:网络编程基础</title>
    <url>/2022/11/10/Python-%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h1 id="Socket">Socket</h1>
<p>为了让两个程序进行网络通信，二者均需要使用socket套接字。套接字用来描述IP地址和端口，是一个通信链的句柄。</p>
<p>在Python中使用socket模块的socket模块，语法格式</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s=socket.socket(AddressFamily,<span class="type">Type</span>)</span><br></pre></td></tr></table></figure>
<p>该函数带有两个参数</p>
<ul>
<li>
<p>Address Family:可以选择AF_INET(用于Internet进程间通信)或者AF_UNIX(用于同一台机器进程间通信)</p>
</li>
<li>
<p>Type:套接字协议，可以是SOCK_STREAM(流式套接字，主要用于TCP协议)或者SOCK_DGRAM(数据报套接字，主要用于UDP协议)</p>
</li>
</ul>
<p>如创建TCP/IP套接字</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tcpsocket=socket.socket(socket.AF_INET,socket.SOCK_STREAM)</span><br></pre></td></tr></table></figure>
<p>创建UDP/IP套接字</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">udpSock=socket.socket(socket.AF_INET, socket.SOCK_DGRAM)</span><br></pre></td></tr></table></figure>
<p>socket对象内置方法</p>
<table>
<thead>
<tr>
<th>方法</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>s.bind()</td>
<td>绑定地址(hos,port)到套接字,在AF_INET下元组(host,port)的形式表示地址</td>
</tr>
<tr>
<td>s.listen()</td>
<td>开始TCP监听。backlog指定在拒绝连接之前，操作系统可以挂起的最大连接数量。最少为一</td>
</tr>
<tr>
<td>s.accept()</td>
<td>被动接收TCP客户端连接，(阻塞式)等待连接的到来</td>
</tr>
<tr>
<td>s.connect()</td>
<td>主动初始化TCP服务连接，一般address的格式为元组(hostname,port),如果连接出错，返回socket.error错误</td>
</tr>
<tr>
<td>s.recv()</td>
<td>接收TCP数据，以字符串形式返回。bufsize指定要接收的最大数据量；flag提供有关消息的其它信息，通常可以忽略。</td>
</tr>
<tr>
<td>s.send()</td>
<td>发送TCP数据，将string中的数据发送到连接的套接字，但在返回之前会尝试发送所有数量。成功返回None,失败抛出异常</td>
</tr>
<tr>
<td>s.sendall()</td>
<td>完整发送TCP数据，将string中的数据发送到连接的套接字，但在返回之前会尝试发送所有数量。成功返回None,失败抛出异常</td>
</tr>
<tr>
<td>s.recvfrom()</td>
<td>接收UDP数据，返回值为(data,address)元组，其中data是包含接收数据的字符串，address是发送数据的套接字地址</td>
</tr>
<tr>
<td>s.sendto()</td>
<td>发送UDP数据，与recv类似，address形式为(ipaddr,port)的元组，指定远程地址。返回值为发送的字节数</td>
</tr>
<tr>
<td>s.close()</td>
<td>关闭套接字</td>
</tr>
</tbody>
</table>
<h1 id="TCP编程">TCP编程</h1>
<h2 id="创建TCP服务">创建TCP服务</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> socket  <span class="comment"># 导入 socket 模块</span></span><br><span class="line">s=socket.socket()</span><br><span class="line">host = <span class="string">&#x27;0.0.0.0&#x27;</span>  <span class="comment"># 获取本地主机名</span></span><br><span class="line">port = <span class="number">34222</span>  <span class="comment"># 设置端口</span></span><br><span class="line">s.bind((host, port))</span><br><span class="line">s.listen(<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;waiting for connection&quot;</span>)</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    con,addr=s.accept()</span><br><span class="line">    data=con.recv(<span class="number">1024</span>)</span><br><span class="line">    str1=<span class="built_in">str</span>(data.decode())</span><br><span class="line">    <span class="built_in">print</span>(data.decode())</span><br><span class="line">    str1=<span class="string">&quot;你发送了:&quot;</span>+str1+<span class="string">&quot;\n&quot;</span></span><br><span class="line">    con.sendall(str1.encode())</span><br><span class="line">    con.close()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;endall&quot;</span>)</span><br></pre></td></tr></table></figure>
<h2 id="创建TCP客户端">创建TCP客户端</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line">s = socket.socket()</span><br><span class="line">host = <span class="string">&#x27;175.178.38.129&#x27;</span></span><br><span class="line">port = <span class="number">34222</span></span><br><span class="line">s.connect((host, port))</span><br><span class="line">send_data =<span class="built_in">input</span>(<span class="string">&quot;输入：&quot;</span>)</span><br><span class="line">s.send(send_data.encode())</span><br><span class="line">recvDATA=s.recv(<span class="number">1024</span>).decode()</span><br><span class="line"><span class="built_in">print</span>(recvDATA)</span><br><span class="line">s.close()</span><br></pre></td></tr></table></figure>
<h1 id="UDP编程">UDP编程</h1>
<h2 id="UDP服务器">UDP服务器</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line">s=socket.socket(socket.AF_INET, socket.SOCK_DGRAM)</span><br><span class="line">s.bind((<span class="string">&#x27;127.0.0.1&#x27;</span>,<span class="number">8888</span>))</span><br><span class="line">data,addr=s.recv(<span class="number">1024</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;data: &quot;</span>,data)</span><br><span class="line"><span class="built_in">str</span>=<span class="built_in">input</span>(<span class="string">&quot;input:&quot;</span>)</span><br><span class="line">s.sendall(<span class="built_in">str</span>,addr)</span><br><span class="line">s.close()</span><br></pre></td></tr></table></figure>
<h2 id="UDP客户端">UDP客户端</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line">s=socket.socket(socket.AF_INET, socket.SOCK_DGRAM)</span><br><span class="line">data=<span class="built_in">input</span>(<span class="string">&quot;input:&quot;</span>)</span><br><span class="line">s.sendall(data.encode(),(<span class="string">&#x27;127.0.0.1&#x27;</span>,<span class="number">8888</span>))</span><br><span class="line"><span class="built_in">print</span>(s.recv(<span class="number">1024</span>).decode())</span><br><span class="line">s.close()</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>网络编程</tag>
      </tags>
  </entry>
  <entry>
    <title>Python爬虫：爬取豆瓣电影榜Top250</title>
    <url>/2022/08/16/Python%E7%88%AC%E8%99%AB%EF%BC%9A%E7%88%AC%E5%8F%96%E8%B1%86%E7%93%A3%E7%94%B5%E5%BD%B1%E6%A6%9CTop250/</url>
    <content><![CDATA[<h1 id="前言">前言</h1>
<p>现在很多网站都做了反爬，导致单一使用requests库无法爬到东西，经过全网实验，我发现豆瓣的电影排行榜很容易爬取下来的</p>
<h1 id="实现过程">实现过程</h1>
<p>我们使用浏览器<mark>检查</mark>工具</p>
<img src="https://s2.loli.net/2022/08/17/cm8A7gdG2H691fD.png" title="" alt="" data-align="center">
<p>分析每一项的HTML代码</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;pic&quot;</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">em</span> <span class="attr">class</span>=<span class="string">&quot;&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">em</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://movie.douban.com/subject/1292052/&quot;</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">img</span> <span class="attr">width</span>=<span class="string">&quot;100&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;肖申克的救赎&quot;</span> <span class="attr">src</span>=<span class="string">&quot;https://img2.doubanio.com/view/photo/s_ratio_poster/public/p480747492.jpg&quot;</span> <span class="attr">class</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;info&quot;</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;hd&quot;</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://movie.douban.com/subject/1292052/&quot;</span> <span class="attr">class</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;title&quot;</span>&gt;</span>肖申克的救赎<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                              <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;title&quot;</span>&gt;</span> / The Shawshank Redemption<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                          <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;other&quot;</span>&gt;</span> / 月黑高飞(港)  /  刺激1995(台)<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                      <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;playable&quot;</span>&gt;</span>[可播放]<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;bd&quot;</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">                      导演: 弗兰克·德拉邦特 Frank Darabont   主演: 蒂姆·罗宾斯 Tim Robbins /...<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">                      1994 / 美国 / 犯罪 剧情</span><br><span class="line">                  <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;star&quot;</span>&gt;</span></span><br><span class="line">                          <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;rating5-t&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                          <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;rating_num&quot;</span> <span class="attr">property</span>=<span class="string">&quot;v:average&quot;</span>&gt;</span>9.7<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                          <span class="tag">&lt;<span class="name">span</span> <span class="attr">property</span>=<span class="string">&quot;v:best&quot;</span> <span class="attr">content</span>=<span class="string">&quot;10.0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                          <span class="tag">&lt;<span class="name">span</span>&gt;</span>2674333人评价<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                      <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;quote&quot;</span>&gt;</span></span><br><span class="line">                          <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;inq&quot;</span>&gt;</span>希望让人自由。<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>每个代码都有如上规律，所以我们用<u>正则表达式</u>去匹配每个电影，获取需要的数据</p>
<blockquote>
<p>这个需要有<u>正则表达式知识</u></p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pattern=re.<span class="built_in">compile</span>(</span><br><span class="line">        <span class="string">&#x27;&lt;div class=&quot;item&quot;&gt;.*?&lt;em class=&quot;&quot;&gt;(.*?)&lt;/em&gt;.*?&lt;span class=&quot;title&quot;&gt;(.*?)&lt;/span&gt;.*?&lt;br&gt;(.*?) / .*? / (.*?)&lt;/p&gt;.*?property=&quot;v:average&quot;&gt;(.*?)&lt;/span&gt;&#x27;</span>,re.S)</span><br><span class="line">    items=re.findall(pattern,html)</span><br></pre></td></tr></table></figure>
<p>然后网站是以GET方式25为增量换页的</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line">https://movie.douban.com/top250?start=0&amp;filter=</span><br><span class="line">https://movie.douban.com/top250?start=25&amp;filter=</span><br></pre></td></tr></table></figure>
<p>有了以上思路就可以完成爬虫了</p>
<h1 id="代码-8">代码</h1>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests,re,csv</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getpage</span>(<span class="params">url</span>):</span><br><span class="line">    headers=&#123;</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>:<span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/104.0.5112.81 Safari/537.36 Edg/104.0.1293.54&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    response=requests.get(url,headers=headers)</span><br><span class="line">    <span class="keyword">if</span> response.status_code==<span class="number">200</span>:</span><br><span class="line">        <span class="keyword">return</span> response.text</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;爬取失败&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">parsehtml</span>(<span class="params">html</span>):</span><br><span class="line">    pattern=re.<span class="built_in">compile</span>(</span><br><span class="line">        <span class="string">&#x27;&lt;div class=&quot;item&quot;&gt;.*?&lt;em class=&quot;&quot;&gt;(.*?)&lt;/em&gt;.*?&lt;span class=&quot;title&quot;&gt;(.*?)&lt;/span&gt;.*?&lt;br&gt;(.*?) / .*? / (.*?)&lt;/p&gt;.*?property=&quot;v:average&quot;&gt;(.*?)&lt;/span&gt;&#x27;</span>,re.S)</span><br><span class="line">    items=re.findall(pattern,html)</span><br><span class="line">    <span class="keyword">return</span> items;</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">write</span>(<span class="params">items</span>):</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;豆瓣电影Top250.csv&quot;</span>,mode=<span class="string">&quot;w&quot;</span>, encoding=<span class="string">&quot;utf-8-sig&quot;</span>, newline=<span class="string">&quot;&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        writer = csv.writer(f)</span><br><span class="line">        headerList=[<span class="string">&#x27;排名&#x27;</span>,<span class="string">&#x27;电影名&#x27;</span>,<span class="string">&#x27;上映时间&#x27;</span>,<span class="string">&#x27;分类&#x27;</span>,<span class="string">&#x27;豆瓣评分&#x27;</span>]</span><br><span class="line">        writer.writerow(headerList)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> items:</span><br><span class="line">            tmp=[]</span><br><span class="line">            tmp.append(i[<span class="number">0</span>])</span><br><span class="line">            tmp.append(i[<span class="number">1</span>])</span><br><span class="line">            tmp.append(<span class="built_in">str</span>(i[<span class="number">2</span>]).strip())</span><br><span class="line">            tmp.append(<span class="built_in">str</span>(i[<span class="number">3</span>]).strip())</span><br><span class="line">            tmp.append(<span class="built_in">str</span>(i[<span class="number">4</span>]).strip())</span><br><span class="line">            <span class="built_in">print</span>(tmp[<span class="number">0</span>],tmp[<span class="number">1</span>],tmp[<span class="number">2</span>],tmp[<span class="number">3</span>],tmp[<span class="number">4</span>])</span><br><span class="line">            writer.writerow(tmp)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    items=[]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">250</span>,<span class="number">25</span>):</span><br><span class="line">        url=<span class="string">&#x27;https://movie.douban.com/top250?start=&#123;&#125;&amp;filter=&#x27;</span>.<span class="built_in">format</span>(i)</span><br><span class="line">        text=getpage(url)</span><br><span class="line">        items+=parsehtml(text)</span><br><span class="line">    write(items)</span><br><span class="line">main()</span><br></pre></td></tr></table></figure>
<h1 id="结果">结果</h1>
<img src="https://s2.loli.net/2022/08/17/4GgyqDRSI9ljcNv.png" title="" alt="" data-align="center">
<center>非常基础的爬虫入门例子</center>
]]></content>
      <categories>
        <category>爬虫</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>STM32F1软件仿真</title>
    <url>/2022/09/23/STM32F1%E8%BD%AF%E4%BB%B6%E4%BB%BF%E7%9C%9F/</url>
    <content><![CDATA[<blockquote>
<p>MDK 的一个强大的功能就是提供软件仿真，通过软件仿真，我们可以发现很多将要出现<br>
的问题，避免了下载到 STM32 里面来查这些错误，这样最大的好处是能很方便的检查程序存<br>
在的问题，因为在 MDK 的仿真下面，你可以查看很多硬件相关的寄存器，通过观察这些寄存<br>
器，你可以知道代码是不是真正有效。另外一个优点是不必频繁的刷机，从而延长了 STM32<br>
的 FLASH 寿命（STM32 的 FLASH 寿命≥1W 次）。当然，软件仿真不是万能的，很多问题还<br>
是要到在线调试才能发现。</p>
</blockquote>
<h1 id="检查配置">检查配置</h1>
<p>如下图</p>
<p><img src="https://s2.loli.net/2022/10/09/iAeBsQdEHIbORKn.png" alt=""></p>
<h1 id="Debug-选项卡">Debug 选项卡</h1>
<p>Use Simulator，即使用软件仿真。选择：Run to main()，即跳过汇<br>
编代码，直接跳转到 main 函数开始仿真。设置下方的：Dialog DLL 分别为：***DARMSTM.DLL ****</p>
<p>和 <strong>TARMSTM.DLL</strong>，</p>
<p>Parameter 均为：</p>
<pre><code>-pSTM32F103ZE
</code></pre>
<p>，用于设置支持 STM32F103ZE 的软硬件仿真（即可以通过Peripherals 选择对应外设的对话框观察仿真结果）。最后点击 OK，完成设置。</p>
<p><img src="https://s2.loli.net/2022/10/09/iAeBsQdEHIbORKn.png" alt=""></p>
<p><img src="https://s2.loli.net/2022/10/09/86fWKslAZo7QOhR.png" alt=""></p>
<h1 id="开始仿真">开始仿真</h1>
<p>我们点击<img src="https://s2.loli.net/2022/10/15/nRefBgi2JPs3odS.png" alt="">开始仿真,进入仿真界面</p>
<p><img src="https://s2.loli.net/2022/10/15/RQgjkE3pmd9KbaG.png" alt=""></p>
<h2 id="Debug工具条">Debug工具条</h2>
<p><img src="https://s2.loli.net/2022/10/15/unwMt8CkGZXRqrU.png" alt=""></p>
<ul>
<li>
<p>复位：相当于硬件复位按键，从头开始</p>
</li>
<li>
<p>执行到断点处：该按钮用来快速执行到断点处</p>
</li>
<li>
<p>挂起：可以使程序停止下来，<br>
进入到单步调试状态</p>
</li>
<li>
<p>执行进去：实现执行到某个函数里面去的功能，在没有函数的情况下，是等同于执行过去按钮的</p>
</li>
<li>
<p>执行过去：在碰到有函数的地方，通过该按钮就可以单步执行过这个函数，而不进入这个函数单步执行</p>
</li>
<li>
<p>执行出去：该按钮是在进入了函数单步调试的时候，有时候你可能不必再执行该函数的剩余部分了，通过该按钮就直接一步执行完函数余下的部分，并跳出函数，回到函数被调用的位置。</p>
</li>
<li>
<p>执行到光标处：可以迅速的使程序运行到光标处，其实是挺像执行到断点处按钮功能，但是两者是有区别的，断点可以有多个，但是光标所在处只有一个。</p>
</li>
<li>
<p>汇编窗口：可以查看汇编代码，这对分析程序很有用。</p>
</li>
<li>
<p>观看变量/堆栈窗口：显示变量的窗口，在里面可以查看各种你想要看的变量值，也是很常用的一个调试窗口。</p>
</li>
<li>
<p>性能分析窗口：观看各个函数执行时间和所占百分比的窗口，用来分析函数的性能</p>
</li>
<li>
<p>逻辑分析窗口：按下该按钮会弹出一个逻辑分析窗口，通过 SETUP 按钮新建一些 IO 口，就可以观察这些 IO 口的电平变化情况，以多种形式显示出来，比较直观。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>STM32</category>
      </categories>
      <tags>
        <tag>STM32</tag>
        <tag>嵌入式</tag>
      </tags>
  </entry>
  <entry>
    <title>Qt工具类</title>
    <url>/2022/08/14/Qt%E5%B7%A5%E5%85%B7%E7%B1%BB/</url>
    <content><![CDATA[<h1 id="字符串类">字符串类</h1>
<h2 id="操作字符串">操作字符串</h2>
<ol>
<li>
<p>“+”</p>
</li>
<li>
<p>QString::append()</p>
</li>
<li>
<p>QString::sprintf()</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">QString str;</span><br><span class="line">str.<span class="built_in">sprintf</span>(<span class="string">&quot; %s &quot;</span>,<span class="string">&quot;hi&quot;</span>); </span><br></pre></td></tr></table></figure>
</li>
<li>
<p>QString::arg()</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">QString str;</span><br><span class="line">str=<span class="built_in">QString</span>(<span class="string">&quot;%1 a %2&quot;</span>).<span class="built_in">arg</span>(<span class="string">&quot;1&quot;</span>).<span class="built_in">arg</span>(<span class="string">&quot;2&quot;</span>);</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>组合字符串</p>
<blockquote>
<p>insert()        插入字符串</p>
<p>prepend()    开头插入</p>
<p>replace()     替代</p>
<p>QString::trimmed()    移除两端的空白字符</p>
<p>QString::simplified() 移除两端的空白字符,使用单个空格字符代替空白字符</p>
</blockquote>
</li>
</ol>
<h2 id="查询字符串">查询字符串</h2>
<ol>
<li>
<p>QString::startsWith()</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">QString str=<span class="string">&quot;sddsa&quot;</span></span><br><span class="line">str.<span class="built_in">startsWith</span>(<span class="string">&quot;s&quot;</span>,Qt::CaseSensitive);<span class="comment">// true</span></span><br></pre></td></tr></table></figure>
</li>
<li>
<p>QString::endsWith() 结尾</p>
</li>
<li>
<p>QString::contains() 包含</p>
</li>
<li>
<p>操作符 &gt;=&lt;</p>
</li>
</ol>
<h2 id="字符串转换">字符串转换</h2>
<ul>
<li>
<p>toInt()</p>
</li>
<li>
<p>toAscii</p>
</li>
<li>
<p>toLatin1()</p>
</li>
<li>
<p>toUtf8()</p>
</li>
<li>
<p>toLocal8Bit()</p>
</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">QString str=<span class="string">&quot;welcome to you&quot;</span>;</span><br><span class="line">QByteArray b=str.<span class="built_in">toAscii</span>();</span><br><span class="line">qDebug&lt;&lt;b;</span><br><span class="line">b.<span class="built_in">append</span>(<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line"><span class="built_in">qDebug</span>()&lt;&lt;ba.<span class="built_in">data</span>();</span><br></pre></td></tr></table></figure>
<h1 id="容器类">容器类</h1>
<h2 id="QList类">QList类</h2>
<ul>
<li>
<p>QList::append()</p>
</li>
<li>
<p>QList::prepend()</p>
</li>
<li>
<p>QList::insert()</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">QList&lt;QString&gt;list;</span><br><span class="line"><span class="function">QString <span class="title">str</span><span class="params">(<span class="string">&quot;sdsd&quot;</span>)</span></span>;</span><br><span class="line">list&lt;&lt;str;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="QLinkedList类">QLinkedList类</h2>
<p>QLinkedList是一个链式列表，以非连续的内存块保存</p>
<h2 id="QVector类">QVector类</h2>
<p>相邻的内存储存给定数据类型的一组数值</p>
<h2 id="Java风格迭代器遍历容器">Java风格迭代器遍历容器</h2>
<center>*两种不同类型的Java风格迭代器数据类型*</center>
<table>
<thead>
<tr>
<th style="text-align:center">容器类</th>
<th style="text-align:center">只读迭代器类</th>
<th>读写迭代器类</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">QList<T>,QQueue<t></td>
<td style="text-align:center">QListIterator<T></td>
<td>QMutableListIterator<T></td>
</tr>
<tr>
<td style="text-align:center">QLinkedList<T></td>
<td style="text-align:center">QLinkedListIterator<T></td>
<td>QMutableLinkedListIterator<T></td>
</tr>
<tr>
<td style="text-align:center">QVector<T>,QStack<T></td>
<td style="text-align:center">QVectorIterator<T></td>
<td>QMutableVectorIterator<T></td>
</tr>
</tbody>
</table>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QCoreApplication&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;QDebug&gt;</span></span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc,<span class="type">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">QCoreApplication <span class="title">a</span><span class="params">(argc,argv)</span></span>;</span><br><span class="line">    QList&lt;<span class="type">int</span>&gt;list;</span><br><span class="line">    list&lt;&lt;<span class="number">1</span>&lt;&lt;<span class="number">2</span>&lt;&lt;<span class="number">3</span>&lt;&lt;<span class="number">4</span>&lt;&lt;<span class="number">5</span>;</span><br><span class="line">    QListIterator&lt;<span class="type">int</span>&gt;<span class="built_in">i</span>(list);</span><br><span class="line">    <span class="keyword">for</span>(;i.<span class="built_in">hasNext</span>();)</span><br><span class="line">        <span class="built_in">qDebug</span>()&lt;&lt;i.next;</span><br><span class="line">    <span class="keyword">return</span> a.exec;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="QListIterator">QListIterator</h3>
<ul>
<li>
<p>QListIterator::toBack()</p>
</li>
<li>
<p>QListIterator::hasPrevious()</p>
</li>
<li>
<p>QListIterator::previous()</p>
</li>
<li>
<p>QListIterator::toFront()</p>
</li>
<li>
<p>QListIterator::peeknext()</p>
</li>
<li>
<p>QListIterator::peekPrevious()</p>
</li>
<li>
<p>QListIterator::findNext()</p>
</li>
<li>
<p>QListIterator::findPrevious()</p>
</li>
</ul>
<h2 id="STL风格迭代器遍历容器">STL风格迭代器遍历容器</h2>
<CENTER>STL风格迭代器数据类型*</CENTER>
<table>
<thead>
<tr>
<th>容器类</th>
<th>只读迭代器类</th>
<th>读写迭代器类</th>
</tr>
</thead>
<tbody>
<tr>
<td>QList<T></td>
<td>QListIterator::const_iterator</td>
<td>QListIterator::iterator</td>
</tr>
<tr>
<td>QLinkedList<T></td>
<td>QLinkedListIterator::const_iterator</td>
<td>QLinkedListIterator<T>::iterator</td>
</tr>
<tr>
<td>QVector<T>,QStack<T></td>
<td>QVectorIterator::const_iterator</td>
<td>QVector<T>::iterator</td>
</tr>
</tbody>
</table>
]]></content>
      <categories>
        <category>Qt</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>Qt</tag>
      </tags>
  </entry>
  <entry>
    <title>STM32固件库</title>
    <url>/2022/09/21/STM32%E5%9B%BA%E4%BB%B6%E5%BA%93/</url>
    <content><![CDATA[<h1 id="什么是固件库？">什么是固件库？</h1>
<p>STM32 固件库就是函数的集合</p>
<p>为了能让不同的芯片公司生产的 Cortex-M3 芯片能在软件上基本兼容，和芯片生产商共同提出了一套标准 CMSIS 标准(Cortex Microcontroller Software Interface Standard) ,翻译过来是“ARM Cortex™ 微控制器软件接口标准”。</p>
<p>CMSIS 分为 3 个基本功能层：</p>
<ol>
<li>核内外设访问层：ARM 公司提供的访问，定义处理器内部寄存器地址以及功能函数。</li>
<li>中间件访问层:定义访问中间件的通用 API,也是 ARM 公司提供。</li>
<li>外设访问层：定义硬件寄存器的地址以及外设的访问函数。</li>
</ol>
<p>CMSIS 层在整个系统中是处于中间层，向下负责与内核和各个外设直接打交道，向上提供实时操作系统用户程序调用的函数接口。如果没有 CMSIS 标准，那么各个芯片公司就会设计自己喜欢的风格的库函数，而 CMSIS 标准就是要强制规定，芯片生产公司设计的库<br>
函数必须按照 CMSIS 这套规范来设计。</p>
<h1 id="新建基于固件库的-MDK5-工程模板">新建基于固件库的 MDK5 工程模板</h1>
<ol>
<li>
<p>建立一个文件夹,并在其下新建USER目录</p>
</li>
<li>
<p>keil5新建项目在USER下<img src="https://s2.loli.net/2022/10/09/QjD8OeUzVG6BE9T.png" alt=""></p>
</li>
<li>
<p>删除USER下的objects和Listings</p>
</li>
<li>
<p>在根目录下新建CORE,OBJ，以及LIB文件夹</p>
</li>
<li>
<p><em>STM32F10x_StdPeriph_Lib_V3.5.0\Libraries\STM32F10x_StdPeriph_Driver</em> 下面，<br>
将目录下面的* src,inc 文件夹 *复制 到我们刚才建立的 STM32F10x_FWLib 文件夹下面。</p>
</li>
<li>
<p>目录<em>STM32F10x_StdPeriph_Lib_V3.5.0\Libraries\CMSIS\CM3\CoreSupport</em> 下面，将文件 <em>core_cm3.c、core_cm3.h</em> 复制到 CORE 下 面 去 。</p>
</li>
<li>
<p>*STM32F10x_StdPeriph_Lib_V3.5.0\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x\startup\arm *下面，将里面 <em>startup_stm32f10x_hd.s</em> 文件复制到 CORE 下面。</p>
</li>
<li>
<p>定位为<em>STM32F10x_StdPeriph_Lib_V3.5.0\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x</em>将里面的三个文件<em>stm32f10x.h，system_stm32f10x.c，system_stm32f10x.h</em>，复制到我们的 USER目录之下。</p>
</li>
<li>
<p>定位于<em>STM32F10x_StdPeriph_Lib_V3.5.0\Project\STM32F10x_StdPeriph_Template <em>下面的 4 个 文件</em>main.c，stm32f10x_conf.h，stm32f10x_it.c，stm32f10x_it.h</em> 复制到 USER 目录下面</p>
</li>
<li>
<p>下面我们将这些文件加入我们的工程中去。右键点击 Target1，选择 Manage Components</p>
</li>
<li>
<p>Project Targets 一栏，我们将 Target 名字修改为 Template,然后在 Groups 一栏删掉一个 Source Group1，建立三个 Groups：USER,CORE,FWLIB。然后点击 OK，可以看到我们的 Target名字以及 Groups 情况。</p>
<p><img src="C:%5CUsers%5Clym%5CAppData%5CRoaming%5Cmarktext%5Cimages%5C2022-09-21-18-22-46-image.png" alt=""></p>
</li>
<li>
<p>选择选择 Manage Components.然后选择需要添加文件的 Group，这里第一步我们选 择 FWLIB ， 然 后 点 击 右 边 的 Add Files, 定 位 到 我 们 刚 才 建 立 的 目 录STM32F10x_FWLib/src 下面，将里面所有的文件选中(Ctrl+A)，然后点击 Add，然后 Close.可以看到 Files 列表下面包含我们添加的文件。</p>
</li>
<li>
<p>将 Groups 定位到 CORE 和 USER 下面，添加需要的文件。这里我们的 CORE 下面需要添加的文件为 core_cm3.c，startup_stm32f10x_hd.s</p>
</li>
<li>
<p>USER 目录下面需要添加的文件为 main.c，stm32f10x_it.c，system_stm32f10x.c. <img src="https://s2.loli.net/2022/10/09/iz13ERkgntP7LuB.png" alt=""></p>
</li>
<li>
<p>接下来我们要编译工程，在编译之前我们首先要选择编译中间文件编译后存放目录。<br>
方法是点击魔术棒，然后选择“Output”选项下面的“Select folder for objects…”,然后选<br>
择目录为我们上面新建的 OBJ 目录。这里大家注意，如果我们不设置 Output 路径，那么默认的编译中间文件存放目录就是 MDK 自动生成的 Objects 目录和 Listings 目录</p>
</li>
<li>
<p>对于任何一个工程，我们都需要把工程中引用到的所有头文件的路径都包含到进来。回到工程主菜单，点击魔术棒 ，出来一个菜单，然后点击 c/c++选项.然后点击<br>
Include Paths 右边的按钮。弹出一个添加 path 的对话框，然后我们将图上面的 3 个目录添加进去。记住，keil 只会在一级目录查找，所以如果你的目录下面还有子目录，记得 path一定要定位到最后一级子目录。然后点击 OK<img src="https://s2.loli.net/2022/10/09/lJUjXz8Hy7gNWoa.png" alt=""></p>
</li>
<li>
<p>将正点原子的SYSTEM文件将.c和.h文件导入项目</p>
<p><a href="https://download.csdn.net/download/qq_36831734/86615348">本文源文件下载</a></p>
</li>
</ol>
]]></content>
      <categories>
        <category>STM32</category>
      </categories>
      <tags>
        <tag>STM32</tag>
        <tag>嵌入式</tag>
      </tags>
  </entry>
  <entry>
    <title>Requests:登录课程平台</title>
    <url>/2022/10/07/Requests-%E7%99%BB%E5%BD%95%E8%AF%BE%E7%A8%8B%E5%B9%B3%E5%8F%B0/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>SVM(支持向量机)——鸢尾花分类</title>
    <url>/2022/11/02/SVM%E9%B8%A2%E5%B0%BE%E8%8A%B1%E5%88%86%E7%B1%BB/</url>
    <content><![CDATA[<p><img src="https://s2.loli.net/2022/10/29/B7tm1VXbTC49D5Q.png" alt=""></p>
<h1 id="scikit-learn">scikit-learn</h1>
<p><a href="https://www.scikitlearn.com.cn/">sklearn (scikitlearn.com.cn)</a></p>
<p>scikit-learn 是基于 Python 语言的机器学习工具</p>
<h1 id="加载相关包">加载相关包</h1>
<p><a href="https://raw.githubusercontent.com/MrHarsh10/ImageHosting-/main/img/202210291202446.data">数据下载</a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> colors</span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> svm </span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> model_selection</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> matplotlib <span class="keyword">as</span> mpl</span><br></pre></td></tr></table></figure>
<h1 id="加载数据、切分数据集">加载数据、切分数据集</h1>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">iris_type</span>(<span class="params">s</span>):</span><br><span class="line">    it = &#123;<span class="string">b&#x27;Iris-setosa&#x27;</span>:<span class="number">0</span>, <span class="string">b&#x27;Iris-versicolor&#x27;</span>:<span class="number">1</span>,<span class="string">b&#x27;Iris-virginica&#x27;</span>:<span class="number">2</span>&#125; </span><br><span class="line">    <span class="keyword">return</span> it[s]</span><br><span class="line"></span><br><span class="line"><span class="comment">#数据准备</span></span><br><span class="line">data = np.loadtxt(<span class="string">&#x27;iris.data&#x27;</span>,  <span class="comment"># 数据文件路径i</span></span><br><span class="line">                  dtype=<span class="built_in">float</span>,    <span class="comment"># 数据类型</span></span><br><span class="line">                  delimiter=<span class="string">&#x27;,&#x27;</span>,  <span class="comment"># 数据分割符</span></span><br><span class="line">                  converters=&#123;<span class="number">4</span>:iris_type&#125;) <span class="comment"># 将第五列使用函数iris_type进行转换</span></span><br><span class="line"><span class="comment"># 数据分割</span></span><br><span class="line">x, y = np.split(data, (<span class="number">4</span>, ), axis=<span class="number">1</span>) <span class="comment"># 数据分组 第五列开始往后为y 代表纵向分割按列分割</span></span><br><span class="line">x = x[:, :<span class="number">2</span>]</span><br><span class="line">x_train, x_test, y_train, y_test=model_selection.train_test_split(x, y, random_state=<span class="number">1</span>, test_size=<span class="number">0.2</span></span><br></pre></td></tr></table></figure>
<p><img src="https://s2.loli.net/2022/11/04/4TkqhRPBLvEcprs.png" alt=""></p>
<p>大概鸢尾花的数据如上图，我们要做的就是分类</p>
<p>在超平面上将不同品种数据分割开</p>
<h1 id="SVM分类器的构建">SVM分类器的构建</h1>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">classifier</span>():</span><br><span class="line">    clf = svm.SVC(C=<span class="number">0.8</span>,                         <span class="comment"># 误差项惩罚系数</span></span><br><span class="line">                  kernel=<span class="string">&#x27;linear&#x27;</span>,               <span class="comment"># 线性核 高斯核 rbf</span></span><br><span class="line">                  decision_function_shape=<span class="string">&#x27;ovr&#x27;</span>) <span class="comment"># 决策函数</span></span><br><span class="line">    <span class="keyword">return</span> clf</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">train</span>(<span class="params">clf, x_train, y_train</span>):</span><br><span class="line">    clf.fit(x_train, y_train.ravel()) <span class="comment"># 训练集特征向量和 训练集目标值</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>C为误差项惩罚系：其越大要求拟合越高，相应泛化能力减弱</p>
<p>kernel有线性核,高斯核 ,rbf核</p>
</blockquote>
<h1 id="代码-9">代码</h1>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#加载相关包</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> colors</span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> svm</span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> model_selection</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> matplotlib <span class="keyword">as</span> mpl</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">iris_type</span>(<span class="params">s</span>):</span><br><span class="line">    it = &#123;<span class="string">b&#x27;Iris-setosa&#x27;</span>:<span class="number">0</span>, <span class="string">b&#x27;Iris-versicolor&#x27;</span>:<span class="number">1</span>,<span class="string">b&#x27;Iris-virginica&#x27;</span>:<span class="number">2</span>&#125;</span><br><span class="line">    <span class="keyword">return</span> it[s]</span><br><span class="line">data = np.loadtxt(<span class="string">&#x27;iris.data&#x27;</span>,</span><br><span class="line">                  dtype=<span class="built_in">float</span>,    <span class="comment"># 数据类型</span></span><br><span class="line">                  delimiter=<span class="string">&#x27;,&#x27;</span>,  <span class="comment"># 数据分割符</span></span><br><span class="line">                  converters=&#123;<span class="number">4</span>:iris_type&#125;)  <span class="comment"># 将第五列使用函数iris_type进行转换</span></span><br><span class="line">x,y=np.split(data,(<span class="number">4</span>,),axis=<span class="number">1</span>)<span class="comment">#将第5列设为y</span></span><br><span class="line">x=x[:,:<span class="number">2</span>]</span><br><span class="line">x_train, x_test, y_train, y_test=model_selection.train_test_split(x, y, random_state=<span class="number">1</span>, test_size=<span class="number">0.2</span>)</span><br><span class="line"><span class="comment"># SVM分类器构建</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">classifier</span>():</span><br><span class="line">    clf = svm.SVC(C=<span class="number">0.81</span>,                         <span class="comment"># 误差项惩罚系数</span></span><br><span class="line">                  kernel=<span class="string">&#x27;linear&#x27;</span>,               <span class="comment"># 线性核 高斯核 rbf</span></span><br><span class="line">                  decision_function_shape=<span class="string">&#x27;ovr&#x27;</span>) <span class="comment"># 决策函数</span></span><br><span class="line">    <span class="keyword">return</span> clf</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">train</span>(<span class="params">clf, x_train, y_train</span>):</span><br><span class="line">    clf.fit(x_train, y_train.ravel()) <span class="comment"># 训练集特征向量和 训练集目标值</span></span><br><span class="line"><span class="comment"># 2 定义模型 SVM模型定义</span></span><br><span class="line">clf = classifier()</span><br><span class="line"></span><br><span class="line">train(clf, x_train, y_train)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show_accuracy</span>(<span class="params">a, b, tip</span>):</span><br><span class="line">    acc = a.ravel() == b.ravel()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;%s Accuracy:%.3f&#x27;</span> % (tip, np.mean(acc)))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 分别打印训练集和测试集的准确率 score(x_train, y_train)表示输出 x_train,y_train在模型上的准确率</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">print_accuracy</span>(<span class="params">clf, x_train, y_train, x_test, y_test</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;training prediction:%.3f&#x27;</span> % (clf.score(x_train, y_train)))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;test data prediction:%.3f&#x27;</span> % (clf.score(x_test, y_test)))</span><br><span class="line">    <span class="comment"># 原始结果和预测结果进行对比 predict() 表示对x_train样本进行预测,返回样本类别</span></span><br><span class="line">    show_accuracy(clf.predict(x_train), y_train, <span class="string">&#x27;traing data&#x27;</span>)</span><br><span class="line">    show_accuracy(clf.predict(x_test), y_test, <span class="string">&#x27;testing data&#x27;</span>)</span><br><span class="line">    <span class="comment"># 计算决策函数的值 表示x到各个分割平面的距离</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;decision_function:\n&#x27;</span>, clf.decision_function(x_train))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">draw</span>(<span class="params">clf, x</span>):</span><br><span class="line">    iris_feature = <span class="string">&#x27;sepal length&#x27;</span>, <span class="string">&#x27;sepal width&#x27;</span>, <span class="string">&#x27;petal length&#x27;</span>, <span class="string">&#x27;petal width&#x27;</span></span><br><span class="line">    <span class="comment"># 开始画图</span></span><br><span class="line">    x1_min, x1_max = x[:, <span class="number">0</span>].<span class="built_in">min</span>(), x[:, <span class="number">0</span>].<span class="built_in">max</span>()</span><br><span class="line">    x2_min, x2_max = x[:, <span class="number">1</span>].<span class="built_in">min</span>(), x[:, <span class="number">1</span>].<span class="built_in">max</span>()</span><br><span class="line">    <span class="comment"># 生成网格采样点</span></span><br><span class="line">    x1, x2 = np.mgrid[x1_min:x1_max:<span class="number">200j</span>, x2_min:x2_max:<span class="number">200j</span>]</span><br><span class="line">    <span class="comment"># 测试点</span></span><br><span class="line">    grid_test = np.stack((x1.flat, x2.flat), axis=<span class="number">1</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;grid_test:\n&#x27;</span>, grid_test)</span><br><span class="line">    <span class="comment"># 输出样本到决策面的距离</span></span><br><span class="line">    z = clf.decision_function(grid_test)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;the distance to decision plane:\n&#x27;</span>, z)</span><br><span class="line">    grid_hat = clf.predict(grid_test)</span><br><span class="line">    <span class="comment"># 预测分类值 得到[0, 0, ..., 2, 2]</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;grid_hat:\n&#x27;</span>, grid_hat)</span><br><span class="line">    <span class="comment"># 使得grid_hat 和 x1 形状一致</span></span><br><span class="line">    grid_hat = grid_hat.reshape(x1.shape)</span><br><span class="line">    cm_light = mpl.colors.ListedColormap([<span class="string">&#x27;#A0FFA0&#x27;</span>, <span class="string">&#x27;#FFA0A0&#x27;</span>, <span class="string">&#x27;#A0A0FF&#x27;</span>])</span><br><span class="line">    cm_dark = mpl.colors.ListedColormap([<span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;r&#x27;</span>])</span><br><span class="line"></span><br><span class="line">    plt.pcolormesh(x1, x2, grid_hat, cmap=cm_light)</span><br><span class="line">    plt.scatter(x[:, <span class="number">0</span>], x[:, <span class="number">1</span>], c=np.squeeze(y), edgecolor=<span class="string">&#x27;k&#x27;</span>, s=<span class="number">50</span>, cmap=cm_dark)</span><br><span class="line">    plt.scatter(x_test[:, <span class="number">0</span>], x_test[:, <span class="number">1</span>], s=<span class="number">120</span>, facecolor=<span class="string">&#x27;none&#x27;</span>, zorder=<span class="number">10</span>)</span><br><span class="line">    plt.xlabel(iris_feature[<span class="number">0</span>], fontsize=<span class="number">20</span>)</span><br><span class="line">    plt.ylabel(iris_feature[<span class="number">1</span>], fontsize=<span class="number">20</span>)</span><br><span class="line">    plt.xlim(x1_min, x1_max)</span><br><span class="line">    plt.ylim(x2_min, x2_max)</span><br><span class="line">    plt.title(<span class="string">&#x27;Iris data classification via SVM&#x27;</span>, fontsize=<span class="number">30</span>)</span><br><span class="line">    plt.grid()</span><br><span class="line">    plt.show()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;-------- eval ----------&#x27;</span>)</span><br><span class="line">print_accuracy(clf, x_train, y_train, x_test, y_test)</span><br><span class="line"><span class="comment"># 5 模型使用</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;-------- show ----------&#x27;</span>)</span><br><span class="line">draw(clf, x)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>机器学习</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>机器学习</tag>
        <tag>人工智能</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2022/08/08/hello-world/</url>
    <content><![CDATA[<h2 id="在Hexo上写文章">在Hexo上写文章</h2>
<p>以前我是有写博客的用的是wordpress，wp可以说非常优秀，各种插件与主题，个性化也是非常的高，就是写博客就要有专门的时间写博客，而现在我发现hexo可以用markdown边写笔记，顺便就发博客了，很方便！</p>
<h2 id="Hello-World">Hello World</h2>
<p>就让一句&quot;Hello world&quot;来开始新的旅程！</p>
]]></content>
      <categories>
        <category>随想</category>
      </categories>
      <tags>
        <tag>随想</tag>
      </tags>
  </entry>
  <entry>
    <title>requests库的使用</title>
    <url>/2022/08/13/requests%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h2 id="请求">请求</h2>
<ul>
<li>
<p>post(‘url’)</p>
</li>
<li>
<p>put(‘url’)</p>
</li>
<li>
<p>delete(‘url’)</p>
</li>
<li>
<p>head(‘url’)</p>
</li>
<li>
<p>options(‘url’)</p>
</li>
<li>
<p>get(‘url’)</p>
</li>
</ul>
<h3 id="GET请求">GET请求</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> urlencode</span><br><span class="line">data=&#123;</span><br><span class="line">    <span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;hha&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;age&#x27;</span>:<span class="string">&#x27;a&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">r=requests.get(<span class="string">&#x27;http://httpbin.org/get&#x27;</span>,params=data)</span><br><span class="line"><span class="built_in">print</span>(r.text)</span><br><span class="line">js=r.json()</span><br><span class="line"><span class="built_in">print</span>(js[<span class="string">&quot;headers&quot;</span>][<span class="string">&quot;User-Agent&quot;</span>])</span><br><span class="line">r.text)</span><br></pre></td></tr></table></figure>
<p>下载图片</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">r=requests.get(<span class="string">&#x27;https://s2.loli.net/2022/08/08/XPao6Bwfkjc2drg.jpg&#x27;</span>)</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;pic.jpg&#x27;</span>,<span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(r.content)</span><br></pre></td></tr></table></figure>
<h3 id="POST请求">POST请求</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">data=&#123;</span><br><span class="line">    <span class="string">&quot;1&quot;</span>:<span class="string">&quot;1&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">r=requests.post(<span class="string">&#x27;http://httpbin.org/post&#x27;</span>,data=data)</span><br><span class="line"><span class="built_in">print</span>(r.text)</span><br></pre></td></tr></table></figure>
<p>文件上传</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">files=&#123;</span><br><span class="line">    <span class="string">&#x27;files&#x27;</span>:<span class="built_in">open</span>(<span class="string">&#x27;pic.jpg&#x27;</span>,<span class="string">&#x27;rb&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line">r=requests.post(<span class="string">&#x27;http://httpbin.org/post&#x27;</span>,files=files)</span><br><span class="line"><span class="built_in">print</span>(r.text)</span><br></pre></td></tr></table></figure>
<h3 id="会话维持">会话维持</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">s=requests.session()</span><br><span class="line">s.get(<span class="string">&#x27;http://httpbin.org/cookies/set/number/12345&#x27;</span>)</span><br><span class="line">r=s.get(<span class="string">&#x27;http://httpbin.org/cookies&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(r.text)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>爬虫</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>urllib库的使用</title>
    <url>/2022/08/09/urllib%E5%BA%93%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h2 id="开始-2">开始</h2>
<p>urllib是Python内置的HTTP请求模块，其包含以下四个模块</p>
<ul>
<li>
<p>request:HTTP请求模块</p>
</li>
<li>
<p>error:异常处理模块</p>
</li>
<li>
<p>parse:工具模块，拆分、解析、合并</p>
</li>
<li>
<p>robotparser:识别网站robots.txt文件，判断哪些网站可以爬。</p>
</li>
</ul>
<h2 id="请求发送">请求发送</h2>
<ol>
<li>
<h3 id="urlopen">urlopen()</h3>
</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line">response=urllib.request.urlopen(<span class="string">&#x27;https://www.baidu.com&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(response.read().decode(<span class="string">&#x27;utf-8&#x27;</span>))<span class="comment">#read可以返回网页内容， 网页编码为UTF-8需要用decode,不然会有转义字符</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(response)) <span class="comment">#类型</span></span><br><span class="line"><span class="built_in">print</span>(response.status) <span class="comment">#获取响应状态码</span></span><br><span class="line"><span class="built_in">print</span>(response.getheaders()) <span class="comment">#获取响应头rs())</span></span><br></pre></td></tr></table></figure>
<p><img src="https://s2.loli.net/2022/08/09/rbAdLaeVoSgvB8m.png" alt="运行结果"></p>
<ul>
<li>
<p>data参数</p>
<p>data参数为可选，使用需要，使用bytes()转换为字节流编码格式</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="keyword">import</span>  urllib.parse</span><br><span class="line">data=<span class="built_in">bytes</span>(urllib.parse.urlencode(&#123;<span class="string">&#x27;B&#x27;</span>:<span class="string">&#x27;1&#x27;</span>&#125;),encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">response=urllib.request.urlopen(<span class="string">&#x27;http://httpbin.org/post&#x27;</span>,data=data)</span><br><span class="line"><span class="built_in">print</span>(response.read().decode(<span class="string">&#x27;utf8&#x27;</span>))</span><br></pre></td></tr></table></figure>
</li>
</ul>
<img src="https://s2.loli.net/2022/08/09/29Nm7Q6FEt3B4Kh.png" title="" alt="运行结果" data-align="right">
<p>我们的数据出现在了form字段里，这是我们用POST方法传递的数据</p>
<ul>
<li>
<p>timeout参数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    response=urllib.request.urlopen(<span class="string">&#x27;http://www.google.com&#x27;</span>,timeout=<span class="number">1</span>)</span><br><span class="line">    <span class="built_in">print</span>(response.read().decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line"><span class="keyword">except</span> urllib.error.URLError <span class="keyword">as</span> e:</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">isinstance</span>(e.reason,socket.timeout):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;TIME OUT&#x27;</span>)</span><br></pre></td></tr></table></figure>
</li>
</ul>
<ol start="2">
<li>
<h3 id="Request">Request()</h3>
<blockquote>
<p><a href="https://docs.python.org/3/library/urllib.request.html">urllib.request — Extensible library for opening URLs — Python 3.10.6 documentation</a></p>
</blockquote>
<p>Request能实现更多参数的请求</p>
<blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, url, data=<span class="literal">None</span>, headers=&#123;&#125;,</span></span><br><span class="line"><span class="params">                 origin_req_host=<span class="literal">None</span>, unverifiable=<span class="literal">False</span>,</span></span><br><span class="line"><span class="params">                 method=<span class="literal">None</span></span>):</span><br></pre></td></tr></table></figure>
<ul>
<li>
<p><strong>URL:请求URL</strong></p>
</li>
<li>
<p><strong>data:必须为bytes(),如果是字典可以用urllib.parse.urlencode()</strong></p>
</li>
<li>
<p><strong>headers:为一个字典</strong></p>
</li>
<li>
<p><strong>origin_req_host：表示这个请求是否是无法验证的</strong></p>
</li>
<li>
<p><strong>method:请求方法</strong></p>
</li>
</ul>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request,parse</span><br><span class="line">url=<span class="string">&#x27;http://httpbin.org/post&#x27;</span></span><br><span class="line">headers=&#123;</span><br><span class="line">    <span class="string">&#x27;Host&#x27;</span>:<span class="string">&#x27;httpbin.org&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>:<span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/104.0.5112.81 Safari/537.36 Edg/104.0.1293.47&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">dict</span>=&#123;<span class="string">&#x27;b&#x27;</span>:<span class="number">1</span>&#125;</span><br><span class="line">data=<span class="built_in">bytes</span>(parse.urlencode(<span class="built_in">dict</span>),encoding=<span class="string">&#x27;utf8&#x27;</span>)</span><br><span class="line">data=<span class="built_in">bytes</span>(parse.urlencode(&#123;<span class="string">&#x27;B&#x27;</span>:<span class="string">&#x27;1&#x27;</span>&#125;),encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">req=request.Request(url,data=data,headers=headers,method=<span class="string">&#x27;POST&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">另一种请求头的添加方式</span></span><br><span class="line"><span class="string">req=request.Request(url=url,data=data,method=&#x27;POST&#x27;)</span></span><br><span class="line"><span class="string">req.add_header(&#x27;Host&#x27;,&#x27;httpbin.org&#x27;,)</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">response=request.urlopen(req)</span><br><span class="line"><span class="built_in">print</span>(response.read().deco</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="进阶用法">进阶用法</h2>
<h3 id="Handler">Handler</h3>
<p>现在我们介绍Handler</p>
<p>比如：</p>
<blockquote>
<p>HTTPDefaultErrorHandler:用于处理响应错误，错误会抛出HTTPError类型的异常</p>
<p>HTTPRedirectHandler:处理重定向</p>
<p>HTTPCookieProcesser:处理Cookies</p>
<p>ProxyHandler:设置代理，默认代理为空</p>
<p>HTTPPasswordMgr:用于管理密码，维护了用户名和密码</p>
<p>HTTPBasicAuthHandler:用于管理认证</p>
</blockquote>
<h3 id="Cookies">Cookies</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> http.cookiejar,urllib.request</span><br><span class="line">filename=<span class="string">&#x27;cookies.txt&#x27;</span></span><br><span class="line">cookie=http.cookiejar.MozillaCookieJar(filename)</span><br><span class="line">handler=urllib.request.HTTPCookieProcessor(cookie)</span><br><span class="line">opener=urllib.request.build_opener(handler)</span><br><span class="line">response=opener.<span class="built_in">open</span>(<span class="string">&#x27;http://www.baidu.com&#x27;</span>)</span><br><span class="line">cookie.save(ignore_discard=<span class="literal">True</span>,ignore_expires=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> http.cookiejar,urllib.request</span><br><span class="line">cookie=http.cookiejar.CookieJar()</span><br><span class="line">handler=urllib.request.HTTPCookieProcessor(cookie)</span><br><span class="line">opener=urllib.request.build_opener(handler)</span><br><span class="line">response=opener.<span class="built_in">open</span>(<span class="string">&#x27;http://www.baidu.com&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> cookie:</span><br><span class="line">    <span class="built_in">print</span>(item.</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> http.cookiejar,urllib.request</span><br><span class="line">cookie=http.cookiejar.LWPCookieJar()</span><br><span class="line">cookie.load(<span class="string">&#x27;cookies.txt&#x27;</span>,ignore_expires=<span class="number">1</span>,ignore_discard=<span class="number">1</span>)</span><br><span class="line">handler=urllib.request.HTTPCookieProcessor(cookie)</span><br><span class="line">opener=urllib.request.build_opener(handler)</span><br><span class="line">response=opener.<span class="built_in">open</span>(<span class="string">&#x27;http://www.baidu.com&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(response.read.decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br></pre></td></tr></table></figure>
<h2 id="异常处理">异常处理</h2>
<h3 id="URLError">URLError</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request,error</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    response=request.urlopen(<span class="string">&#x27;http://mrharsh.top/index.htm&#x27;</span>)</span><br><span class="line"><span class="keyword">except</span> error.URLError <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(e.reason)</span><br></pre></td></tr></table></figure>
<h3 id="HTTPError">HTTPError</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request,error</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    response=request.urlopen(<span class="string">&#x27;http://mrharsh.top/index.htm&#x27;</span>)</span><br><span class="line"><span class="keyword">except</span> error.HTTPError <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(e.reason)</span><br><span class="line">    <span class="built_in">print</span>(e.code)</span><br><span class="line">    </span><br></pre></td></tr></table></figure>
<p>URLError是HTTPError的父类</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request,error</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    response=request.urlopen(<span class="string">&#x27;http://mrharsh.top/index.htm&#x27;</span>)</span><br><span class="line"><span class="keyword">except</span> error.HTTPError <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(e.reason)</span><br><span class="line">    <span class="built_in">print</span>(e.code)</span><br><span class="line"><span class="keyword">except</span> error.URLError <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(e.reason)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;SUCCESS!!&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="解析链接">解析链接</h2>
<h3 id="urlparse">urlparse</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> urlparse</span><br><span class="line">result=urlparse(<span class="string">&#x27;https://www.baidu.com/s?wd=%E7%89%B9%E6%9C%97%E6%99%AE%E6%88%96%E5%B0%86%E9%9D%A2%E4%B8%B4%E6%9C%80%E9%AB%9830%E5%B9%B4%E5%88%91%E6%9C%9F&amp;tn=baiduhome_pg&amp;usm=1&amp;rsv_idx=2&amp;ie=utf-8&amp;rsv_pq=beff06110014fb0c&amp;oq=%E9%BB%91%E5%B1%B1%E5%8F%91%E7%94%9F%E6%9E%AA%E5%87%BB%E4%BA%8B%E4%BB%B6%E8%87%B411%E6%AD%BB6%E4%BC%A4&amp;rsv_t=203cnvqhWV3frPIJkl4SxrljZIVFGNv6ZJkChXgM4YBU2qiBwG0dd0rTfPGYEJdqPkDg&amp;rqid=beff06110014fb0c&amp;rsf=a7183c00b74706d91bca215ee108b466_1_15_2&amp;rsv_dl=0_right_fyb_pchot_20811&amp;sa=0_right_fyb_pchot_20811&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure>
<h3 id="urlunparse">urlunparse()</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> urlunparse</span><br><span class="line">data=[<span class="string">&#x27;https&#x27;</span>,<span class="string">&#x27;wwww.baidu.com&#x27;</span>,<span class="string">&#x27;index.html&#x27;</span>,<span class="string">&#x27;user&#x27;</span>,<span class="string">&#x27;a=6&#x27;</span>,<span class="string">&#x27;comment&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(urlunparse(data))</span><br></pre></td></tr></table></figure>
<h3 id="urlsplit">urlsplit</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> urlsplit</span><br><span class="line">result=urlsplit(<span class="string">&#x27;https://www.baidu.com/s?wd=python&amp;pn=10&amp;oq=python&amp;tn=baiduhome_pg&amp;ie=utf-8&amp;usm=4&amp;rsv_idx=2&amp;rsv_pq=cb482fb3002cef17&amp;rsv_t=6415j2DcN1b3Ov7Yj0M6vjanBErrN6Meq3YKeNQ%2BhsGLzD1xnsUAYddpkN%2FlYnFdsQ07&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> result:</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br></pre></td></tr></table></figure>
<h3 id="urlunsplit">urlunsplit()</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> urlunsplit</span><br><span class="line">data=[<span class="string">&#x27;http&#x27;</span>,<span class="string">&#x27;www.baidu.com&#x27;</span>,<span class="string">&#x27;index.html&#x27;</span>,<span class="string">&#x27;a=0&#x27;</span>,<span class="string">&#x27;c&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(urlunsplit(data))</span><br></pre></td></tr></table></figure>
<h3 id="urljoin">urljoin()</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> urljoin</span><br><span class="line"><span class="built_in">print</span>(urljoin(<span class="string">&#x27;http://www.baidu.com&#x27;</span>,<span class="string">&#x27;index.html&#x27;</span>))</span><br></pre></td></tr></table></figure>
<h3 id="urlencode">urlencode</h3>
<p>在GET中加参数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> urlencode</span><br><span class="line">params=&#123;</span><br><span class="line">    <span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;s&#x27;</span>,</span><br><span class="line">    <span class="string">&quot;1&quot;</span>:<span class="string">&quot;2&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">base_url=<span class="string">&#x27;http//www.baidu.com&#x27;</span></span><br><span class="line">urll=base_url+urlencode(params)</span><br><span class="line"><span class="built_in">print</span>(urll)</span><br></pre></td></tr></table></figure>
<h3 id="parse-qs">parse_qs()</h3>
<p>反序列化</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> urlsplit,parse_qs</span><br><span class="line">result=urlsplit(<span class="string">&#x27;https://www.baidu.com/s?wd=python&amp;pn=10&amp;oq=python&amp;tn=baiduhome_pg&amp;ie=utf-8&amp;usm=4&amp;rsv_idx=2&amp;rsv_pq=cb482fb3002cef17&amp;rsv_t=6415j2DcN1b3Ov7Yj0M6vjanBErrN6Meq3YKeNQ%2BhsGLzD1xnsUAYddpkN%2FlYnFdsQ07&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(parse_qs(result.query))</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="quote">quote()</h3>
<p>将内容转为URL编码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> quote,urljoin</span><br><span class="line">keyword=<span class="string">&#x27;python&#x27;</span></span><br><span class="line">url=<span class="string">&#x27;http://www.baidu.com/s?wd=&#x27;</span>+quote(keyword)</span><br><span class="line"><span class="built_in">print</span>(url)</span><br></pre></td></tr></table></figure>
<h3 id="unquote">unquote()</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> quote,urljoin,unquote</span><br><span class="line">keyword=<span class="string">&#x27;你好&#x27;</span></span><br><span class="line">url=<span class="string">&#x27;https://www.baidu.com/s?wd=&#x27;</span>+quote(keyword)</span><br><span class="line"><span class="built_in">print</span>(url)</span><br><span class="line"><span class="built_in">print</span>(unquote(url))</span><br></pre></td></tr></table></figure>
<h2 id="Robots协议">Robots协议</h2>
<h3 id="robotparser">robotparser()</h3>
<ul>
<li>
<p><strong>set_ur()</strong>:设置Robots.txt链接</p>
</li>
<li>
<p><strong>read()</strong>:读取robots.txt并分析</p>
</li>
<li>
<p><strong>parse()</strong>:解析robots.txt文件</p>
</li>
<li>
<p><strong>can_fetch()</strong>:传入User-Agent和URL,判读是否可爬取</p>
</li>
<li>
<p><strong>mtime()</strong>:返回上次抓取的时间</p>
</li>
<li>
<p><strong>modified()</strong>:设置当前时间为上次抓取时间</p>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.robotparser <span class="keyword">import</span> RobotFileParser</span><br><span class="line">rp=RobotFileParser()</span><br><span class="line">rp.set_url(<span class="string">&#x27;https://www.bilibili.com/robots.txt&#x27;</span>)</span><br><span class="line">rp.read()</span><br><span class="line"><span class="built_in">print</span>(rp.can_fetch(<span class="string">&#x27;Yisouspider&#x27;</span>,<span class="string">&#x27;https://www.bilibili.com/video/BV1fN4y1u7s1?spm_id_from=333.1007.tianma.2-3-6.click&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(rp.can_fetch(<span class="string">&#x27;*&#x27;</span>,<span class="string">&#x27;https://www.bilibili.com/video/BV1fN4y1u7s1?spm_id_from=333.1007.tianma.2-3-6.click&#x27;</span>))</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>爬虫</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>selenium:川农学工网自动化登录</title>
    <url>/2022/10/06/selenium-%E5%B7%9D%E5%86%9C%E5%AD%A6%E5%B7%A5%E7%BD%91%E8%87%AA%E5%8A%A8%E5%8C%96%E7%99%BB%E5%BD%95/</url>
    <content><![CDATA[<h1 id="实现步骤">实现步骤</h1>
<p><img src="https://s2.loli.net/2022/10/09/UVOKsQGEFm37fIg.png" alt=""></p>
<p>我萌使用检查工具查看相应的代码</p>
<p><img src="https://s2.loli.net/2022/10/09/ialeAGdSIMUFuD6.png" alt=""></p>
<p>同理我们知道了相应的html代码</p>
<p>验证码使用截屏方式截图后二值化处理后，进行OCR识别，如果错误，重复识别</p>
<p>，如果密码错误，则退出</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> tesserocr</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> tesserocr</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> io <span class="keyword">import</span> BytesIO</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">from</span> retrying <span class="keyword">import</span> retry</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support.wait <span class="keyword">import</span> WebDriverWait</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.keys <span class="keyword">import</span> Keys</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support <span class="keyword">import</span> expected_conditions <span class="keyword">as</span> EC</span><br><span class="line"><span class="keyword">from</span> selenium.common.exceptions <span class="keyword">import</span> TimeoutException,NoSuchElementException</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">preprocess</span>(<span class="params">image</span>):</span><br><span class="line">    array =image</span><br><span class="line">    array = np.where(image &gt; <span class="number">100</span>, <span class="number">255</span>, <span class="number">0</span>)</span><br><span class="line">    image = Image.fromarray(array.astype(<span class="string">&#x27;uint8&#x27;</span>))</span><br><span class="line">    <span class="keyword">return</span> image</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login</span>(<span class="params">browser</span>):</span><br><span class="line">    username = <span class="string">&quot;user&quot;</span></span><br><span class="line">    psw = <span class="string">&quot;psw&quot;</span></span><br><span class="line">    browser.get(<span class="string">&quot;http://xsc.sicau.edu.cn/Sys/UserLogin.aspx&quot;</span>)</span><br><span class="line">    <span class="built_in">input</span> = browser.find_element(By.ID, value=<span class="string">&#x27;UserName&#x27;</span>)</span><br><span class="line">    <span class="built_in">input</span>.send_keys(username)</span><br><span class="line">    <span class="built_in">input</span> = browser.find_element(By.NAME, value=<span class="string">&#x27;UserPass&#x27;</span>)</span><br><span class="line">    <span class="built_in">input</span>.send_keys(psw)</span><br><span class="line">    browser.set_window_size(<span class="number">1000</span>, <span class="number">800</span>)</span><br><span class="line">    browser.save_screenshot(<span class="string">&#x27;1.png&#x27;</span>)</span><br><span class="line">    image = Image.<span class="built_in">open</span>(<span class="string">&#x27;1.png&#x27;</span>)</span><br><span class="line">    image = image.convert(<span class="string">&#x27;RGB&#x27;</span>)</span><br><span class="line">    image = np.array(image)</span><br><span class="line">    image = image[<span class="number">480</span>:<span class="number">503</span>, <span class="number">1030</span>:<span class="number">1103</span>, :]</span><br><span class="line">    image = preprocess(image)</span><br><span class="line">    image = image.convert(<span class="string">&#x27;L&#x27;</span>)</span><br><span class="line">    plt.imshow(image)</span><br><span class="line">    plt.show()</span><br><span class="line">    code = tesserocr.image_to_text(image)</span><br><span class="line">    code = code.strip()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;验证码识别结果&quot;</span>, code)</span><br><span class="line">    <span class="keyword">if</span> code.isdigit():</span><br><span class="line">        <span class="built_in">input</span> = browser.find_element(By.ID, value=<span class="string">&#x27;CheckCode&#x27;</span>)</span><br><span class="line">        code = <span class="built_in">str</span>(code)</span><br><span class="line">        <span class="built_in">input</span>.send_keys(code)</span><br><span class="line">        <span class="built_in">input</span> = browser.find_element(By.ID, value=<span class="string">&#x27;CheckCode&#x27;</span>)</span><br><span class="line">        <span class="built_in">input</span>.send_keys(code)</span><br><span class="line">        <span class="built_in">input</span> = browser.find_element(By.ID, value=<span class="string">&#x27;Btn_OK&#x27;</span>)</span><br><span class="line">        <span class="built_in">input</span>.click()</span><br><span class="line">        wait=WebDriverWait(browser,<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="built_in">input</span>=wait.until(EC.alert_is_present())</span><br><span class="line">            dig_alert = browser.switch_to.alert</span><br><span class="line">            <span class="keyword">if</span>(dig_alert.text==<span class="string">&quot;用户名或密码错误！&quot;</span>):</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;用户名或密码错误&quot;</span>)</span><br><span class="line">                <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">            dig_alert.accept()</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;验证码失败了&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;识别有错&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    browser = webdriver.Edge()</span><br><span class="line">    browser.start_client()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>):</span><br><span class="line">       p=login(browser)</span><br><span class="line">       <span class="keyword">if</span> p==<span class="number">1</span>:</span><br><span class="line">           <span class="built_in">print</span>(<span class="string">&quot;登录成功&quot;</span>)</span><br><span class="line">           <span class="keyword">break</span></span><br><span class="line">       <span class="keyword">elif</span> p==-<span class="number">1</span>:</span><br><span class="line">           <span class="keyword">break</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>爬虫</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>刷题笔记㈠</title>
    <url>/2022/08/11/%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0%E3%88%A0/</url>
    <content><![CDATA[<h1 id="额，感觉这很奇怪，下次不写了"><em>额，感觉这很奇怪，下次不写了</em></h1>
<h1 id="面试题-08-05-递归乘法-力扣（LeetCode）"><a href="https://leetcode.cn/problems/recursive-mulitply-lcci/">面试题 08.05. 递归乘法 - 力扣（LeetCode）</a></h1>
<h2 id="思路：">思路：</h2>
<blockquote>
<p>A<em>B=MAX</em>(MIN-1+1)=MAX*(MIN-1)+MAX</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">multiply</span><span class="params">(<span class="type">int</span> A, <span class="type">int</span> B)</span> </span>&#123;</span><br><span class="line">       <span class="type">int</span> Max=<span class="built_in">max</span>(A,B);</span><br><span class="line">       <span class="type">int</span> Min=<span class="built_in">min</span>(A,B);</span><br><span class="line">       <span class="keyword">if</span>(Min==<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(Min==<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> Max;</span><br><span class="line">       <span class="keyword">return</span> <span class="built_in">multiply</span>(Min<span class="number">-1</span>,Max)+Max;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h1 id="2119-反转两次的数字-力扣（LeetCode）"><a href="https://leetcode.cn/problems/a-number-after-a-double-reversal/submissions/">2119. 反转两次的数字 - 力扣（LeetCode）</a></h1>
<blockquote>
<p>老实人真会反转两次</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">isSameAfterReversals</span><span class="params">(<span class="type">int</span> num)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> num == <span class="number">0</span> || num % <span class="number">10</span> != <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h1 id="剑指-Offer-58-II-左旋转字符串-力扣（LeetCode）"><a href="https://leetcode.cn/problems/zuo-xuan-zhuan-zi-fu-chuan-lcof/submissions/">剑指 Offer 58 - II. 左旋转字符串 - 力扣（LeetCode）</a></h1>
<blockquote>
<p>越界处理用取模</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">reverseLeftWords</span><span class="params">(string s, <span class="type">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> len=s.<span class="built_in">length</span>();</span><br><span class="line">        <span class="function">string <span class="title">str</span><span class="params">(s)</span></span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;len;i++)</span><br><span class="line">            s[i]=str[(i+n)%len];</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h1 id="136-只出现一次的数字-力扣（LeetCode）"><a href="https://leetcode.cn/problems/single-number/">136. 只出现一次的数字 - 力扣（LeetCode）</a></h1>
<p>本题采用异或运算</p>
<blockquote>
<p><strong>异或运算性质</strong></p>
<blockquote>
<ol>
<li>a^a=0；</li>
<li>a^0=a;</li>
<li>a^b=b^a</li>
</ol>
</blockquote>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">singleNumber</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> ans=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;nums.<span class="built_in">size</span>();i++)</span><br><span class="line">        ans^=nums[i];</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h1 id="268-丢失的数字-力扣（LeetCode）"><a href="https://leetcode.cn/problems/missing-number/submissions/">268. 丢失的数字 - 力扣（LeetCode）</a></h1>
<blockquote>
<p>求和做减法</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">missingNumber</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n=nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="type">int</span> sum=n*(n+<span class="number">1</span>)/<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> it:nums)</span><br><span class="line">        sum-=it;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h1 id="剑指-Offer-53-II-0～n-1中缺失的数字-力扣（LeetCode）"><a href="https://leetcode.cn/problems/que-shi-de-shu-zi-lcof/submissions/">剑指 Offer 53 - II. 0～n-1中缺失的数字 - 力扣（LeetCode）</a></h1>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">missingNumber</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> ans=<span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> n=nums.<span class="built_in">size</span>()+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">        ans^=i;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> it:nums)</span><br><span class="line">        ans^=it;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Python和NumPy构建神经网络模型</title>
    <url>/2022/09/26/%E4%BD%BF%E7%94%A8Python%E5%92%8CNumPy%E6%9E%84%E5%BB%BA%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E6%A8%A1%E5%9E%8B/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>人工智能</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>人工智能</tag>
      </tags>
  </entry>
  <entry>
    <title>机器学习概念</title>
    <url>/2022/10/27/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%A6%82%E5%BF%B5/</url>
    <content><![CDATA[<h1 id="机器学习概念">机器学习概念</h1>
<img src="https://s2.loli.net/2022/10/28/jcTI4nM2LHCuVgU.png" title="" alt="" data-align="center">
<p>所谓“机器学习”就是通过对数据进行反复得学习，来找出其中的规律和模式。</p>
<p>机器学习（Machine Learning）是一门多领域交叉学科，涉及概率论、统计学、逼近论、凸分析、算法复杂度理论等多门学科 。专门研究计算机怎样模拟或实现人类的学习行为，以获取新知识或技能，重新组织已有的知识结构使之不断改善自身的性能。</p>
<h1 id="各类机器学习算法">各类机器学习算法</h1>
<h2 id="监督学习">监督学习</h2>
<p>监督学习（supervised learning）：从给定的有标注的训练数据集中学习出一个函数(模型参数)，当新的数据到来时可以根据这个函数预测结果。 常见任务包括<strong>分类</strong>与<strong>回归</strong></p>
<ul>
<li>
<p>分类问题：对数据所属类别进行预测</p>
</li>
<li>
<p>回归问题：连续变化的数值进行预测</p>
</li>
</ul>
<p><img src="https://s2.loli.net/2022/10/28/vGMrEHVPWA8BgIC.png" alt=""></p>
<h2 id="无监督学习">无监督学习</h2>
<p>无监督学习（unsupervised learning）：没有标注的训练数据集，需要根据样本间的统计规律对样本集进行分析，常见任务如<strong>聚类</strong>等</p>
<p><img src="https://s2.loli.net/2022/10/28/cHDkVoXfP9AhgSs.png" alt=""></p>
<h2 id="半监督学习">半监督学习</h2>
<p>半监督学习(Semi-supervised learning)结合（少量的）标注训练数据和(大量的）未标注数据来进行数据的分类学习。</p>
<p>一般情况下，我们需要在某些假设的基础上来建立未标记数据和目标之间的联系。目前，在半监督学习中有两个常用的基本假设（两种假设都是基于“相似的样本拥有相似的输出”）：</p>
<ol>
<li>
<p>聚类假设<br>
是指相同聚类中的数据有较大的可能有相同的标记（假设数据存在簇结构，同一个簇的样本属于同一个类别）。根据该假设，决策边界就应该尽量通过数据较为稀疏的地方，从而避免把稠密的聚类中的数据点分到决策边界两侧。如 TSVM算法</p>
</li>
<li>
<p>流形假设<br>
（将高纬数据嵌入到低维流形中，当两个样例处于低维流行中的一个小局部领域内时，它们具有 相似的类标签），是指处于一个很小的局部领域内的数据具有相似的性质，其标记也应该相似（这一假设反映了决策函数的局部平滑性。）。 因此，流形假设可看做聚类假设的推广，但流形假设对输出值没有限制，因此比聚类假设的适用范围更广，可用于更多类型的学习任务。 和聚类假设的主要不同是，聚类假设主要关注的是整体特性，流形假设主要考虑的是模型的局部特性。<br>
<img src="https://s2.loli.net/2022/10/28/87PVjXANTiSBRH5.png" alt=""></p>
</li>
</ol>
<h2 id="强化学习">强化学习</h2>
<p>强化学习（Reinforcement Learning）：外部环境对输出只给出评价信息而非正确答案，学习机通过强化受奖励的动作来改善自身的性能。<img src="https://s2.loli.net/2022/10/28/4F9tbYJq2MDNfgv.png" alt=""></p>
<h1 id="机器学习解决的问题">机器学习解决的问题</h1>
<blockquote>
<ul>
<li>
<p>分类问题</p>
</li>
<li>
<p>回归问题</p>
</li>
<li>
<p>聚类问题</p>
</li>
<li>
<p>其它问题</p>
</li>
</ul>
</blockquote>
<h2 id="分类问题">分类问题</h2>
<p>分类问题是<strong>监督</strong>学习的一个核心问题，它从数据中学习一个分类决策函数或分类模型(分类器(classifier))，对新的输入进行输出预测，输出变量取有限个离散值。<img src="https://s2.loli.net/2022/10/28/GNjyqLCIlBtT1c5.png" alt=""></p>
<h3 id="决策树">决策树</h3>
<ul>
<li>
<p>决策树</p>
<ul>
<li>树状结构</li>
</ul>
<ul>
<li>
<p>非叶节点：对应一个特征属性，每个分支代表这个特征属性在某个值域上的输出</p>
</li>
<li>
<p>叶节点：对应一个类别</p>
</li>
</ul>
</li>
<li>
<p>决策过程</p>
<ul>
<li>根节点开始，测试待分类项中相应的特征属性，并按照其值选择输出分支，直到到达叶子节点，将叶子节点存放的类别作为决策结果</li>
</ul>
</li>
<li>
<p>构建决策树</p>
<ul>
<li>
<p>特征选择：选取对训练数据具有分类能力的特征</p>
</li>
<li>
<p>决策树生成：在决策树各个点上按照一定方法选择特征，递归构建决策树</p>
</li>
<li>
<p>决策树剪枝：在已生成的树上减掉一些子树或者叶节点，从而简化分类树模型</p>
</li>
</ul>
</li>
<li>
<p>选择分类特征</p>
<ul>
<li>
<p>ID3算法</p>
</li>
<li>
<p>C4.5算法</p>
</li>
<li>
<p>CART算法</p>
</li>
</ul>
</li>
<li>
<p>剪枝</p>
<blockquote>
<p>在生成树的过程中，如果没有剪枝（pruning）操作，就生成一个对训练集完全拟合的决策树，但这是对测试集非常不友好的，泛化能力较差.</p>
</blockquote>
<ul>
<li>
<p>预剪枝</p>
<ul>
<li>
<p>思想：通过提前停止树的构建而对树剪枝，一旦停止，节点就是叶子，该叶子表示的类为子集中样本数量的类</p>
</li>
<li>
<p>预剪枝方法：</p>
<ul>
<li>
<p>预定义树高度：当决策树达到该高度时就停止生长</p>
</li>
<li>
<p>达到阈值：节点实例个数、系统性能增益等</p>
<blockquote>
<p>理想的决策树有三种：<br>
（1）叶子节点数最少（横向决策次数少）<br>
（2）叶子节点深度最小（纵向决策次数少）<br>
（3）叶子节点数最少且叶子节点深度最小</p>
</blockquote>
</li>
</ul>
</li>
<li>
<p>后剪枝方法：</p>
<ul>
<li>
<p>首先构造完整的决策树</p>
</li>
<li>
<p>然后对那些置信度不够的结点子树用叶子结点来代替，该叶子的类标号用该结点子树中最频繁的类标记。</p>
</li>
</ul>
<blockquote>
<p>简单、合理（预剪枝方法中精确地估计何时停止树增长很困难）</p>
</blockquote>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="SVM优点支持向量机">SVM优点支持向量机</h3>
<p><img src="https://s2.loli.net/2022/10/29/1NHs2vMIDEJqnAK.png" alt=""></p>
<h4 id="支持向量机（Support-Vector-Machine-）">支持向量机（Support Vector Machine ）</h4>
<p>有监督学习方法，它尝试寻找一个最优决策边界，使距离两个类别最近的样本最远</p>
<h4 id="优点">优点</h4>
<ul>
<li>
<p>相对于其他分类算法不需要过多样本，并且由于SVM引入了核函数，所以SVM可以处理高维样本</p>
</li>
<li>
<p>结构风险最小，这种风险是指分类器对问题真实模型的逼近与问题真实解之间的累积误差</p>
</li>
<li>
<p>非线性，是指SVM擅长应付样本数据线性不可分的情况，主要通过松弛变量（也叫惩罚变量）和核函数技术来实现，这一部分也正是SVM的精髓所在</p>
</li>
</ul>
<h3 id="集成学习">集成学习</h3>
<p>集成学习通过将多个弱分类器集成在一起，使它们共同完成学习任务，构建一个强分类器。潜在哲学思想是“三个臭皮匠赛过诸葛亮”</p>
<p><img src="https://s2.loli.net/2022/10/29/diEp5fLovQzSU68.png" alt=""></p>
<p><img src="https://s2.loli.net/2022/10/29/W5N9QKsyxFhDL1k.png" alt=""></p>
<p><img src="https://s2.loli.net/2022/10/29/d1LMZ6gzfW7Bw3F.png" alt=""></p>
<h2 id="回归问题">回归问题</h2>
<p>回归分析用于预测输入变量（自变量）和输出变量（因变量）之间的关系，特别是当输入变<br>
量的值发生变化时，输出变量值随之发生变化</p>
<p><img src="https://s2.loli.net/2022/10/29/GVpNl6IqHjdnrUX.png" alt=""></p>
<h3 id="线性回归算法">线性回归算法</h3>
<p>线性回归算法假设特征和结果满足线性关系，意味着可以将输入项分别乘以一些常量，再<br>
将结果加起来得到输出</p>
<p><img src="https://s2.loli.net/2022/10/29/4EQ26pdHneIbCVo.png" alt=""></p>
<h2 id="聚类问题">聚类问题</h2>
<p>聚类问题是无监督学习的问题，算法的思想就是“物以类聚，人以群分”，聚类算法感知样本<br>
间的相似度，进行类别归纳，对新的输入进行输出预测，输出变量取有限个离散值</p>
<p><img src="https://s2.loli.net/2022/10/29/W7aNSjnvoPpb6VA.png" alt=""></p>
<h3 id="K-Means">K-Means</h3>
<p><img src="https://s2.loli.net/2022/10/29/PxvkFzdqTocZsew.png" alt=""></p>
<p>K-means（又称k-均值或k-平均）聚类算法。算法思想就是首先随机确定k个中心点作为聚类中心，然后把每个数据点分配给最邻近的中心点，分配完成后形成k个聚类，计算各个聚类的平均中心点，将其作为该聚类新的类中心点，然后重复迭代上述步骤直到分配过程不再产生变化。</p>
<p><img src="https://s2.loli.net/2022/10/29/wHi2RPkEhap9s48.png" alt=""></p>
<p><img src="https://s2.loli.net/2022/10/29/wz5LaJSAC9Q7r1l.png" alt=""></p>
<h1 id="机器学习一般过程">机器学习一般过程</h1>
<ul>
<li>
<p>[ ] 数据收集</p>
</li>
<li>
<p>[ ] 数据清洗(清除重复或缺失的数据，以提高数据的精度)</p>
</li>
<li>
<p>[ ] 运用机器学习算法对数据进行学习</p>
</li>
<li>
<p>[ ] 使用测试数据对性能进行评测</p>
</li>
<li>
<p>[ ] 部署模型</p>
</li>
</ul>
<p><img src="https://s2.loli.net/2022/10/29/FkuJVKq3eGzDibI.png" alt=""></p>
]]></content>
      <categories>
        <category>机器学习</category>
      </categories>
      <tags>
        <tag>机器学习</tag>
        <tag>人工智能</tag>
      </tags>
  </entry>
  <entry>
    <title>机器学习:性能评价指标与PR曲线</title>
    <url>/2022/11/13/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0-%E6%80%A7%E8%83%BD%E8%AF%84%E4%BB%B7%E6%8C%87%E6%A0%87%E4%B8%8EPR%E6%9B%B2%E7%BA%BF/</url>
    <content><![CDATA[<h2 id="混淆矩阵">混淆矩阵</h2>
<h3 id="混淆矩阵：">混淆矩阵：</h3>
<ul>
<li>
<p><strong>真阳性(TP)</strong>:预测为阳性，实际为阳</p>
</li>
<li>
<p><strong>真阴性(TN)</strong>:预测为阴性，实际为阴</p>
</li>
<li>
<p><strong>假阳性(FP)</strong>:预测为阳性，实际为阴</p>
</li>
<li>
<p><strong>假阴性(FN)</strong>:预测为阴性，实际为阳</p>
</li>
</ul>
<h2 id="准确率">准确率</h2>
<p>准确率为是指在所有事件中预测结果与实际情况<strong>相符</strong>的事件所占比例</p>
<p><img src="https://s2.loli.net/2022/11/13/JxeSCLowTdnF6Db.png" alt=""></p>
<h2 id="F值">F值</h2>
<p><img src="https://s2.loli.net/2022/11/13/gU3ayZFihtQ9JkD.png" alt=""></p>
<p>机器学习中使用精确率(precision)、召回率(recall)、F值等指标进行性能评估</p>
<h4 id="精确率">精确率</h4>
<p>预测问阳的数据中，实际为阳的比例</p>
<p><img src="https://s2.loli.net/2022/11/13/2WHjbpdk9Xh6KTi.png" alt=""></p>
<h4 id="召回率">召回率</h4>
<p>实际为阳的数据，被预测为阳的比例</p>
<p><img src="https://s2.loli.net/2022/11/13/YvIBrO6Lu3U7pWH.png" alt=""></p>
<h4 id="F值-2">F值</h4>
<p>F值是由精确率与召回率组合计算的值(调和平均)</p>
<p><img src="https://s2.loli.net/2022/11/13/8IozmpKUh4Vc17s.png" alt=""></p>
<h2 id="编程">编程</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy</span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> *</span><br><span class="line">y_true=[<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>]</span><br><span class="line">y_pred=[<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>]</span><br><span class="line">comfmat=confusion_matrix(y_true,y_pred)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;混淆矩阵:\n&quot;</span>,comfmat)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;精确率:&quot;</span>,precision_score(y_true,y_pred))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;召回率:&quot;</span>,recall_score(y_true,y_pred))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;F1:&quot;</span>,f1_score(y_true,y_pred))</span><br></pre></td></tr></table></figure>
<h1 id="PR曲线">PR曲线</h1>
<p>召回率与精确率的关系: <strong>召回率与精准率成反比例</strong></p>
<blockquote>
<p><img src="https://s2.loli.net/2022/11/13/zPb6kqmLadepExI.png" alt=""></p>
<p>纵轴为精确率,横轴为召回率</p>
</blockquote>
<h2 id="基于PR曲线的模型评估">基于PR曲线的模型评估</h2>
<p>由于精确率与召回率成反比例，一个升高则另一个降低</p>
<p>不过存在精确率与召回率相同的点，该点被称为<strong>平衡点(Break Even Point,BEP)</strong></p>
]]></content>
      <categories>
        <category>机器学习</category>
      </categories>
      <tags>
        <tag>机器学习</tag>
        <tag>人工智能</tag>
      </tags>
  </entry>
  <entry>
    <title>OpenCV:灰度变换和直方图修正</title>
    <url>/2022/09/16/%E7%81%B0%E5%BA%A6%E5%8F%98%E6%8D%A2%E5%92%8C%E7%9B%B4%E6%96%B9%E5%9B%BE%E4%BF%AE%E6%AD%A3/</url>
    <content><![CDATA[<h1 id="灰度化">灰度化</h1>
<h2 id="加权平均值实现">加权平均值实现</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2 <span class="keyword">as</span> cv</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">image=cv.imread(<span class="string">&quot;pic.png&quot;</span>)</span><br><span class="line">h=np.shape(image)[<span class="number">0</span>]</span><br><span class="line">w=np.shape(image)[<span class="number">1</span>]</span><br><span class="line">gray_img=np.zeros((h,w,<span class="number">3</span>),np.uint8)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(h):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(w):</span><br><span class="line">        gray_img[i,j]=<span class="number">0.3</span>*image[i,j][<span class="number">0</span>]+<span class="number">0.59</span>*image[i,j][<span class="number">1</span>]+<span class="number">0.11</span>*image[i,j][<span class="number">2</span>]</span><br><span class="line">cv.imshow(<span class="string">&quot;src&quot;</span>,image)</span><br><span class="line">cv.imshow(<span class="string">&quot;gray&quot;</span>,gray_img)</span><br><span class="line">cv.waitKey(<span class="number">0</span>)</span><br><span class="line">cv.destroyAllWindows()</span><br></pre></td></tr></table></figure>
<p><img src="https://s2.loli.net/2022/10/09/Mq5tuSURyH9XZds.png" alt=""></p>
<h2 id="最大法实现">最大法实现</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">import</span> cv2 <span class="keyword">as</span> cv</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">image=cv.imread(<span class="string">&quot;pic.png&quot;</span>)</span><br><span class="line">h=np.shape(image)[<span class="number">0</span>]</span><br><span class="line">w=np.shape(image)[<span class="number">1</span>]</span><br><span class="line">gray_img=np.zeros((h,w,<span class="number">3</span>),np.uint8)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(h):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(w):</span><br><span class="line">        gray_img[i,j]=<span class="built_in">max</span>(image[i,j][<span class="number">0</span>],image[i,j][<span class="number">1</span>],image[i,j][<span class="number">2</span>])</span><br><span class="line">cv.imshow(<span class="string">&quot;src&quot;</span>,image)</span><br><span class="line">cv.imshow(<span class="string">&quot;gray&quot;</span>,gray_img)</span><br><span class="line">cv.waitKey(<span class="number">0</span>)</span><br><span class="line">cv.destroyAllWindows()</span><br></pre></td></tr></table></figure>
<p><img src="https://s2.loli.net/2022/10/09/Mq5tuSURyH9XZds.png" alt=""></p>
<h2 id="平均法实现">平均法实现</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2 <span class="keyword">as</span> cv</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">image=cv.imread(<span class="string">&quot;pic.png&quot;</span>)</span><br><span class="line">h=np.shape(image)[<span class="number">0</span>]</span><br><span class="line">w=np.shape(image)[<span class="number">1</span>]</span><br><span class="line">gray_img=np.zeros((h,w,<span class="number">3</span>),np.uint8)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(h):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(w):</span><br><span class="line">        gray_img[i,j]=(image[i,j][<span class="number">0</span>]+image[i,j][<span class="number">1</span>]+image[i,j][<span class="number">2</span>])/<span class="number">3</span></span><br><span class="line">cv.imshow(<span class="string">&quot;src&quot;</span>,image)</span><br><span class="line">cv.imshow(<span class="string">&quot;gray&quot;</span>,gray_img)</span><br><span class="line">cv.waitKey(<span class="number">0</span>)</span><br><span class="line">cv.destroyAllWindows()</span><br></pre></td></tr></table></figure>
<p><img src="https://s2.loli.net/2022/10/09/1VDUxs2E4eiT9XF.png" alt=""></p>
<h2 id="灰度线性变换">灰度线性变换</h2>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2 <span class="keyword">as</span> cv</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">img=cv.imread(<span class="string">&quot;pic.png&quot;</span>)</span><br><span class="line">out=<span class="number">1.8</span>*img</span><br><span class="line">out[out&gt;<span class="number">255</span>]=<span class="number">255</span></span><br><span class="line">out=np.around(out)</span><br><span class="line">out=out.astype(np.uint8)</span><br><span class="line">cv.imshow(<span class="string">&quot;img&quot;</span>,img)</span><br><span class="line">cv.imshow(<span class="string">&quot;out&quot;</span>,out)</span><br><span class="line">cv.waitKey(<span class="number">0</span>)</span><br><span class="line">cv.destroyAllWindows()</span><br></pre></td></tr></table></figure>
<p><img src="https://s2.loli.net/2022/10/09/1VDUxs2E4eiT9XF.png" alt=""></p>
<h2 id="分段线性变换">分段线性变换</h2>
<p><img src="https://s2.loli.net/2022/10/09/xfiNWtIpkXgPh8E.png" alt=""></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>OpenCV</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>OpenCV</tag>
      </tags>
  </entry>
  <entry>
    <title>爬虫:推送川农大教务通知</title>
    <url>/2022/10/09/%E7%88%AC%E8%99%AB-%E6%8E%A8%E9%80%81%E5%B7%9D%E5%86%9C%E5%A4%A7%E6%95%99%E5%8A%A1%E9%80%9A%E7%9F%A5/</url>
    <content><![CDATA[<p><img title="" src="https://s2.loli.net/2022/10/09/QDeV4EFNG2KToSq.jpg" alt="" width="96"><img title="" src="https://raw.githubusercontent.com/MrHarsh10/ImageHosting-/main/img/202210091242107.jpg" alt="" width="97"></p>
<h1 id="实现过程-2">实现过程</h1>
<ol>
<li>平台</li>
</ol>
<p><img src="https://s2.loli.net/2022/10/09/GnuFfVYwDpva83q.png" alt=""></p>
<p>pushplus这个平台直接调用api接口就行了</p>
<ol start="2">
<li>目标网站</li>
</ol>
<p><img src="https://s2.loli.net/2022/10/09/9jd6kebRBtHvJpA.png" alt=""></p>
<p>研究一下网页源代码的组成部分我们可以发现每个通知的xpath</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/html/body/form/div/div[2]/table/tbody/tr</span><br></pre></td></tr></table></figure>
<p>我们获取到每个通知的url后，将它们放入集合中，后用json保存，一定时间再次爬取，</p>
<p>对前后两次集合的<mark>并集后取原集合的差集</mark>，如果结果不为空，则分别获取集合的结果，分页爬取文章内容</p>
<p><img src="https://s2.loli.net/2022/10/09/RuFWlbv7e2jSVPg.png" alt=""></p>
<p>在调用平台API，发送信息</p>
<p>为了实现全部自动化，我们可以将脚本部署到服务器上定时运行，当<mark>注意教务网每天凌晨要关闭</mark></p>
<h1 id="代码-10">代码</h1>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_page</span>(<span class="params">url</span>):</span><br><span class="line">    header = &#123;</span><br><span class="line">        <span class="string">&quot;accept&quot;</span>: <span class="string">&quot;text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9&quot;</span>,</span><br><span class="line">        <span class="string">&quot;accept-encoding&quot;</span>: <span class="string">&quot;gzip, deflate, br&quot;</span>,</span><br><span class="line">        <span class="string">&quot;accept-language&quot;</span>: <span class="string">&quot;zh-CN,zh;q=0.9,en;q=0.8,en-GB;q=0.7,en-US;q=0.6&quot;</span>,</span><br><span class="line">        <span class="string">&quot;referer&quot;</span>: <span class="string">&quot;https://jiaowu.sicau.edu.cn/web/web/web/index.asp&quot;</span>,</span><br><span class="line">        <span class="string">&quot;sec-ch-ua&quot;</span>: <span class="string">&#x27;Chromium&quot;;v=&quot;106&quot;, &quot;Microsoft Edge&quot;;v=&quot;106&quot;, &quot;Not;A=Brand&quot;;v=&quot;99&quot;&#x27;</span>,</span><br><span class="line">        <span class="string">&quot;sec-ch-ua-mobile&quot;</span>: <span class="string">&quot;?0&quot;</span>,</span><br><span class="line">        <span class="string">&quot;sec-ch-ua-platform&quot;</span>: <span class="string">&quot;Windows&quot;</span>,</span><br><span class="line">        <span class="string">&quot;sec-fetch-dest&quot;</span>: <span class="string">&quot;document&quot;</span>,</span><br><span class="line">        <span class="string">&quot;sec-fetch-mode&quot;</span>: <span class="string">&quot;navigate&quot;</span>,</span><br><span class="line">        <span class="string">&quot;sec-fetch-site&quot;</span>: <span class="string">&quot;same-origin&quot;</span>,</span><br><span class="line">        <span class="string">&quot;sec-fetch-user&quot;</span>: <span class="string">&quot;?1&quot;</span>,</span><br><span class="line">        <span class="string">&quot;upgrade-insecure-requests&quot;</span>: <span class="string">&quot;1&quot;</span>,</span><br><span class="line">        <span class="string">&quot;user-agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/106.0.0.0 Safari/537.36 Edg/106.0.1370.37&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    s = requests.get(url, headers=header)</span><br><span class="line">    html = etree.HTML(s.content.decode(<span class="string">&#x27;gbk&#x27;</span>))</span><br><span class="line">    title=html.xpath(<span class="string">&quot;/html/body/div[@class=&#x27;page-title-2&#x27;]/text()&quot;</span>)</span><br><span class="line">    txt=html.xpath(<span class="string">&quot;//table[@align=&#x27;center&#x27;]/tbody/tr/td/table&quot;</span>)</span><br><span class="line">    txt=etree.tostring(txt[<span class="number">2</span>],encoding=<span class="string">&#x27;utf-8&#x27;</span>).decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    txt = <span class="string">&quot;&lt;head&gt;&lt;base href=\&quot;&quot;</span> + url + <span class="string">&quot;\&quot; /&gt;&lt;/head&gt;&lt;p&gt;&lt;a href=\&quot;&quot;</span>+url+<span class="string">&quot;\&quot;&gt;&quot;</span>+title[<span class="number">0</span>]+<span class="string">&quot;&lt;/a&gt;&lt;/p&gt;&quot;</span>+txt</span><br><span class="line">    <span class="keyword">return</span> title,txt</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">vx_msg</span>(<span class="params">title,content</span>):</span><br><span class="line">    token = <span class="string">&#x27;平台token&#x27;</span></span><br><span class="line">    url = <span class="string">&#x27;http://www.pushplus.plus/send&#x27;</span></span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">&quot;token&quot;</span>: token,</span><br><span class="line">        <span class="string">&quot;title&quot;</span>: title,</span><br><span class="line">        <span class="string">&quot;content&quot;</span>: content</span><br><span class="line">    &#125;</span><br><span class="line">    body = json.dumps(data).encode(encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    headers = &#123;<span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span>&#125;</span><br><span class="line">    r=requests.post(url, data=body, headers=headers)</span><br><span class="line">    j=r.json()</span><br><span class="line">    <span class="keyword">if</span> j[<span class="string">&quot;code&quot;</span>]==<span class="number">200</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;发送成功&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;失败&quot;</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_data</span>():</span><br><span class="line">    header = &#123;</span><br><span class="line">        <span class="string">&quot;accept&quot;</span>: <span class="string">&quot;text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9&quot;</span>,</span><br><span class="line">        <span class="string">&quot;accept-encoding&quot;</span>: <span class="string">&quot;gzip, deflate, br&quot;</span>,</span><br><span class="line">        <span class="string">&quot;accept-language&quot;</span>: <span class="string">&quot;zh-CN,zh;q=0.9,en;q=0.8,en-GB;q=0.7,en-US;q=0.6&quot;</span>,</span><br><span class="line">        <span class="string">&quot;referer&quot;</span>: <span class="string">&quot;https://jiaowu.sicau.edu.cn/web/web/web/index.asp&quot;</span>,</span><br><span class="line">        <span class="string">&quot;sec-ch-ua&quot;</span>: <span class="string">&#x27;Chromium&quot;;v=&quot;106&quot;, &quot;Microsoft Edge&quot;;v=&quot;106&quot;, &quot;Not;A=Brand&quot;;v=&quot;99&quot;&#x27;</span>,</span><br><span class="line">        <span class="string">&quot;sec-ch-ua-mobile&quot;</span>: <span class="string">&quot;?0&quot;</span>,</span><br><span class="line">        <span class="string">&quot;sec-ch-ua-platform&quot;</span>: <span class="string">&quot;Windows&quot;</span>,</span><br><span class="line">        <span class="string">&quot;sec-fetch-dest&quot;</span>: <span class="string">&quot;document&quot;</span>,</span><br><span class="line">        <span class="string">&quot;sec-fetch-mode&quot;</span>: <span class="string">&quot;navigate&quot;</span>,</span><br><span class="line">        <span class="string">&quot;sec-fetch-site&quot;</span>: <span class="string">&quot;same-origin&quot;</span>,</span><br><span class="line">        <span class="string">&quot;sec-fetch-user&quot;</span>: <span class="string">&quot;?1&quot;</span>,</span><br><span class="line">        <span class="string">&quot;upgrade-insecure-requests&quot;</span>: <span class="string">&quot;1&quot;</span>,</span><br><span class="line">        <span class="string">&quot;user-agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/106.0.0.0 Safari/537.36 Edg/106.0.1370.37&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        s = requests.get(<span class="string">&quot;https://jiaowu.sicau.edu.cn/web/web/web/gwmore.asp&quot;</span>, headers=header)</span><br><span class="line">        html = etree.HTML(s.content.decode(<span class="string">&#x27;gbk&#x27;</span>))</span><br><span class="line">        result = html.xpath(<span class="string">&quot;/html/body/form/div/div[2]/table/tbody/tr&quot;</span>)</span><br><span class="line">        ls =<span class="built_in">set</span>()</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> result:</span><br><span class="line">            <span class="comment">#date = i.xpath(&quot;./td[4]/text()&quot;)</span></span><br><span class="line">            url = <span class="string">&quot;https://jiaowu.sicau.edu.cn/web/web/web/&quot;</span> + <span class="string">&quot;&quot;</span>.join(i.xpath(<span class="string">&quot;./td[3]/div/a/@href&quot;</span>))</span><br><span class="line">            <span class="comment">#title = i.xpath(&quot;./td[3]/div/a/font/text()&quot;)</span></span><br><span class="line">            ls.add(url)</span><br><span class="line">        <span class="keyword">return</span> ls</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;获取通知列表失败&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">send</span>(<span class="params">url</span>):</span><br><span class="line">    title, content = get_page(url)</span><br><span class="line">    vx_msg(title[<span class="number">0</span>], content)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">read</span>():</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;data.json&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">        <span class="built_in">str</span> = file.read()</span><br><span class="line">        data = json.loads(<span class="built_in">str</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">set</span>(data)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">save</span>(<span class="params">data</span>):</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;data.json&#x27;</span>, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">        <span class="built_in">str</span> = file.write(json.dumps(data))</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    ls=get_data()</span><br><span class="line">    data=read()</span><br><span class="line">    s=data|ls</span><br><span class="line">    s=s-data</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(s)!=<span class="number">0</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> s:</span><br><span class="line">            <span class="built_in">print</span>(i)</span><br><span class="line">            send(i)</span><br><span class="line">        save(<span class="built_in">list</span>(ls))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;没有新的通知&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;爬取失败&quot;</span>)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>爬虫</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>爬虫：川农选课</title>
    <url>/2022/10/05/%E7%88%AC%E8%99%AB%EF%BC%9A%E5%B7%9D%E5%86%9C%E9%80%89%E8%AF%BE/</url>
    <content><![CDATA[<pre><code>import time

from selenium.webdriver.support.wait import WebDriverWait
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.support import expected_conditions as EC
browser=webdriver.Edge()

try:
    browser.get(&quot;https://jiaowu.sicau.edu.cn/&quot;)
    input=browser.find_element(By.NAME,value='user')
    input.send_keys('202105930')
    input=browser.find_element(By.NAME,value='pwd')
    input.send_keys('05174436')
    input=browser.find_element(By.XPATH,value='//input[@value=&quot;S&quot;]')
    input.click()
    input = browser.find_element(By.NAME, value='pwd')
    print(input.location)
    input.send_keys(Keys.ENTER)



except:
    print(&quot;error&quot;)
</code></pre>
]]></content>
      <categories>
        <category>爬虫</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>爬虫基础</title>
    <url>/2022/08/09/%E7%88%AC%E8%99%AB%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h1 id="HTTP基本原理">HTTP基本原理</h1>
<blockquote>
<p>参考资料：</p>
<ul>
<li><a href="https://www.runoob.com/http/http-tutorial.html">HTTP 教程 | 菜鸟教程 (runoob.com)</a></li>
</ul>
</blockquote>
<hr>
<h2 id="URI和URL">URI和URL</h2>
<p>URI:统一资源标识符</p>
<p>URL:统一资源定位符</p>
<p>URN:统一资源名称</p>
<blockquote>
<p>现在互联网，URN用得很少，一般网页链接🔗称为URL</p>
</blockquote>
<hr>
<h2 id="超文本">超文本</h2>
<p>网页源代码HTML称为超文本</p>
<hr>
<h2 id="HTTP和HTTPS">HTTP和HTTPS</h2>
<p>HTTP:超文本传输协议</p>
<p>HTTPS:HTTP下加入SSL层</p>
<hr>
<h2 id="HTTP-请求过程">HTTP 请求过程</h2>
<img title="" src="https://s2.loli.net/2022/08/09/h6f4vkV2ICe3uQF.webp" alt="" data-align="inline">
<p><strong>我们利用浏览器”检查“工具的网络来观察这个过程</strong></p>
<img title="" src="https://s2.loli.net/2022/08/09/Xhdi1tqQlake73R.png" alt="" data-align="inline">
<ul>
<li>
<p>General部分</p>
<ul>
<li>
<p>Request URL:请求的URL</p>
</li>
<li>
<p>Request Method:请求方法</p>
</li>
<li>
<p>Status Code: 响应状态码</p>
</li>
<li>
<p>Remote Address:远程服务器的地址和端口</p>
</li>
<li>
<p>Referrer Policy:Referrer判别策略</p>
</li>
</ul>
</li>
<li>
<p>Response Header:响应头</p>
</li>
<li>
<p>Request Header:请求头</p>
</li>
</ul>
<hr>
<h2 id="请求-2">请求</h2>
<blockquote>
<p>请求由客户端发出，分为4部分</p>
<blockquote>
<ul>
<li>
<p>请求方法:Request Method</p>
</li>
<li>
<p>请求网址:Request URL</p>
</li>
<li>
<p>请求头:Request Headers</p>
</li>
<li>
<p>请求体:Request Body</p>
</li>
</ul>
</blockquote>
</blockquote>
<h3 id="请求方法">请求方法</h3>
<p>常见的为：GET和POST</p>
<blockquote>
<p>GET 与POST区别</p>
<ul>
<li>
<p>GET的参数在URL里面，而POST请求的数据以表单传输，包含在请求体</p>
</li>
<li>
<p>GET的数据只有1024字节，而POST没有限制</p>
</li>
</ul>
</blockquote>
<p>其他请求方法</p>
<img title="" src="https://s2.loli.net/2022/08/09/UV5MSGA7DJrgdxs.png" alt="" data-align="inline">
<h3 id="请求的网址">请求的网址</h3>
<p>请求的网址即URL</p>
<h3 id="请求头">请求头</h3>
<ul>
<li>
<p>Accept:请求报头域，指定客户端接收哪些类型的信息</p>
</li>
<li>
<p>Accept-Language:指定客户端可接受语言类型</p>
</li>
<li>
<p>Host:指定请求资源的主机IP和端口</p>
</li>
<li>
<p>Cookie:储存在用户本地终端上的数据,特定的 web文档关联在一起, 保存了该客户机访问这个Web 文档时的信息, 当客户机再次访问这个 Web 文档时这些信息可供该文档使用。</p>
</li>
<li>
<p>Referer:标识请求是从那个页面发过来的</p>
</li>
<li>
<p>User-Agent:一个特殊字符串头，使得服务器能够识别客户使用的操作系统及版本、CPU 类型、浏览器及版本、浏览器渲染引擎、浏览器语言、浏览器插件等。</p>
</li>
<li>
<p>Content-Type:内容类型，一般是指网页中存在的Content-Type，用于定义网络文件的类型和网页的编码，决定文件接收方将以什么形式、什么编码读取这个文件</p>
</li>
</ul>
<h3 id="请求体">请求体</h3>
<p>请求体承载的是POST的表单数据，对于GET，请求为空</p>
<hr>
<h2 id="响应">响应</h2>
<h3 id="响应状态码">响应状态码</h3>
<p>常见的 HTTP 状态码：</p>
<ul>
<li>200 - 请求成功</li>
<li>301 - 资源（网页等）被永久转移到其它URL</li>
<li>404 - 请求的资源（网页等）不存在</li>
<li>500 - 内部服务器错误</li>
</ul>
<p>其它可以参考<a href="https://www.runoob.com/http/http-status-codes.html">HTTP 状态码 | 菜鸟教程</a></p>
<h3 id="响应头">响应头</h3>
<p>响应头包含服务器对请求的应答信息，如Content-Type、Sever、Set-Cookie</p>
<h3 id="响应体">响应体</h3>
<p>响应体包含响应的正文数据</p>
<hr>
<h1 id="网页基础">网页基础</h1>
<h2 id="网页组成">网页组成</h2>
<p>网页是由HTML、CSS、JavaScript组成</p>
<p><em><strong>如果想学爬虫，必须要点Web基础</strong></em></p>
]]></content>
      <categories>
        <category>爬虫</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机网络三级笔记</title>
    <url>/2022/08/22/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E4%B8%89%E7%BA%A7%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="第一章-网络系统结构与设计的基本原则">第一章 网络系统结构与设计的基本原则</h1>
<hr>
<h2 id="以太网速率分类">以太网速率分类</h2>
<ul>
<li>
<p>传统以太网：10Mbit/s</p>
</li>
<li>
<p>快速以太网：100Mbit/s</p>
</li>
<li>
<p>吉比特以太网：10Gbits</p>
</li>
</ul>
<h2 id="CSMA-CD-与-CSMA-CA">CSMA/CD 与 CSMA/CA</h2>
<ul>
<li>
<p>CSMA/CD（Carrier Sense Multiple Access/Collision Detection，带有冲突检测的载波侦听多路存取）。是子网内部所采用的介质访问控制方法。</p>
</li>
<li>
<p>CSMA/CA(Carrier Sense Multiple Access with Collision Avoidance，带有冲突检测的载波监听的多路访问)。利用 ACK 信号来避免冲突的发生。</p>
</li>
</ul>
<h2 id="光纤分布式数据接口-FDDI-与弹性分组环-RPR"><em>光纤分布式数据接口</em>(FDDI)与<em>弹性分组环</em>(RPR)</h2>
<ul>
<li>都是双环结构</li>
</ul>
<h2 id="宽带城域网">宽带城域网</h2>
<h3 id="宽带城域网结构">宽带城域网结构</h3>
<img src="https://raw.githubusercontent.com/MrHarsh10/ImageHosting-/main/img/202208312306948.png" title="" alt="" data-align="center">  
<h3 id="宽带城域网网络平台各层功能">宽带城域网网络平台各层功能</h3>
<h4 id="核心交换层（核心层）">核心交换层（核心层）</h4>
<ul>
<li>
<p>主要承担高速数据交换的功能</p>
</li>
<li>
<p>实现与主干网络的互联，提供城市宽带 IP 数据出口。</p>
</li>
<li>
<p>提供宽带城域网用户访问 Internet 所需要的路由服务。</p>
</li>
<li>
<p>将多个汇聚层连接起来，为汇聚层的网络提供高速分组转发，为整个城域网提供一个高速、安全并具有QoS 保障能力的数据传输环境。</p>
</li>
</ul>
<h4 id="边缘汇聚层（汇聚层）">边缘汇聚层（汇聚层）</h4>
<ul>
<li>
<p>主要承担路由与流量汇聚的功能</p>
</li>
<li>
<p>根据处理结果把用户流量转发到核心交换层或在本地进行路由处理。</p>
</li>
<li>
<p>汇接接入层的用户流量，进行数据分组传输的汇聚、转发与交换。</p>
</li>
<li>
<p>根据接入层的用户流量，进行本地路由、过滤、流量均衡、QoS 优先级管理，以及安全控制、IP 地址转换、流量整形等处理。</p>
</li>
</ul>
<h4 id="用户接入层（接入层）">用户接入层（接入层）</h4>
<ul>
<li>
<p>主要承担用户接入与本地流量控制的功能。</p>
</li>
<li>
<p>解决“最后一公里”问题。通过各种接入技术，连接最终用户，为它覆盖范围内的用户提供访问 Internet以及其他信息服务。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>计算机网络</category>
      </categories>
      <tags>
        <tag>计算机网路</tag>
      </tags>
  </entry>
</search>
